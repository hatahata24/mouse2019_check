
mouse2019_check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f04  08005f04  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f0c  08005f0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000074  08005f88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005f88  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cef8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d08  00000000  00000000  0002cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  0002eca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0002f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206f9  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095c8  00000000  00000000  00050d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4172  00000000  00000000  0005a2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e44b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  0011e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e08 	.word	0x08005e08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005e08 	.word	0x08005e08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fce5 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f003 fc88 	bl	80046f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fcfd 	bl	800180e <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 fcc5 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	20000000 	.word	0x20000000

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000004 	.word	0x20000004
 8000e74:	200000cc 	.word	0x200000cc

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000cc 	.word	0x200000cc

08000e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e033      	b.n	8000f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f003 fc48 	bl	8004744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d118      	bne.n	8000f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed6:	f023 0302 	bic.w	r3, r3, #2
 8000eda:	f043 0202 	orr.w	r2, r3, #2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 fa92 	bl	800140c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f023 0303 	bic.w	r3, r3, #3
 8000ef6:	f043 0201 	orr.w	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
 8000efe:	e001      	b.n	8000f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Start+0x1a>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e0a5      	b.n	800107e <HAL_ADC_Start+0x166>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d018      	beq.n	8000f7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_ADC_Start+0x174>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_ADC_Start+0x178>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9a      	lsrs	r2, r3, #18
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d179      	bne.n	800107c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc6:	d106      	bne.n	8000fd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f023 0206 	bic.w	r2, r3, #6
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd4:	e002      	b.n	8000fdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_ADC_Start+0x17c>)
 8000fe6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d12a      	bne.n	8001054 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <HAL_ADC_Start+0x180>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d015      	beq.n	8001034 <HAL_ADC_Start+0x11c>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a23      	ldr	r2, [pc, #140]	; (800109c <HAL_ADC_Start+0x184>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d105      	bne.n	800101e <HAL_ADC_Start+0x106>
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_ADC_Start+0x17c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00a      	beq.n	8001034 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_ADC_Start+0x188>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d129      	bne.n	800107c <HAL_ADC_Start+0x164>
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_ADC_Start+0x17c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d823      	bhi.n	800107c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d11c      	bne.n	800107c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	e013      	b.n	800107c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_ADC_Start+0x180>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_ADC_Start+0x164>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d107      	bne.n	800107c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800107a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000000c 	.word	0x2000000c
 8001090:	431bde83 	.word	0x431bde83
 8001094:	40012300 	.word	0x40012300
 8001098:	40012000 	.word	0x40012000
 800109c:	40012100 	.word	0x40012100
 80010a0:	40012200 	.word	0x40012200

080010a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c0:	d113      	bne.n	80010ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d10b      	bne.n	80010ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f043 0220 	orr.w	r2, r3, #32
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e05c      	b.n	80011a4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010ea:	f7ff fec5 	bl	8000e78 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010f0:	e01a      	b.n	8001128 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d016      	beq.n	8001128 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <HAL_ADC_PollForConversion+0x6c>
 8001100:	f7ff feba 	bl	8000e78 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d20b      	bcs.n	8001128 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f043 0204 	orr.w	r2, r3, #4
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e03d      	b.n	80011a4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b02      	cmp	r3, #2
 8001134:	d1dd      	bne.n	80010f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f06f 0212 	mvn.w	r2, #18
 800113e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d123      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d11f      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800117a:	2b00      	cmp	r3, #0
 800117c:	d111      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x1c>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e105      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x228>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d925      	bls.n	8001240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	3b1e      	subs	r3, #30
 800120a:	2207      	movs	r2, #7
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43da      	mvns	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68d9      	ldr	r1, [r3, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4403      	add	r3, r0
 8001232:	3b1e      	subs	r3, #30
 8001234:	409a      	lsls	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	e022      	b.n	8001286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6919      	ldr	r1, [r3, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	2207      	movs	r2, #7
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4403      	add	r3, r0
 800127c:	409a      	lsls	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b06      	cmp	r3, #6
 800128c:	d824      	bhi.n	80012d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b05      	subs	r3, #5
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b05      	subs	r3, #5
 80012ca:	fa00 f203 	lsl.w	r2, r0, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
 80012d6:	e04c      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d824      	bhi.n	800132a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b23      	subs	r3, #35	; 0x23
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43da      	mvns	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	400a      	ands	r2, r1
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b23      	subs	r3, #35	; 0x23
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
 8001328:	e023      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b41      	subs	r3, #65	; 0x41
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b41      	subs	r3, #65	; 0x41
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_ADC_ConfigChannel+0x234>)
 8001374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <HAL_ADC_ConfigChannel+0x238>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d109      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1cc>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d105      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_ADC_ConfigChannel+0x238>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d123      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x21e>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d003      	beq.n	80013ae <HAL_ADC_ConfigChannel+0x1e6>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d11b      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d111      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_ADC_ConfigChannel+0x23c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_ADC_ConfigChannel+0x240>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40012300 	.word	0x40012300
 8001400:	40012000 	.word	0x40012000
 8001404:	2000000c 	.word	0x2000000c
 8001408:	431bde83 	.word	0x431bde83

0800140c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001414:	4b79      	ldr	r3, [pc, #484]	; (80015fc <ADC_Init+0x1f0>)
 8001416:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	431a      	orrs	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	021a      	lsls	r2, r3, #8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6899      	ldr	r1, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	4a58      	ldr	r2, [pc, #352]	; (8001600 <ADC_Init+0x1f4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d022      	beq.n	80014ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6899      	ldr	r1, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	e00f      	b.n	800150a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0202 	bic.w	r2, r2, #2
 8001518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e1b      	ldrb	r3, [r3, #24]
 8001524:	005a      	lsls	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6859      	ldr	r1, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	3b01      	subs	r3, #1
 8001564:	035a      	lsls	r2, r3, #13
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e007      	b.n	8001580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	3b01      	subs	r3, #1
 800159c:	051a      	lsls	r2, r3, #20
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c2:	025a      	lsls	r2, r3, #9
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	029a      	lsls	r2, r3, #10
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40012300 	.word	0x40012300
 8001600:	0f000001 	.word	0x0f000001

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e16b      	b.n	8001b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 815a 	bne.w	8001b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x4a>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b12      	cmp	r3, #18
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	69b9      	ldr	r1, [r7, #24]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d00b      	beq.n	800190e <HAL_GPIO_Init+0xe6>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001902:	2b11      	cmp	r3, #17
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80b4 	beq.w	8001b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_GPIO_Init+0x310>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02b      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <HAL_GPIO_Init+0x314>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x222>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x318>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x21e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x216>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_GPIO_Init+0x328>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x32c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x20a>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00e      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a32:	2308      	movs	r3, #8
 8001a34:	e00c      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00a      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a60:	4934      	ldr	r1, [pc, #208]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abc:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	f67f ae90 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	3724      	adds	r7, #36	; 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40013800 	.word	0x40013800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	40021800 	.word	0x40021800
 8001b54:	40021c00 	.word	0x40021c00
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e22d      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	4ba3      	ldr	r3, [pc, #652]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4ba0      	ldr	r3, [pc, #640]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d112      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b9d      	ldr	r3, [pc, #628]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b99      	ldr	r3, [pc, #612]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e208      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x74>
 8001bf6:	4b91      	ldr	r3, [pc, #580]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a90      	ldr	r2, [pc, #576]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a87      	ldr	r2, [pc, #540]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a80      	ldr	r2, [pc, #512]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff f916 	bl	8000e78 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f912 	bl	8000e78 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1cd      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff f902 	bl	8000e78 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f8fe 	bl	8000e78 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1b9      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e18d      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4952      	ldr	r1, [pc, #328]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_RCC_OscConfig+0x2b0>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f8b7 	bl	8000e78 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f8b3 	bl	8000e78 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e16e      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4940      	ldr	r1, [pc, #256]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x2b0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f896 	bl	8000e78 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f892 	bl	8000e78 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e14d      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d030      	beq.n	8001ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x2b4>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f876 	bl	8000e78 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f872 	bl	8000e78 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e12d      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x200>
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x2b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f85f 	bl	8000e78 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f85b 	bl	8000e78 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e116      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a0 	beq.w	8001f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d121      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f821 	bl	8000e78 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e011      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ce>
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470000 	.word	0x42470000
 8001e44:	42470e80 	.word	0x42470e80
 8001e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff f814 	bl	8000e78 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0cf      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x478>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001e72:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e01c      	b.n	8001eba <HAL_RCC_OscConfig+0x32a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x312>
 8001e88:	4b60      	ldr	r3, [pc, #384]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a5f      	ldr	r2, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a5c      	ldr	r2, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x32a>
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a59      	ldr	r2, [pc, #356]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ffd9 	bl	8000e78 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe ffd5 	bl	8000e78 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e08e      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCC_OscConfig+0x33a>
 8001eec:	e014      	b.n	8001f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ffc3 	bl	8000e78 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7fe ffbf 	bl	8000e78 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e078      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d064      	beq.n	8001ffc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d05c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d141      	bne.n	8001fca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCC_OscConfig+0x480>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe ff94 	bl	8000e78 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7fe ff90 	bl	8000e78 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04b      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	491d      	ldr	r1, [pc, #116]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_RCC_OscConfig+0x480>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ff69 	bl	8000e78 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe ff65 	bl	8000e78 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e020      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x41a>
 8001fc8:	e018      	b.n	8001ffc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_OscConfig+0x480>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff52 	bl	8000e78 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe ff4e 	bl	8000e78 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCC_OscConfig+0x47c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x448>
 8001ff6:	e001      	b.n	8001ffc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40007000 	.word	0x40007000
 800200c:	40023800 	.word	0x40023800
 8002010:	42470060 	.word	0x42470060

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ca      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b62      	ldr	r3, [pc, #392]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b6      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494c      	ldr	r1, [pc, #304]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e065      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4933      	ldr	r1, [pc, #204]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe feb8 	bl	8000e78 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe feb4 	bl	8000e78 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e030      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4915      	ldr	r1, [pc, #84]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490d      	ldr	r1, [pc, #52]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f81d 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fe1a 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08005e54 	.word	0x08005e54
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d007      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x32>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x38>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 808d 	bne.w	800231e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002206:	60bb      	str	r3, [r7, #8]
       break;
 8002208:	e08c      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCC_GetSysClockFreq+0x160>)
 800220c:	60bb      	str	r3, [r7, #8]
      break;
 800220e:	e089      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002218:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea03 0501 	and.w	r5, r3, r1
 800223c:	ea04 0602 	and.w	r6, r4, r2
 8002240:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <HAL_RCC_GetSysClockFreq+0x160>)
 8002242:	fb02 f106 	mul.w	r1, r2, r6
 8002246:	2200      	movs	r2, #0
 8002248:	fb02 f205 	mul.w	r2, r2, r5
 800224c:	440a      	add	r2, r1
 800224e:	493a      	ldr	r1, [pc, #232]	; (8002338 <HAL_RCC_GetSysClockFreq+0x160>)
 8002250:	fba5 0101 	umull	r0, r1, r5, r1
 8002254:	1853      	adds	r3, r2, r1
 8002256:	4619      	mov	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f04f 0400 	mov.w	r4, #0
 800225e:	461a      	mov	r2, r3
 8002260:	4623      	mov	r3, r4
 8002262:	f7fe fc23 	bl	8000aac <__aeabi_uldivmod>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e049      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	099b      	lsrs	r3, r3, #6
 8002274:	f04f 0400 	mov.w	r4, #0
 8002278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	ea03 0501 	and.w	r5, r3, r1
 8002284:	ea04 0602 	and.w	r6, r4, r2
 8002288:	4629      	mov	r1, r5
 800228a:	4632      	mov	r2, r6
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	f04f 0400 	mov.w	r4, #0
 8002294:	0154      	lsls	r4, r2, #5
 8002296:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800229a:	014b      	lsls	r3, r1, #5
 800229c:	4619      	mov	r1, r3
 800229e:	4622      	mov	r2, r4
 80022a0:	1b49      	subs	r1, r1, r5
 80022a2:	eb62 0206 	sbc.w	r2, r2, r6
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	f04f 0400 	mov.w	r4, #0
 80022ae:	0194      	lsls	r4, r2, #6
 80022b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022b4:	018b      	lsls	r3, r1, #6
 80022b6:	1a5b      	subs	r3, r3, r1
 80022b8:	eb64 0402 	sbc.w	r4, r4, r2
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	00e2      	lsls	r2, r4, #3
 80022c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022ca:	00d9      	lsls	r1, r3, #3
 80022cc:	460b      	mov	r3, r1
 80022ce:	4614      	mov	r4, r2
 80022d0:	195b      	adds	r3, r3, r5
 80022d2:	eb44 0406 	adc.w	r4, r4, r6
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	02a2      	lsls	r2, r4, #10
 80022e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022e4:	0299      	lsls	r1, r3, #10
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	4621      	mov	r1, r4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4623      	mov	r3, r4
 80022f8:	f7fe fbd8 	bl	8000aac <__aeabi_uldivmod>
 80022fc:	4603      	mov	r3, r0
 80022fe:	460c      	mov	r4, r1
 8002300:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_GetSysClockFreq+0x158>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	60bb      	str	r3, [r7, #8]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002320:	60bb      	str	r3, [r7, #8]
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	68bb      	ldr	r3, [r7, #8]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	017d7840 	.word	0x017d7840

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	08005e64 	.word	0x08005e64

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffdc 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002384:	4601      	mov	r1, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0b5b      	lsrs	r3, r3, #13
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	08005e64 	.word	0x08005e64

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01d      	b.n	80023f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f002 f9fe 	bl	80047cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 fc18 	bl	8002c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d007      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e01d      	b.n	8002490 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f815 	bl	8002498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f000 fbc9 	bl	8002c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fe94 	bl	80031ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_TIM_PWM_Start+0x74>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x2c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_TIM_PWM_Start+0x78>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_PWM_Start+0x30>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_TIM_PWM_Start+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d007      	beq.n	8002514 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e083      	b.n	8002644 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f002 f995 	bl	8004880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256c:	f023 0307 	bic.w	r3, r3, #7
 8002570:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f000 fb4b 	bl	8002c18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025c8:	f023 030c 	bic.w	r3, r3, #12
 80025cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	031b      	lsls	r3, r3, #12
 80025f8:	4313      	orrs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002606:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800260e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4313      	orrs	r3, r2
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_TIM_Encoder_Start+0x16>
 800265c:	2b04      	cmp	r3, #4
 800265e:	d008      	beq.n	8002672 <HAL_TIM_Encoder_Start+0x26>
 8002660:	e00f      	b.n	8002682 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fdbe 	bl	80031ec <TIM_CCxChannelCmd>
      break;
 8002670:	e016      	b.n	80026a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	2104      	movs	r1, #4
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fdb6 	bl	80031ec <TIM_CCxChannelCmd>
      break;
 8002680:	e00e      	b.n	80026a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fdae 	bl	80031ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	2104      	movs	r1, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fda7 	bl	80031ec <TIM_CCxChannelCmd>
      break;
 800269e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d122      	bne.n	8002716 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d11b      	bne.n	8002716 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0202 	mvn.w	r2, #2
 80026e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fa6c 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 8002702:	e005      	b.n	8002710 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fa5e 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa6f 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d122      	bne.n	800276a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d11b      	bne.n	800276a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f06f 0204 	mvn.w	r2, #4
 800273a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fa42 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 8002756:	e005      	b.n	8002764 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa34 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa45 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d122      	bne.n	80027be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11b      	bne.n	80027be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f06f 0208 	mvn.w	r2, #8
 800278e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fa18 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 80027aa:	e005      	b.n	80027b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa0a 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa1b 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d122      	bne.n	8002812 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d11b      	bne.n	8002812 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0210 	mvn.w	r2, #16
 80027e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2208      	movs	r2, #8
 80027e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f9ee 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 80027fe:	e005      	b.n	800280c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9e0 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f9f1 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10e      	bne.n	800283e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0201 	mvn.w	r2, #1
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f8ad 	bl	8003998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d10e      	bne.n	800286a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d107      	bne.n	800286a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fd35 	bl	80032d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d10e      	bne.n	8002896 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d107      	bne.n	8002896 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f9b6 	bl	8002c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d10e      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d107      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f06f 0220 	mvn.w	r2, #32
 80028ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fcff 	bl	80032c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0b4      	b.n	8002a50 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	f200 809f 	bhi.w	8002a3c <HAL_TIM_PWM_ConfigChannel+0x170>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002939 	.word	0x08002939
 8002908:	08002a3d 	.word	0x08002a3d
 800290c:	08002a3d 	.word	0x08002a3d
 8002910:	08002a3d 	.word	0x08002a3d
 8002914:	08002979 	.word	0x08002979
 8002918:	08002a3d 	.word	0x08002a3d
 800291c:	08002a3d 	.word	0x08002a3d
 8002920:	08002a3d 	.word	0x08002a3d
 8002924:	080029bb 	.word	0x080029bb
 8002928:	08002a3d 	.word	0x08002a3d
 800292c:	08002a3d 	.word	0x08002a3d
 8002930:	08002a3d 	.word	0x08002a3d
 8002934:	080029fb 	.word	0x080029fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fa0a 	bl	8002d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6999      	ldr	r1, [r3, #24]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	619a      	str	r2, [r3, #24]
      break;
 8002976:	e062      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fa5a 	bl	8002e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6999      	ldr	r1, [r3, #24]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	619a      	str	r2, [r3, #24]
      break;
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 faaf 	bl	8002f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0208 	orr.w	r2, r2, #8
 80029d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0204 	bic.w	r2, r2, #4
 80029e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
      break;
 80029f8:	e021      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fb03 	bl	800300c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69d9      	ldr	r1, [r3, #28]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	021a      	lsls	r2, r3, #8
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	61da      	str	r2, [r3, #28]
      break;
 8002a3a:	e000      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x18>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0a6      	b.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d067      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0x120>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d80b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x6c>
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d073      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d802      	bhi.n	8002aba <HAL_TIM_ConfigClockSource+0x62>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d06f      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ab8:	e078      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d06c      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
 8002abe:	2b30      	cmp	r3, #48	; 0x30
 8002ac0:	d06a      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ac2:	e073      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0x8c>
 8002ac8:	2b70      	cmp	r3, #112	; 0x70
 8002aca:	d804      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x7e>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d033      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xe0>
 8002ad0:	2b60      	cmp	r3, #96	; 0x60
 8002ad2:	d041      	beq.n	8002b58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ad4:	e06a      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	d066      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x152>
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d017      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ae2:	e063      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f000 fb5a 	bl	80031ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
      break;
 8002b10:	e04c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f000 fb43 	bl	80031ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b34:	609a      	str	r2, [r3, #8]
      break;
 8002b36:	e039      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f000 fab7 	bl	80030b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2150      	movs	r1, #80	; 0x50
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fb10 	bl	8003176 <TIM_ITRx_SetConfig>
      break;
 8002b56:	e029      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f000 fad6 	bl	8003116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2160      	movs	r1, #96	; 0x60
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fb00 	bl	8003176 <TIM_ITRx_SetConfig>
      break;
 8002b76:	e019      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f000 fa97 	bl	80030b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 faf0 	bl	8003176 <TIM_ITRx_SetConfig>
      break;
 8002b96:	e009      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fae7 	bl	8003176 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e000      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d013      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d00f      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3d      	ldr	r2, [pc, #244]	; (8002d30 <TIM_Base_SetConfig+0x118>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <TIM_Base_SetConfig+0x11c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d007      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <TIM_Base_SetConfig+0x120>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02b      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d027      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <TIM_Base_SetConfig+0x118>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d023      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <TIM_Base_SetConfig+0x11c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01f      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <TIM_Base_SetConfig+0x120>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01b      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d017      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <TIM_Base_SetConfig+0x128>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <TIM_Base_SetConfig+0x12c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00f      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <TIM_Base_SetConfig+0x130>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <TIM_Base_SetConfig+0x134>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <TIM_Base_SetConfig+0x138>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <TIM_Base_SetConfig+0x13c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0xf8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40000c00 	.word	0x40000c00
 8002d3c:	40010400 	.word	0x40010400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800
 8002d4c:	40001800 	.word	0x40001800
 8002d50:	40001c00 	.word	0x40001c00
 8002d54:	40002000 	.word	0x40002000

08002d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0201 	bic.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 0302 	bic.w	r3, r3, #2
 8002da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <TIM_OC1_SetConfig+0xd8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_OC1_SetConfig+0x64>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <TIM_OC1_SetConfig+0xdc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10c      	bne.n	8002dd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0308 	bic.w	r3, r3, #8
 8002dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <TIM_OC1_SetConfig+0xd8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC1_SetConfig+0x8e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <TIM_OC1_SetConfig+0xdc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40010000 	.word	0x40010000
 8002e34:	40010400 	.word	0x40010400

08002e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0210 	bic.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0320 	bic.w	r3, r3, #32
 8002e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <TIM_OC2_SetConfig+0xe4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC2_SetConfig+0x68>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <TIM_OC2_SetConfig+0xe8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10d      	bne.n	8002ebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC2_SetConfig+0xe4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_OC2_SetConfig+0x94>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <TIM_OC2_SetConfig+0xe8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d113      	bne.n	8002ef4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40010400 	.word	0x40010400

08002f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a21      	ldr	r2, [pc, #132]	; (8003004 <TIM_OC3_SetConfig+0xe0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC3_SetConfig+0x66>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a20      	ldr	r2, [pc, #128]	; (8003008 <TIM_OC3_SetConfig+0xe4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10d      	bne.n	8002fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	; (8003004 <TIM_OC3_SetConfig+0xe0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_OC3_SetConfig+0x92>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <TIM_OC3_SetConfig+0xe4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d113      	bne.n	8002fde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40010000 	.word	0x40010000
 8003008:	40010400 	.word	0x40010400

0800300c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	031b      	lsls	r3, r3, #12
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <TIM_OC4_SetConfig+0xa4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC4_SetConfig+0x68>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <TIM_OC4_SetConfig+0xa8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d109      	bne.n	8003088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40010400 	.word	0x40010400

080030b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f023 030a 	bic.w	r3, r3, #10
 80030f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	621a      	str	r2, [r3, #32]
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003116:	b480      	push	{r7}
 8003118:	b087      	sub	sp, #28
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	031b      	lsls	r3, r3, #12
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	f043 0307 	orr.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2201      	movs	r2, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800324a:	2302      	movs	r3, #2
 800324c:	e032      	b.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003286:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4313      	orrs	r3, r2
 8003290:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e03f      	b.n	800337a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 fbba 	bl	8004a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f90b 	bl	8003548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af02      	add	r7, sp, #8
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 8083 	bne.w	80034aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Transmit+0x2e>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e07b      	b.n	80034ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Transmit+0x40>
 80033be:	2302      	movs	r3, #2
 80033c0:	e074      	b.n	80034ac <HAL_UART_Transmit+0x12a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2221      	movs	r2, #33	; 0x21
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fd4e 	bl	8000e78 <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033ea:	e042      	b.n	8003472 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	d122      	bne.n	800344a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f850 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e046      	b.n	80034ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003430:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3302      	adds	r3, #2
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	e017      	b.n	8003472 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	e013      	b.n	8003472 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f82d 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e023      	b.n	80034ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1b7      	bne.n	80033ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	2140      	movs	r1, #64	; 0x40
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f814 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e00a      	b.n	80034ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	e02c      	b.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d028      	beq.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034d4:	f7fd fcd0 	bl	8000e78 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d21d      	bcs.n	8003520 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e00f      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	429a      	cmp	r2, r3
 800353c:	d0c3      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003588:	f023 030c 	bic.w	r3, r3, #12
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	f040 80e4 	bne.w	8003780 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4aab      	ldr	r2, [pc, #684]	; (800386c <UART_SetConfig+0x324>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <UART_SetConfig+0x84>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4aaa      	ldr	r2, [pc, #680]	; (8003870 <UART_SetConfig+0x328>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d16c      	bne.n	80036a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80035cc:	f7fe fed6 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	4aa3      	ldr	r2, [pc, #652]	; (8003874 <UART_SetConfig+0x32c>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	011c      	lsls	r4, r3, #4
 80035f0:	f7fe fec4 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fbb2 f5f3 	udiv	r5, r2, r3
 800360a:	f7fe feb7 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 800360e:	4602      	mov	r2, r0
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	4a93      	ldr	r2, [pc, #588]	; (8003874 <UART_SetConfig+0x32c>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2264      	movs	r2, #100	; 0x64
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	1aeb      	subs	r3, r5, r3
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	3332      	adds	r3, #50	; 0x32
 8003638:	4a8e      	ldr	r2, [pc, #568]	; (8003874 <UART_SetConfig+0x32c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003646:	441c      	add	r4, r3
 8003648:	f7fe fe98 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 800364c:	4602      	mov	r2, r0
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003662:	f7fe fe8b 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003666:	4602      	mov	r2, r0
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009a      	lsls	r2, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <UART_SetConfig+0x32c>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2264      	movs	r2, #100	; 0x64
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	1aeb      	subs	r3, r5, r3
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a78      	ldr	r2, [pc, #480]	; (8003874 <UART_SetConfig+0x32c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	f003 0207 	and.w	r2, r3, #7
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4422      	add	r2, r4
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e154      	b.n	8003950 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80036a6:	f7fe fe55 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	4a6c      	ldr	r2, [pc, #432]	; (8003874 <UART_SetConfig+0x32c>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	011c      	lsls	r4, r3, #4
 80036ca:	f7fe fe43 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80036e4:	f7fe fe36 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <UART_SetConfig+0x32c>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2264      	movs	r2, #100	; 0x64
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	1aeb      	subs	r3, r5, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a58      	ldr	r2, [pc, #352]	; (8003874 <UART_SetConfig+0x32c>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003720:	441c      	add	r4, r3
 8003722:	f7fe fe17 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003726:	4602      	mov	r2, r0
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fbb2 f5f3 	udiv	r5, r2, r3
 800373c:	f7fe fe0a 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003740:	4602      	mov	r2, r0
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009a      	lsls	r2, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4a47      	ldr	r2, [pc, #284]	; (8003874 <UART_SetConfig+0x32c>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2264      	movs	r2, #100	; 0x64
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	1aeb      	subs	r3, r5, r3
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a42      	ldr	r2, [pc, #264]	; (8003874 <UART_SetConfig+0x32c>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4422      	add	r2, r4
 800377c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800377e:	e0e7      	b.n	8003950 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a39      	ldr	r2, [pc, #228]	; (800386c <UART_SetConfig+0x324>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <UART_SetConfig+0x24c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <UART_SetConfig+0x328>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d171      	bne.n	8003878 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003794:	f7fe fdf2 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003798:	4602      	mov	r2, r0
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	4a31      	ldr	r2, [pc, #196]	; (8003874 <UART_SetConfig+0x32c>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	011c      	lsls	r4, r3, #4
 80037b8:	f7fe fde0 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	441a      	add	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80037d2:	f7fe fdd3 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <UART_SetConfig+0x32c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2264      	movs	r2, #100	; 0x64
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	1aeb      	subs	r3, r5, r3
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	3332      	adds	r3, #50	; 0x32
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <UART_SetConfig+0x32c>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380c:	441c      	add	r4, r3
 800380e:	f7fe fdb5 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003812:	4602      	mov	r2, r0
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fbb2 f5f3 	udiv	r5, r2, r3
 8003828:	f7fe fda8 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 800382c:	4602      	mov	r2, r0
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <UART_SetConfig+0x32c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2264      	movs	r2, #100	; 0x64
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	1aeb      	subs	r3, r5, r3
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <UART_SetConfig+0x32c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4422      	add	r2, r4
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	e071      	b.n	8003950 <UART_SetConfig+0x408>
 800386c:	40011000 	.word	0x40011000
 8003870:	40011400 	.word	0x40011400
 8003874:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003878:	f7fe fd6c 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 800387c:	4602      	mov	r2, r0
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	441a      	add	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	4a31      	ldr	r2, [pc, #196]	; (8003958 <UART_SetConfig+0x410>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	011c      	lsls	r4, r3, #4
 800389c:	f7fe fd5a 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80038b6:	f7fe fd4d 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009a      	lsls	r2, r3, #2
 80038c4:	441a      	add	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	4a21      	ldr	r2, [pc, #132]	; (8003958 <UART_SetConfig+0x410>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2264      	movs	r2, #100	; 0x64
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	1aeb      	subs	r3, r5, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <UART_SetConfig+0x410>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f0:	441c      	add	r4, r3
 80038f2:	f7fe fd2f 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f5f3 	udiv	r5, r2, r3
 800390c:	f7fe fd22 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003910:	4602      	mov	r2, r0
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <UART_SetConfig+0x410>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2264      	movs	r2, #100	; 0x64
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	1aeb      	subs	r3, r5, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	3332      	adds	r3, #50	; 0x32
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <UART_SetConfig+0x410>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4422      	add	r2, r4
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	e7ff      	b.n	8003950 <UART_SetConfig+0x408>
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bdb0      	pop	{r4, r5, r7, pc}
 8003958:	51eb851f 	.word	0x51eb851f

0800395c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b0a      	cmp	r3, #10
 8003968:	d108      	bne.n	800397c <__io_putchar+0x20>
    int _c = '\r';
 800396a:	230d      	movs	r3, #13
 800396c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800396e:	f107 010c 	add.w	r1, r7, #12
 8003972:	2301      	movs	r3, #1
 8003974:	2201      	movs	r2, #1
 8003976:	4807      	ldr	r0, [pc, #28]	; (8003994 <__io_putchar+0x38>)
 8003978:	f7ff fd03 	bl	8003382 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800397c:	1d39      	adds	r1, r7, #4
 800397e:	2301      	movs	r3, #1
 8003980:	2201      	movs	r2, #1
 8003982:	4804      	ldr	r0, [pc, #16]	; (8003994 <__io_putchar+0x38>)
 8003984:	f7ff fcfd 	bl	8003382 <HAL_UART_Transmit>
  return 0;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200001e4 	.word	0x200001e4

08003998 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039a0:	2360      	movs	r3, #96	; 0x60
 80039a2:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4ab6      	ldr	r2, [pc, #728]	; (8003c88 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f040 824b 	bne.w	8003e4c <HAL_TIM_PeriodElapsedCallback+0x4b4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);   //
		  break;
	  }
*/

		cnt_l = TIM4 -> CNT;
 80039b6:	4bb5      	ldr	r3, [pc, #724]	; (8003c8c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	4bb3      	ldr	r3, [pc, #716]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80039c4:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 80039c8:	4bb2      	ldr	r3, [pc, #712]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d4:	4bb0      	ldr	r3, [pc, #704]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80039d6:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 80039da:	4bad      	ldr	r3, [pc, #692]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003c9c <HAL_TIM_PeriodElapsedCallback+0x304>
 80039e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	dd09      	ble.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x6a>
 80039ee:	4ba8      	ldr	r3, [pc, #672]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x308>
 80039f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039fc:	4ba4      	ldr	r3, [pc, #656]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80039fe:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 8003a02:	4ba5      	ldr	r3, [pc, #660]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003c9c <HAL_TIM_PeriodElapsedCallback+0x304>
 8003a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	dd09      	ble.n	8003a2a <HAL_TIM_PeriodElapsedCallback+0x92>
 8003a16:	4ba0      	ldr	r3, [pc, #640]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x308>
 8003a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a24:	4b9c      	ldr	r3, [pc, #624]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a26:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 8003a2a:	4b9b      	ldr	r3, [pc, #620]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	eef1 7a67 	vneg.f32	s15, s15
 8003a34:	4b98      	ldr	r3, [pc, #608]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a36:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8003a3a:	4b9a      	ldr	r3, [pc, #616]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fd7a 	bl	8000538 <__aeabi_f2d>
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
 8003a48:	4b91      	ldr	r3, [pc, #580]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd73 	bl	8000538 <__aeabi_f2d>
 8003a52:	a389      	add	r3, pc, #548	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fdc6 	bl	80005e8 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7fc fc0a 	bl	800027c <__adddf3>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f7fc ffcc 	bl	8000a0c <__aeabi_d2f>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003a78:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd5a 	bl	8000538 <__aeabi_f2d>
 8003a84:	4604      	mov	r4, r0
 8003a86:	460d      	mov	r5, r1
 8003a88:	4b83      	ldr	r3, [pc, #524]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd53 	bl	8000538 <__aeabi_f2d>
 8003a92:	a379      	add	r3, pc, #484	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fda6 	bl	80005e8 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fbea 	bl	800027c <__adddf3>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4618      	mov	r0, r3
 8003aae:	4621      	mov	r1, r4
 8003ab0:	f7fc ffac 	bl	8000a0c <__aeabi_d2f>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b7c      	ldr	r3, [pc, #496]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003ab8:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fd3a 	bl	8000538 <__aeabi_f2d>
 8003ac4:	a36c      	add	r3, pc, #432	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fd8d 	bl	80005e8 <__aeabi_dmul>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	a36a      	add	r3, pc, #424	; (adr r3, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f7fc feae 	bl	800083c <__aeabi_ddiv>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	f7fc ff90 	bl	8000a0c <__aeabi_d2f>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003af0:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8003af2:	4b69      	ldr	r3, [pc, #420]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd1e 	bl	8000538 <__aeabi_f2d>
 8003afc:	a35e      	add	r3, pc, #376	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fd71 	bl	80005e8 <__aeabi_dmul>
 8003b06:	4603      	mov	r3, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	a35c      	add	r3, pc, #368	; (adr r3, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fe92 	bl	800083c <__aeabi_ddiv>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	4621      	mov	r1, r4
 8003b20:	f7fc ff74 	bl	8000a0c <__aeabi_d2f>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003b28:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8003b2a:	4b58      	ldr	r3, [pc, #352]	; (8003c8c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

		epsilon_l = target_speed_l - speed_l;
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b42:	4b5a      	ldr	r3, [pc, #360]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
		pulse_l = Kp * epsilon_l;
 8003b52:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b66:	ee17 2a90 	vmov	r2, s15
 8003b6a:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003b6c:	601a      	str	r2, [r3, #0]
		if(pulse_l < 0){
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da1e      	bge.n	8003bb4 <HAL_TIM_PeriodElapsedCallback+0x21c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);		//L_CW
 8003b76:	2200      	movs	r2, #0
 8003b78:	2120      	movs	r1, #32
 8003b7a:	4852      	ldr	r0, [pc, #328]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b7c:	f7fd ffee 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);			//L_CCW
 8003b80:	2201      	movs	r2, #1
 8003b82:	2110      	movs	r1, #16
 8003b84:	484f      	ldr	r0, [pc, #316]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b86:	f7fd ffe9 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	484e      	ldr	r0, [pc, #312]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003b90:	f7fd ffe4 	bl	8001b5c <HAL_GPIO_WritePin>

			ConfigOC.Pulse = -pulse_l;
 8003b94:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	425b      	negs	r3, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
			HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8003b9c:	f107 0308 	add.w	r3, r7, #8
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4849      	ldr	r0, [pc, #292]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003ba6:	f7fe fe91 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003baa:	2100      	movs	r1, #0
 8003bac:	4847      	ldr	r0, [pc, #284]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003bae:	f7fe fc7d 	bl	80024ac <HAL_TIM_PWM_Start>
 8003bb2:	e020      	b.n	8003bf6 <HAL_TIM_PeriodElapsedCallback+0x25e>
		}
		else if(pulse_l > 0){
 8003bb4:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	dd1c      	ble.n	8003bf6 <HAL_TIM_PeriodElapsedCallback+0x25e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	4840      	ldr	r0, [pc, #256]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003bc2:	f7fd ffcb 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2110      	movs	r1, #16
 8003bca:	483e      	ldr	r0, [pc, #248]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003bcc:	f7fd ffc6 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	483c      	ldr	r0, [pc, #240]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003bd6:	f7fd ffc1 	bl	8001b5c <HAL_GPIO_WritePin>

			ConfigOC.Pulse = pulse_l;
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
			HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8003be0:	f107 0308 	add.w	r3, r7, #8
 8003be4:	2200      	movs	r2, #0
 8003be6:	4619      	mov	r1, r3
 8003be8:	4838      	ldr	r0, [pc, #224]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003bea:	f7fe fe6f 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4836      	ldr	r0, [pc, #216]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003bf2:	f7fe fc5b 	bl	80024ac <HAL_TIM_PWM_Start>
		}

		epsilon_r = target_speed_r - speed_r;
 8003bf6:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0c:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]
		pulse_r = Kp * epsilon_r;
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003c14:	ed93 7a00 	vldr	s14, [r3]
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c26:	ee17 2a90 	vmov	r2, s15
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003c2c:	601a      	str	r2, [r3, #0]
		if(pulse_r < 0){
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da52      	bge.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x344>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);		//R_CW
 8003c36:	2200      	movs	r2, #0
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4823      	ldr	r0, [pc, #140]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003c3c:	f7fd ff8e 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		//R_CCW
 8003c40:	2201      	movs	r2, #1
 8003c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c46:	4820      	ldr	r0, [pc, #128]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003c48:	f7fd ff88 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2101      	movs	r1, #1
 8003c50:	481d      	ldr	r0, [pc, #116]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003c52:	f7fd ff83 	bl	8001b5c <HAL_GPIO_WritePin>

			ConfigOC.Pulse = -pulse_r;
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
			HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	220c      	movs	r2, #12
 8003c64:	4619      	mov	r1, r3
 8003c66:	4819      	ldr	r0, [pc, #100]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003c68:	f7fe fe30 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8003c6c:	210c      	movs	r1, #12
 8003c6e:	4817      	ldr	r0, [pc, #92]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003c70:	f7fe fc1c 	bl	80024ac <HAL_TIM_PWM_Start>
 8003c74:	e054      	b.n	8003d20 <HAL_TIM_PeriodElapsedCallback+0x388>
 8003c76:	bf00      	nop
 8003c78:	6d45793a 	.word	0x6d45793a
 8003c7c:	3f544d73 	.word	0x3f544d73
 8003c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8003c84:	3f50624d 	.word	0x3f50624d
 8003c88:	20000228 	.word	0x20000228
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	2000009c 	.word	0x2000009c
 8003c94:	40010400 	.word	0x40010400
 8003c98:	20000090 	.word	0x20000090
 8003c9c:	471c4000 	.word	0x471c4000
 8003ca0:	477fff00 	.word	0x477fff00
 8003ca4:	200000a0 	.word	0x200000a0
 8003ca8:	20000094 	.word	0x20000094
 8003cac:	200000a4 	.word	0x200000a4
 8003cb0:	20000098 	.word	0x20000098
 8003cb4:	200000b0 	.word	0x200000b0
 8003cb8:	200000b8 	.word	0x200000b8
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	20000224 	.word	0x20000224
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	2000026c 	.word	0x2000026c
 8003cd0:	200000b4 	.word	0x200000b4
 8003cd4:	200000bc 	.word	0x200000bc
 8003cd8:	20000154 	.word	0x20000154
		}
		else if(pulse_r > 0){
 8003cdc:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	dd1d      	ble.n	8003d20 <HAL_TIM_PeriodElapsedCallback+0x388>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	485b      	ldr	r0, [pc, #364]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8003cea:	f7fd ff37 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cf4:	4858      	ldr	r0, [pc, #352]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8003cf6:	f7fd ff31 	bl	8001b5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4856      	ldr	r0, [pc, #344]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8003d00:	f7fd ff2c 	bl	8001b5c <HAL_GPIO_WritePin>

			ConfigOC.Pulse = pulse_r;
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
			HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	220c      	movs	r2, #12
 8003d10:	4619      	mov	r1, r3
 8003d12:	4852      	ldr	r0, [pc, #328]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8003d14:	f7fe fdda 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8003d18:	210c      	movs	r1, #12
 8003d1a:	4850      	ldr	r0, [pc, #320]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8003d1c:	f7fe fbc6 	bl	80024ac <HAL_TIM_PWM_Start>
		}


		//ADchange interrupt
		uint16_t delay = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	84fb      	strh	r3, [r7, #38]	; 0x26
		mode++;
 8003d24:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003d2c:	6013      	str	r3, [r2, #0]
		cnt++;
 8003d2e:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003d36:	6013      	str	r3, [r2, #0]
		mode = mode%2;
 8003d38:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	bfb8      	it	lt
 8003d44:	425b      	neglt	r3, r3
 8003d46:	4a46      	ldr	r2, [pc, #280]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003d48:	6013      	str	r3, [r2, #0]

		switch(mode){
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d03d      	beq.n	8003dd2 <HAL_TIM_PeriodElapsedCallback+0x43a>
				value1 = get_adc_value(&hadc1, ADC_CHANNEL_0);	//FR
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
			break;
		}
	}
}
 8003d56:	e079      	b.n	8003e4c <HAL_TIM_PeriodElapsedCallback+0x4b4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);  //L
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d5e:	4842      	ldr	r0, [pc, #264]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003d60:	f7fd fefc 	bl	8001b5c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8003d64:	2300      	movs	r3, #0
 8003d66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d68:	e002      	b.n	8003d70 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8003d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d72:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d9f7      	bls.n	8003d6a <HAL_TIM_PeriodElapsedCallback+0x3d2>
				value4 = get_adc_value(&hadc1, ADC_CHANNEL_3);	//L
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	483b      	ldr	r0, [pc, #236]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003d7e:	f000 fc89 	bl	8004694 <get_adc_value>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8003d86:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d8e:	4836      	ldr	r0, [pc, #216]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003d90:	f7fd fee4 	bl	8001b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   //R
 8003d94:	2201      	movs	r2, #1
 8003d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d9a:	4836      	ldr	r0, [pc, #216]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8003d9c:	f7fd fede 	bl	8001b5c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8003da0:	2300      	movs	r3, #0
 8003da2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003da4:	e002      	b.n	8003dac <HAL_TIM_PeriodElapsedCallback+0x414>
 8003da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003da8:	3301      	adds	r3, #1
 8003daa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d9f7      	bls.n	8003da6 <HAL_TIM_PeriodElapsedCallback+0x40e>
				value2 = get_adc_value(&hadc1, ADC_CHANNEL_1);	//R
 8003db6:	2101      	movs	r1, #1
 8003db8:	482c      	ldr	r0, [pc, #176]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003dba:	f000 fc6b 	bl	8004694 <get_adc_value>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8003dc2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dca:	482a      	ldr	r0, [pc, #168]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8003dcc:	f7fd fec6 	bl	8001b5c <HAL_GPIO_WritePin>
			break;
 8003dd0:	e03c      	b.n	8003e4c <HAL_TIM_PeriodElapsedCallback+0x4b4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);  //FL
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dd8:	4823      	ldr	r0, [pc, #140]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003dda:	f7fd febf 	bl	8001b5c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8003dde:	2300      	movs	r3, #0
 8003de0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003de2:	e002      	b.n	8003dea <HAL_TIM_PeriodElapsedCallback+0x452>
 8003de4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003de6:	3301      	adds	r3, #1
 8003de8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d9f7      	bls.n	8003de4 <HAL_TIM_PeriodElapsedCallback+0x44c>
				value3 = get_adc_value(&hadc1, ADC_CHANNEL_2);	//FL
 8003df4:	2102      	movs	r1, #2
 8003df6:	481d      	ldr	r0, [pc, #116]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003df8:	f000 fc4c 	bl	8004694 <get_adc_value>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8003e00:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003e02:	2200      	movs	r2, #0
 8003e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e08:	4817      	ldr	r0, [pc, #92]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003e0a:	f7fd fea7 	bl	8001b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //FR
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e14:	4814      	ldr	r0, [pc, #80]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003e16:	f7fd fea1 	bl	8001b5c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e1e:	e002      	b.n	8003e26 <HAL_TIM_PeriodElapsedCallback+0x48e>
 8003e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e22:	3301      	adds	r3, #1
 8003e24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e28:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d9f7      	bls.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x488>
				value1 = get_adc_value(&hadc1, ADC_CHANNEL_0);	//FR
 8003e30:	2100      	movs	r1, #0
 8003e32:	480e      	ldr	r0, [pc, #56]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003e34:	f000 fc2e 	bl	8004694 <get_adc_value>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003e3c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e44:	4808      	ldr	r0, [pc, #32]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003e46:	f7fd fe89 	bl	8001b5c <HAL_GPIO_WritePin>
			break;
 8003e4a:	bf00      	nop
}
 8003e4c:	bf00      	nop
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bdb0      	pop	{r4, r5, r7, pc}
 8003e54:	20000154 	.word	0x20000154
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	2000026c 	.word	0x2000026c
 8003e60:	200000a8 	.word	0x200000a8
 8003e64:	200000ac 	.word	0x200000ac
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	20000198 	.word	0x20000198
 8003e70:	200002ac 	.word	0x200002ac
 8003e74:	40020000 	.word	0x40020000
 8003e78:	20000268 	.word	0x20000268
 8003e7c:	200001e0 	.word	0x200001e0
 8003e80:	200002b0 	.word	0x200002b0

08003e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8a:	f7fc ff8f 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e8e:	f000 f8a9 	bl	8003fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e92:	f000 fb65 	bl	8004560 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003e96:	f000 fb39 	bl	800450c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003e9a:	f000 f90d 	bl	80040b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003e9e:	f000 fa53 	bl	8004348 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003ea2:	f000 fadb 	bl	800445c <MX_TIM8_Init>
  MX_TIM2_Init();
 8003ea6:	f000 f959 	bl	800415c <MX_TIM2_Init>
  MX_TIM6_Init();
 8003eaa:	f000 faa1 	bl	80043f0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8003eae:	f000 f9d5 	bl	800425c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  printf("Welcome to WMMC !\n");
 8003eb2:	483b      	ldr	r0, [pc, #236]	; (8003fa0 <main+0x11c>)
 8003eb4:	f001 f816 	bl	8004ee4 <puts>

  int val = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]

  setbuf(stdout, NULL);
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <main+0x120>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f815 	bl	8004ef4 <setbuf>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8003eca:	213c      	movs	r1, #60	; 0x3c
 8003ecc:	4836      	ldr	r0, [pc, #216]	; (8003fa8 <main+0x124>)
 8003ece:	f7fe fbbd 	bl	800264c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8003ed2:	213c      	movs	r1, #60	; 0x3c
 8003ed4:	4835      	ldr	r0, [pc, #212]	; (8003fac <main+0x128>)
 8003ed6:	f7fe fbb9 	bl	800264c <HAL_TIM_Encoder_Start>

  int pulse = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
/*  TIM_OC_InitTypeDef ConfigOC;
  ConfigOC.OCMode = TIM_OCMODE_PWM1;
  ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
*/
  HAL_TIM_Base_Start_IT(&htim6);
 8003ede:	4834      	ldr	r0, [pc, #208]	; (8003fb0 <main+0x12c>)
 8003ee0:	f7fe fa8b 	bl	80023fa <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int cnt_r2, cnt_l2, dist_r2, dist_l2, speed_r2, speed_l2;
	cnt_r2 = cnt_r * 10;
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <main+0x130>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef6:	ee17 3a90 	vmov	r3, s15
 8003efa:	617b      	str	r3, [r7, #20]
	cnt_l2 = cnt_l * 10;
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <main+0x134>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	613b      	str	r3, [r7, #16]
	dist_r2 = dist_r * 10;
 8003f14:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <main+0x138>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f26:	ee17 3a90 	vmov	r3, s15
 8003f2a:	60fb      	str	r3, [r7, #12]
	dist_l2 = dist_l * 10;
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <main+0x13c>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3e:	ee17 3a90 	vmov	r3, s15
 8003f42:	60bb      	str	r3, [r7, #8]
	speed_r2 = speed_r * 10;
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <main+0x140>)
 8003f46:	edd3 7a00 	vldr	s15, [r3]
 8003f4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f56:	ee17 3a90 	vmov	r3, s15
 8003f5a:	607b      	str	r3, [r7, #4]
	speed_l2 = speed_l * 10;
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <main+0x144>)
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6e:	ee17 3a90 	vmov	r3, s15
 8003f72:	603b      	str	r3, [r7, #0]
		cnt = 0;
	}
*/

//AD change interrupt check
if(cnt >= 101){
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <main+0x148>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b64      	cmp	r3, #100	; 0x64
 8003f7a:	ddb3      	ble.n	8003ee4 <main+0x60>
	printf("FR:%3d, R:%3d, FL:%3d, L:%3d\n", value1, value2, value3, value4);
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <main+0x14c>)
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <main+0x150>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <main+0x154>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <main+0x158>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4813      	ldr	r0, [pc, #76]	; (8003fe0 <main+0x15c>)
 8003f92:	f000 ff33 	bl	8004dfc <iprintf>
	cnt = 0;
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <main+0x148>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
  {
 8003f9c:	e7a2      	b.n	8003ee4 <main+0x60>
 8003f9e:	bf00      	nop
 8003fa0:	08005e20 	.word	0x08005e20
 8003fa4:	20000010 	.word	0x20000010
 8003fa8:	20000114 	.word	0x20000114
 8003fac:	200000d4 	.word	0x200000d4
 8003fb0:	20000228 	.word	0x20000228
 8003fb4:	20000090 	.word	0x20000090
 8003fb8:	2000009c 	.word	0x2000009c
 8003fbc:	20000094 	.word	0x20000094
 8003fc0:	200000a0 	.word	0x200000a0
 8003fc4:	20000098 	.word	0x20000098
 8003fc8:	200000a4 	.word	0x200000a4
 8003fcc:	200000ac 	.word	0x200000ac
 8003fd0:	200002b0 	.word	0x200002b0
 8003fd4:	20000268 	.word	0x20000268
 8003fd8:	200001e0 	.word	0x200001e0
 8003fdc:	200002ac 	.word	0x200002ac
 8003fe0:	08005e34 	.word	0x08005e34

08003fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b094      	sub	sp, #80	; 0x50
 8003fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fea:	f107 0320 	add.w	r3, r7, #32
 8003fee:	2230      	movs	r2, #48	; 0x30
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fefa 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <SystemClock_Config+0xcc>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <SystemClock_Config+0xcc>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	; 0x40
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <SystemClock_Config+0xcc>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <SystemClock_Config+0xd0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <SystemClock_Config+0xd0>)
 800402e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <SystemClock_Config+0xd0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004040:	2302      	movs	r3, #2
 8004042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004044:	2301      	movs	r3, #1
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004048:	2310      	movs	r3, #16
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800404c:	2302      	movs	r3, #2
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004050:	2300      	movs	r3, #0
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004054:	2308      	movs	r3, #8
 8004056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004058:	23a8      	movs	r3, #168	; 0xa8
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800405c:	2302      	movs	r3, #2
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004060:	2304      	movs	r3, #4
 8004062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004064:	f107 0320 	add.w	r3, r7, #32
 8004068:	4618      	mov	r0, r3
 800406a:	f7fd fd91 	bl	8001b90 <HAL_RCC_OscConfig>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004074:	f000 fb37 	bl	80046e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004078:	230f      	movs	r3, #15
 800407a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800407c:	2302      	movs	r3, #2
 800407e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800408a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800408e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	2105      	movs	r1, #5
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd ffbc 	bl	8002014 <HAL_RCC_ClockConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80040a2:	f000 fb20 	bl	80046e6 <Error_Handler>
  }
}
 80040a6:	bf00      	nop
 80040a8:	3750      	adds	r7, #80	; 0x50
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40007000 	.word	0x40007000

080040b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040be:	463b      	mov	r3, r7
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <MX_ADC1_Init+0x98>)
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <MX_ADC1_Init+0x9c>)
 80040ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <MX_ADC1_Init+0x98>)
 80040d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <MX_ADC1_Init+0x98>)
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <MX_ADC1_Init+0x98>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <MX_ADC1_Init+0x98>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <MX_ADC1_Init+0x98>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MX_ADC1_Init+0x98>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <MX_ADC1_Init+0x98>)
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <MX_ADC1_Init+0xa0>)
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <MX_ADC1_Init+0x98>)
 8004100:	2200      	movs	r2, #0
 8004102:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <MX_ADC1_Init+0x98>)
 8004106:	2201      	movs	r2, #1
 8004108:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <MX_ADC1_Init+0x98>)
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <MX_ADC1_Init+0x98>)
 8004114:	2201      	movs	r2, #1
 8004116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004118:	480d      	ldr	r0, [pc, #52]	; (8004150 <MX_ADC1_Init+0x98>)
 800411a:	f7fc feb9 	bl	8000e90 <HAL_ADC_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004124:	f000 fadf 	bl	80046e6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004128:	2300      	movs	r3, #0
 800412a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800412c:	2301      	movs	r3, #1
 800412e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004134:	463b      	mov	r3, r7
 8004136:	4619      	mov	r1, r3
 8004138:	4805      	ldr	r0, [pc, #20]	; (8004150 <MX_ADC1_Init+0x98>)
 800413a:	f7fd f845 	bl	80011c8 <HAL_ADC_ConfigChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004144:	f000 facf 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000198 	.word	0x20000198
 8004154:	40012000 	.word	0x40012000
 8004158:	0f000001 	.word	0x0f000001

0800415c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08e      	sub	sp, #56	; 0x38
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004170:	f107 0320 	add.w	r3, r7, #32
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <MX_TIM2_Init+0xfc>)
 800418e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <MX_TIM2_Init+0xfc>)
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <MX_TIM2_Init+0xfc>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041b4:	4828      	ldr	r0, [pc, #160]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041b6:	f7fe f8f5 	bl	80023a4 <HAL_TIM_Base_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80041c0:	f000 fa91 	bl	80046e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ce:	4619      	mov	r1, r3
 80041d0:	4821      	ldr	r0, [pc, #132]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041d2:	f7fe fc41 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80041dc:	f000 fa83 	bl	80046e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041e0:	481d      	ldr	r0, [pc, #116]	; (8004258 <MX_TIM2_Init+0xfc>)
 80041e2:	f7fe f92e 	bl	8002442 <HAL_TIM_PWM_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80041ec:	f000 fa7b 	bl	80046e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f8:	f107 0320 	add.w	r3, r7, #32
 80041fc:	4619      	mov	r1, r3
 80041fe:	4816      	ldr	r0, [pc, #88]	; (8004258 <MX_TIM2_Init+0xfc>)
 8004200:	f7ff f819 	bl	8003236 <HAL_TIMEx_MasterConfigSynchronization>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800420a:	f000 fa6c 	bl	80046e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800420e:	2360      	movs	r3, #96	; 0x60
 8004210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	480c      	ldr	r0, [pc, #48]	; (8004258 <MX_TIM2_Init+0xfc>)
 8004226:	f7fe fb51 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004230:	f000 fa59 	bl	80046e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	220c      	movs	r2, #12
 8004238:	4619      	mov	r1, r3
 800423a:	4807      	ldr	r0, [pc, #28]	; (8004258 <MX_TIM2_Init+0xfc>)
 800423c:	f7fe fb46 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004246:	f000 fa4e 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800424a:	4803      	ldr	r0, [pc, #12]	; (8004258 <MX_TIM2_Init+0xfc>)
 800424c:	f000 fb9e 	bl	800498c <HAL_TIM_MspPostInit>

}
 8004250:	bf00      	nop
 8004252:	3738      	adds	r7, #56	; 0x38
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	2000026c 	.word	0x2000026c

0800425c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004270:	f107 0320 	add.w	r3, r7, #32
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
 8004288:	615a      	str	r2, [r3, #20]
 800428a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <MX_TIM3_Init+0xe4>)
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <MX_TIM3_Init+0xe8>)
 8004290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <MX_TIM3_Init+0xe4>)
 8004294:	2253      	movs	r2, #83	; 0x53
 8004296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004298:	4b29      	ldr	r3, [pc, #164]	; (8004340 <MX_TIM3_Init+0xe4>)
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800429e:	4b28      	ldr	r3, [pc, #160]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a4:	4b26      	ldr	r3, [pc, #152]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042aa:	4b25      	ldr	r3, [pc, #148]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042b0:	4823      	ldr	r0, [pc, #140]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042b2:	f7fe f877 	bl	80023a4 <HAL_TIM_Base_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80042bc:	f000 fa13 	bl	80046e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ca:	4619      	mov	r1, r3
 80042cc:	481c      	ldr	r0, [pc, #112]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042ce:	f7fe fbc3 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80042d8:	f000 fa05 	bl	80046e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042dc:	4818      	ldr	r0, [pc, #96]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042de:	f7fe f8b0 	bl	8002442 <HAL_TIM_PWM_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80042e8:	f000 f9fd 	bl	80046e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042f4:	f107 0320 	add.w	r3, r7, #32
 80042f8:	4619      	mov	r1, r3
 80042fa:	4811      	ldr	r0, [pc, #68]	; (8004340 <MX_TIM3_Init+0xe4>)
 80042fc:	f7fe ff9b 	bl	8003236 <HAL_TIMEx_MasterConfigSynchronization>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004306:	f000 f9ee 	bl	80046e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800430a:	2360      	movs	r3, #96	; 0x60
 800430c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2204      	movs	r2, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4807      	ldr	r0, [pc, #28]	; (8004340 <MX_TIM3_Init+0xe4>)
 8004322:	f7fe fad3 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800432c:	f000 f9db 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <MX_TIM3_Init+0xe4>)
 8004332:	f000 fb2b 	bl	800498c <HAL_TIM_MspPostInit>

}
 8004336:	bf00      	nop
 8004338:	3738      	adds	r7, #56	; 0x38
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000158 	.word	0x20000158
 8004344:	40000400 	.word	0x40000400

08004348 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800434e:	f107 030c 	add.w	r3, r7, #12
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fd48 	bl	8004dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <MX_TIM4_Init+0xa0>)
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <MX_TIM4_Init+0xa4>)
 8004368:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <MX_TIM4_Init+0xa0>)
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <MX_TIM4_Init+0xa0>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <MX_TIM4_Init+0xa0>)
 8004378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <MX_TIM4_Init+0xa0>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <MX_TIM4_Init+0xa0>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800438a:	2303      	movs	r3, #3
 800438c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043a2:	2301      	movs	r3, #1
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043a6:	2300      	movs	r3, #0
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4619      	mov	r1, r3
 80043b4:	480c      	ldr	r0, [pc, #48]	; (80043e8 <MX_TIM4_Init+0xa0>)
 80043b6:	f7fe f8b7 	bl	8002528 <HAL_TIM_Encoder_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80043c0:	f000 f991 	bl	80046e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4805      	ldr	r0, [pc, #20]	; (80043e8 <MX_TIM4_Init+0xa0>)
 80043d2:	f7fe ff30 	bl	8003236 <HAL_TIMEx_MasterConfigSynchronization>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80043dc:	f000 f983 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043e0:	bf00      	nop
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000114 	.word	0x20000114
 80043ec:	40000800 	.word	0x40000800

080043f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f6:	463b      	mov	r3, r7
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <MX_TIM6_Init+0x64>)
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <MX_TIM6_Init+0x68>)
 8004402:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <MX_TIM6_Init+0x64>)
 8004406:	2253      	movs	r2, #83	; 0x53
 8004408:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_TIM6_Init+0x64>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_TIM6_Init+0x64>)
 8004412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004416:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_TIM6_Init+0x64>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800441e:	480d      	ldr	r0, [pc, #52]	; (8004454 <MX_TIM6_Init+0x64>)
 8004420:	f7fd ffc0 	bl	80023a4 <HAL_TIM_Base_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800442a:	f000 f95c 	bl	80046e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004436:	463b      	mov	r3, r7
 8004438:	4619      	mov	r1, r3
 800443a:	4806      	ldr	r0, [pc, #24]	; (8004454 <MX_TIM6_Init+0x64>)
 800443c:	f7fe fefb 	bl	8003236 <HAL_TIMEx_MasterConfigSynchronization>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004446:	f000 f94e 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000228 	.word	0x20000228
 8004458:	40001000 	.word	0x40001000

0800445c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004462:	f107 030c 	add.w	r3, r7, #12
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fcbe 	bl	8004dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004478:	4b22      	ldr	r3, [pc, #136]	; (8004504 <MX_TIM8_Init+0xa8>)
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <MX_TIM8_Init+0xac>)
 800447c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <MX_TIM8_Init+0xa8>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <MX_TIM8_Init+0xa8>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <MX_TIM8_Init+0xa8>)
 800448c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004490:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <MX_TIM8_Init+0xa8>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <MX_TIM8_Init+0xa8>)
 800449a:	2200      	movs	r2, #0
 800449c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <MX_TIM8_Init+0xa8>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80044a4:	2303      	movs	r3, #3
 80044a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044b8:	2300      	movs	r3, #0
 80044ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044bc:	2301      	movs	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4619      	mov	r1, r3
 80044ce:	480d      	ldr	r0, [pc, #52]	; (8004504 <MX_TIM8_Init+0xa8>)
 80044d0:	f7fe f82a 	bl	8002528 <HAL_TIM_Encoder_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80044da:	f000 f904 	bl	80046e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044e6:	1d3b      	adds	r3, r7, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4806      	ldr	r0, [pc, #24]	; (8004504 <MX_TIM8_Init+0xa8>)
 80044ec:	f7fe fea3 	bl	8003236 <HAL_TIMEx_MasterConfigSynchronization>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80044f6:	f000 f8f6 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200000d4 	.word	0x200000d4
 8004508:	40010400 	.word	0x40010400

0800450c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <MX_USART1_UART_Init+0x50>)
 8004514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800451c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004526:	2200      	movs	r2, #0
 8004528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004532:	220c      	movs	r2, #12
 8004534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 800453e:	2200      	movs	r2, #0
 8004540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <MX_USART1_UART_Init+0x4c>)
 8004544:	f7fe fed0 	bl	80032e8 <HAL_UART_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800454e:	f000 f8ca 	bl	80046e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200001e4 	.word	0x200001e4
 800455c:	40011000 	.word	0x40011000

08004560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b42      	ldr	r3, [pc, #264]	; (8004684 <MX_GPIO_Init+0x124>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4a41      	ldr	r2, [pc, #260]	; (8004684 <MX_GPIO_Init+0x124>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6313      	str	r3, [r2, #48]	; 0x30
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <MX_GPIO_Init+0x124>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <MX_GPIO_Init+0x124>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <MX_GPIO_Init+0x124>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6313      	str	r3, [r2, #48]	; 0x30
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <MX_GPIO_Init+0x124>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	4b34      	ldr	r3, [pc, #208]	; (8004684 <MX_GPIO_Init+0x124>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a33      	ldr	r2, [pc, #204]	; (8004684 <MX_GPIO_Init+0x124>)
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <MX_GPIO_Init+0x124>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80045ca:	2200      	movs	r2, #0
 80045cc:	f24e 213c 	movw	r1, #57916	; 0xe23c
 80045d0:	482d      	ldr	r0, [pc, #180]	; (8004688 <MX_GPIO_Init+0x128>)
 80045d2:	f7fd fac3 	bl	8001b5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80045d6:	2200      	movs	r2, #0
 80045d8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80045dc:	482b      	ldr	r0, [pc, #172]	; (800468c <MX_GPIO_Init+0x12c>)
 80045de:	f7fd fabd 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 80045e2:	2200      	movs	r2, #0
 80045e4:	f242 7103 	movw	r1, #9987	; 0x2703
 80045e8:	4829      	ldr	r0, [pc, #164]	; (8004690 <MX_GPIO_Init+0x130>)
 80045ea:	f7fd fab7 	bl	8001b5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80045ee:	f24e 233c 	movw	r3, #57916	; 0xe23c
 80045f2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045f4:	2301      	movs	r3, #1
 80045f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	4619      	mov	r1, r3
 8004606:	4820      	ldr	r0, [pc, #128]	; (8004688 <MX_GPIO_Init+0x128>)
 8004608:	f7fd f90e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800460c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8004610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004612:	2301      	movs	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461e:	f107 030c 	add.w	r3, r7, #12
 8004622:	4619      	mov	r1, r3
 8004624:	4819      	ldr	r0, [pc, #100]	; (800468c <MX_GPIO_Init+0x12c>)
 8004626:	f7fd f8ff 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800462a:	f242 7303 	movw	r3, #9987	; 0x2703
 800462e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004630:	2301      	movs	r3, #1
 8004632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	4619      	mov	r1, r3
 8004642:	4813      	ldr	r0, [pc, #76]	; (8004690 <MX_GPIO_Init+0x130>)
 8004644:	f7fd f8f0 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	4619      	mov	r1, r3
 800465c:	480c      	ldr	r0, [pc, #48]	; (8004690 <MX_GPIO_Init+0x130>)
 800465e:	f7fd f8e3 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4619      	mov	r1, r3
 8004676:	4805      	ldr	r0, [pc, #20]	; (800468c <MX_GPIO_Init+0x12c>)
 8004678:	f7fd f8d6 	bl	8001828 <HAL_GPIO_Init>

}
 800467c:	bf00      	nop
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40020800 	.word	0x40020800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400

08004694 <get_adc_value>:
// ?��?定されたチャンネルのアナログ電圧値を取り�??��?��?
// 引数1??��?��hadc …… 電圧値を取り�??��すチャンネルが属すADCのHandler
// 引数2??��?��channel …… 電圧値を取り�??��すチャンネル
// 戻り�??��??��?��電圧値??��?12bit?��?解能??��?
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
  //sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
  //sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fd80 	bl	80011c8 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    // AD変換を開始す?��?
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fc fc25 	bl	8000f18 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   // AD変換終�?まで?��?機す?��?
 80046ce:	2164      	movs	r1, #100	; 0x64
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fc fce7 	bl	80010a4 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          // AD変換結果を取得す?��?
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fd68 	bl	80011ac <HAL_ADC_GetValue>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_MspInit+0x4c>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <HAL_MspInit+0x4c>)
 8004704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004708:	6453      	str	r3, [r2, #68]	; 0x44
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_MspInit+0x4c>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_MspInit+0x4c>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <HAL_MspInit+0x4c>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_MspInit+0x4c>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_ADC_MspInit+0x7c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d127      	bne.n	80047b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6453      	str	r3, [r2, #68]	; 0x44
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <HAL_ADC_MspInit+0x80>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800479e:	230f      	movs	r3, #15
 80047a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a2:	2303      	movs	r3, #3
 80047a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	4619      	mov	r1, r3
 80047b0:	4805      	ldr	r0, [pc, #20]	; (80047c8 <HAL_ADC_MspInit+0x84>)
 80047b2:	f7fd f839 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40012000 	.word	0x40012000
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40020000 	.word	0x40020000

080047cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a23      	ldr	r2, [pc, #140]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80047fa:	e036      	b.n	800486a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <HAL_TIM_Base_MspInit+0xac>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d116      	bne.n	8004834 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6413      	str	r3, [r2, #64]	; 0x40
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	201d      	movs	r0, #29
 8004828:	f7fc ffc7 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800482c:	201d      	movs	r0, #29
 800482e:	f7fc ffe0 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 8004832:	e01a      	b.n	800486a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_TIM_Base_MspInit+0xb0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d115      	bne.n	800486a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 8004848:	f043 0310 	orr.w	r3, r3, #16
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_TIM_Base_MspInit+0xa8>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2100      	movs	r1, #0
 800485e:	2036      	movs	r0, #54	; 0x36
 8004860:	f7fc ffab 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004864:	2036      	movs	r0, #54	; 0x36
 8004866:	f7fc ffc4 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40000400 	.word	0x40000400
 800487c:	40001000 	.word	0x40001000

08004880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	; 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 031c 	add.w	r3, r7, #28
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a36      	ldr	r2, [pc, #216]	; (8004978 <HAL_TIM_Encoder_MspInit+0xf8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d134      	bne.n	800490c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a34      	ldr	r2, [pc, #208]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b32      	ldr	r3, [pc, #200]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	4b2e      	ldr	r3, [pc, #184]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a2d      	ldr	r2, [pc, #180]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048da:	23c0      	movs	r3, #192	; 0xc0
 80048dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048de:	2302      	movs	r3, #2
 80048e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048ea:	2302      	movs	r3, #2
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	f107 031c 	add.w	r3, r7, #28
 80048f2:	4619      	mov	r1, r3
 80048f4:	4822      	ldr	r0, [pc, #136]	; (8004980 <HAL_TIM_Encoder_MspInit+0x100>)
 80048f6:	f7fc ff97 	bl	8001828 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2100      	movs	r1, #0
 80048fe:	201e      	movs	r0, #30
 8004900:	f7fc ff5b 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004904:	201e      	movs	r0, #30
 8004906:	f7fc ff74 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800490a:	e030      	b.n	800496e <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_TIM_Encoder_MspInit+0x104>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d12b      	bne.n	800496e <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	6453      	str	r3, [r2, #68]	; 0x44
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800494e:	23c0      	movs	r3, #192	; 0xc0
 8004950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495a:	2300      	movs	r3, #0
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800495e:	2303      	movs	r3, #3
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004962:	f107 031c 	add.w	r3, r7, #28
 8004966:	4619      	mov	r1, r3
 8004968:	4807      	ldr	r0, [pc, #28]	; (8004988 <HAL_TIM_Encoder_MspInit+0x108>)
 800496a:	f7fc ff5d 	bl	8001828 <HAL_GPIO_Init>
}
 800496e:	bf00      	nop
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40000800 	.word	0x40000800
 800497c:	40023800 	.word	0x40023800
 8004980:	40020400 	.word	0x40020400
 8004984:	40010400 	.word	0x40010400
 8004988:	40020800 	.word	0x40020800

0800498c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d13d      	bne.n	8004a2a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6313      	str	r3, [r2, #48]	; 0x30
 80049be:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049e6:	2320      	movs	r3, #32
 80049e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049f6:	2301      	movs	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4619      	mov	r1, r3
 8004a00:	481e      	ldr	r0, [pc, #120]	; (8004a7c <HAL_TIM_MspPostInit+0xf0>)
 8004a02:	f7fc ff11 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a14:	2300      	movs	r3, #0
 8004a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4619      	mov	r1, r3
 8004a22:	4817      	ldr	r0, [pc, #92]	; (8004a80 <HAL_TIM_MspPostInit+0xf4>)
 8004a24:	f7fc ff00 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004a28:	e022      	b.n	8004a70 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <HAL_TIM_MspPostInit+0xf8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d11d      	bne.n	8004a70 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	4a0e      	ldr	r2, [pc, #56]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 8004a3e:	f043 0302 	orr.w	r3, r3, #2
 8004a42:	6313      	str	r3, [r2, #48]	; 0x30
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_TIM_MspPostInit+0xec>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a50:	2320      	movs	r3, #32
 8004a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a60:	2302      	movs	r3, #2
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <HAL_TIM_MspPostInit+0xf4>)
 8004a6c:	f7fc fedc 	bl	8001828 <HAL_GPIO_Init>
}
 8004a70:	bf00      	nop
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40020000 	.word	0x40020000
 8004a80:	40020400 	.word	0x40020400
 8004a84:	40000400 	.word	0x40000400

08004a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <HAL_UART_MspInit+0x84>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d12c      	bne.n	8004b04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004ab4:	f043 0310 	orr.w	r3, r3, #16
 8004ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_UART_MspInit+0x88>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2303      	movs	r3, #3
 8004af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004af4:	2307      	movs	r3, #7
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4619      	mov	r1, r3
 8004afe:	4805      	ldr	r0, [pc, #20]	; (8004b14 <HAL_UART_MspInit+0x8c>)
 8004b00:	f7fc fe92 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b04:	bf00      	nop
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40020000 	.word	0x40020000

08004b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b26:	b480      	push	{r7}
 8004b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b2a:	e7fe      	b.n	8004b2a <HardFault_Handler+0x4>

08004b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b30:	e7fe      	b.n	8004b30 <MemManage_Handler+0x4>

08004b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b36:	e7fe      	b.n	8004b36 <BusFault_Handler+0x4>

08004b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b3c:	e7fe      	b.n	8004b3c <UsageFault_Handler+0x4>

08004b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b6c:	f7fc f970 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b70:	bf00      	nop
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <TIM6_DAC_IRQHandler+0x10>)
 8004b96:	f7fd fd90 	bl	80026ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000228 	.word	0x20000228

08004ba4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e00a      	b.n	8004bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bb6:	f3af 8000 	nop.w
 8004bba:	4601      	mov	r1, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	60ba      	str	r2, [r7, #8]
 8004bc2:	b2ca      	uxtb	r2, r1
 8004bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	dbf0      	blt.n	8004bb6 <_read+0x12>
	}

return len;
 8004bd4:	687b      	ldr	r3, [r7, #4]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e009      	b.n	8004c04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	60ba      	str	r2, [r7, #8]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe feaf 	bl	800395c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3301      	adds	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dbf1      	blt.n	8004bf0 <_write+0x12>
	}
	return len;
 8004c0c:	687b      	ldr	r3, [r7, #4]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_close>:

int _close(int file)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <_isatty>:

int _isatty(int file)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
	return 1;
 8004c56:	2301      	movs	r3, #1
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c88:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <_sbrk+0x50>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <_sbrk+0x16>
		heap_end = &end;
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <_sbrk+0x50>)
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <_sbrk+0x54>)
 8004c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <_sbrk+0x50>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <_sbrk+0x50>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	466a      	mov	r2, sp
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d907      	bls.n	8004cba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004caa:	f000 f875 	bl	8004d98 <__errno>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e006      	b.n	8004cc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <_sbrk+0x50>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <_sbrk+0x50>)
 8004cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200000c0 	.word	0x200000c0
 8004cd4:	200002b8 	.word	0x200002b8

08004cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <SystemInit+0x60>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <SystemInit+0x60>)
 8004ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <SystemInit+0x64>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <SystemInit+0x64>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <SystemInit+0x64>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <SystemInit+0x64>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <SystemInit+0x64>)
 8004d04:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <SystemInit+0x64>)
 8004d10:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <SystemInit+0x68>)
 8004d12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <SystemInit+0x64>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <SystemInit+0x64>)
 8004d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SystemInit+0x64>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <SystemInit+0x60>)
 8004d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d2c:	609a      	str	r2, [r3, #8]
#endif
}
 8004d2e:	bf00      	nop
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000ed00 	.word	0xe000ed00
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	24003010 	.word	0x24003010

08004d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d4a:	e003      	b.n	8004d54 <LoopCopyDataInit>

08004d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d52:	3104      	adds	r1, #4

08004d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d54:	480b      	ldr	r0, [pc, #44]	; (8004d84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d5c:	d3f6      	bcc.n	8004d4c <CopyDataInit>
  ldr  r2, =_sbss
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d60:	e002      	b.n	8004d68 <LoopFillZerobss>

08004d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d64:	f842 3b04 	str.w	r3, [r2], #4

08004d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d6c:	d3f9      	bcc.n	8004d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d6e:	f7ff ffb3 	bl	8004cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d72:	f000 f817 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d76:	f7ff f885 	bl	8003e84 <main>
  bx  lr    
 8004d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d7c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8004d80:	08005f14 	.word	0x08005f14
  ldr  r0, =_sdata
 8004d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d88:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004d8c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004d90:	200002b8 	.word	0x200002b8

08004d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d94:	e7fe      	b.n	8004d94 <ADC_IRQHandler>
	...

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	; (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000010 	.word	0x20000010

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4e0d      	ldr	r6, [pc, #52]	; (8004ddc <__libc_init_array+0x38>)
 8004da8:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004daa:	1ba4      	subs	r4, r4, r6
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	2500      	movs	r5, #0
 8004db0:	42a5      	cmp	r5, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	4e0b      	ldr	r6, [pc, #44]	; (8004de4 <__libc_init_array+0x40>)
 8004db6:	4c0c      	ldr	r4, [pc, #48]	; (8004de8 <__libc_init_array+0x44>)
 8004db8:	f001 f826 	bl	8005e08 <_init>
 8004dbc:	1ba4      	subs	r4, r4, r6
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	42a5      	cmp	r5, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dcc:	4798      	blx	r3
 8004dce:	3501      	adds	r5, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd6:	4798      	blx	r3
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08005f0c 	.word	0x08005f0c
 8004de0:	08005f0c 	.word	0x08005f0c
 8004de4:	08005f0c 	.word	0x08005f0c
 8004de8:	08005f10 	.word	0x08005f10

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <iprintf>:
 8004dfc:	b40f      	push	{r0, r1, r2, r3}
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <iprintf+0x2c>)
 8004e00:	b513      	push	{r0, r1, r4, lr}
 8004e02:	681c      	ldr	r4, [r3, #0]
 8004e04:	b124      	cbz	r4, 8004e10 <iprintf+0x14>
 8004e06:	69a3      	ldr	r3, [r4, #24]
 8004e08:	b913      	cbnz	r3, 8004e10 <iprintf+0x14>
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f000 fad8 	bl	80053c0 <__sinit>
 8004e10:	ab05      	add	r3, sp, #20
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	68a1      	ldr	r1, [r4, #8]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 fc99 	bl	8005750 <_vfiprintf_r>
 8004e1e:	b002      	add	sp, #8
 8004e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e24:	b004      	add	sp, #16
 8004e26:	4770      	bx	lr
 8004e28:	20000010 	.word	0x20000010

08004e2c <_puts_r>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	460e      	mov	r6, r1
 8004e30:	4605      	mov	r5, r0
 8004e32:	b118      	cbz	r0, 8004e3c <_puts_r+0x10>
 8004e34:	6983      	ldr	r3, [r0, #24]
 8004e36:	b90b      	cbnz	r3, 8004e3c <_puts_r+0x10>
 8004e38:	f000 fac2 	bl	80053c0 <__sinit>
 8004e3c:	69ab      	ldr	r3, [r5, #24]
 8004e3e:	68ac      	ldr	r4, [r5, #8]
 8004e40:	b913      	cbnz	r3, 8004e48 <_puts_r+0x1c>
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 fabc 	bl	80053c0 <__sinit>
 8004e48:	4b23      	ldr	r3, [pc, #140]	; (8004ed8 <_puts_r+0xac>)
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	d117      	bne.n	8004e7e <_puts_r+0x52>
 8004e4e:	686c      	ldr	r4, [r5, #4]
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	071b      	lsls	r3, r3, #28
 8004e54:	d51d      	bpl.n	8004e92 <_puts_r+0x66>
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	b1db      	cbz	r3, 8004e92 <_puts_r+0x66>
 8004e5a:	3e01      	subs	r6, #1
 8004e5c:	68a3      	ldr	r3, [r4, #8]
 8004e5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	b9e9      	cbnz	r1, 8004ea4 <_puts_r+0x78>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da2e      	bge.n	8004eca <_puts_r+0x9e>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	210a      	movs	r1, #10
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f8f5 	bl	8005060 <__swbuf_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d011      	beq.n	8004e9e <_puts_r+0x72>
 8004e7a:	200a      	movs	r0, #10
 8004e7c:	e011      	b.n	8004ea2 <_puts_r+0x76>
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <_puts_r+0xb0>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d101      	bne.n	8004e88 <_puts_r+0x5c>
 8004e84:	68ac      	ldr	r4, [r5, #8]
 8004e86:	e7e3      	b.n	8004e50 <_puts_r+0x24>
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <_puts_r+0xb4>)
 8004e8a:	429c      	cmp	r4, r3
 8004e8c:	bf08      	it	eq
 8004e8e:	68ec      	ldreq	r4, [r5, #12]
 8004e90:	e7de      	b.n	8004e50 <_puts_r+0x24>
 8004e92:	4621      	mov	r1, r4
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f935 	bl	8005104 <__swsetup_r>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0dd      	beq.n	8004e5a <_puts_r+0x2e>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da04      	bge.n	8004eb2 <_puts_r+0x86>
 8004ea8:	69a2      	ldr	r2, [r4, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	dc06      	bgt.n	8004ebc <_puts_r+0x90>
 8004eae:	290a      	cmp	r1, #10
 8004eb0:	d004      	beq.n	8004ebc <_puts_r+0x90>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	7019      	strb	r1, [r3, #0]
 8004eba:	e7cf      	b.n	8004e5c <_puts_r+0x30>
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 f8ce 	bl	8005060 <__swbuf_r>
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d1c9      	bne.n	8004e5c <_puts_r+0x30>
 8004ec8:	e7e9      	b.n	8004e9e <_puts_r+0x72>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	200a      	movs	r0, #10
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	6022      	str	r2, [r4, #0]
 8004ed2:	7018      	strb	r0, [r3, #0]
 8004ed4:	e7e5      	b.n	8004ea2 <_puts_r+0x76>
 8004ed6:	bf00      	nop
 8004ed8:	08005e90 	.word	0x08005e90
 8004edc:	08005eb0 	.word	0x08005eb0
 8004ee0:	08005e70 	.word	0x08005e70

08004ee4 <puts>:
 8004ee4:	4b02      	ldr	r3, [pc, #8]	; (8004ef0 <puts+0xc>)
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	f7ff bf9f 	b.w	8004e2c <_puts_r>
 8004eee:	bf00      	nop
 8004ef0:	20000010 	.word	0x20000010

08004ef4 <setbuf>:
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efa:	bf0c      	ite	eq
 8004efc:	2202      	moveq	r2, #2
 8004efe:	2200      	movne	r2, #0
 8004f00:	f000 b800 	b.w	8004f04 <setvbuf>

08004f04 <setvbuf>:
 8004f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	461d      	mov	r5, r3
 8004f0a:	4b51      	ldr	r3, [pc, #324]	; (8005050 <setvbuf+0x14c>)
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460f      	mov	r7, r1
 8004f12:	4690      	mov	r8, r2
 8004f14:	b126      	cbz	r6, 8004f20 <setvbuf+0x1c>
 8004f16:	69b3      	ldr	r3, [r6, #24]
 8004f18:	b913      	cbnz	r3, 8004f20 <setvbuf+0x1c>
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f000 fa50 	bl	80053c0 <__sinit>
 8004f20:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <setvbuf+0x150>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d152      	bne.n	8004fcc <setvbuf+0xc8>
 8004f26:	6874      	ldr	r4, [r6, #4]
 8004f28:	f1b8 0f02 	cmp.w	r8, #2
 8004f2c:	d006      	beq.n	8004f3c <setvbuf+0x38>
 8004f2e:	f1b8 0f01 	cmp.w	r8, #1
 8004f32:	f200 8089 	bhi.w	8005048 <setvbuf+0x144>
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	f2c0 8086 	blt.w	8005048 <setvbuf+0x144>
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f9d4 	bl	80052ec <_fflush_r>
 8004f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f46:	b141      	cbz	r1, 8004f5a <setvbuf+0x56>
 8004f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	d002      	beq.n	8004f56 <setvbuf+0x52>
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 fb2b 	bl	80055ac <_free_r>
 8004f56:	2300      	movs	r3, #0
 8004f58:	6363      	str	r3, [r4, #52]	; 0x34
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61a3      	str	r3, [r4, #24]
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	061b      	lsls	r3, r3, #24
 8004f64:	d503      	bpl.n	8004f6e <setvbuf+0x6a>
 8004f66:	6921      	ldr	r1, [r4, #16]
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 fb1f 	bl	80055ac <_free_r>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004f74:	f023 0303 	bic.w	r3, r3, #3
 8004f78:	f1b8 0f02 	cmp.w	r8, #2
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	d05d      	beq.n	800503c <setvbuf+0x138>
 8004f80:	ab01      	add	r3, sp, #4
 8004f82:	466a      	mov	r2, sp
 8004f84:	4621      	mov	r1, r4
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 faa4 	bl	80054d4 <__swhatbuf_r>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	4318      	orrs	r0, r3
 8004f90:	81a0      	strh	r0, [r4, #12]
 8004f92:	bb2d      	cbnz	r5, 8004fe0 <setvbuf+0xdc>
 8004f94:	9d00      	ldr	r5, [sp, #0]
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 fb00 	bl	800559c <malloc>
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d14e      	bne.n	8005040 <setvbuf+0x13c>
 8004fa2:	f8dd 9000 	ldr.w	r9, [sp]
 8004fa6:	45a9      	cmp	r9, r5
 8004fa8:	d13c      	bne.n	8005024 <setvbuf+0x120>
 8004faa:	f04f 30ff 	mov.w	r0, #4294967295
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60a3      	str	r3, [r4, #8]
 8004fba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	6163      	str	r3, [r4, #20]
 8004fc6:	b003      	add	sp, #12
 8004fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <setvbuf+0x154>)
 8004fce:	429c      	cmp	r4, r3
 8004fd0:	d101      	bne.n	8004fd6 <setvbuf+0xd2>
 8004fd2:	68b4      	ldr	r4, [r6, #8]
 8004fd4:	e7a8      	b.n	8004f28 <setvbuf+0x24>
 8004fd6:	4b21      	ldr	r3, [pc, #132]	; (800505c <setvbuf+0x158>)
 8004fd8:	429c      	cmp	r4, r3
 8004fda:	bf08      	it	eq
 8004fdc:	68f4      	ldreq	r4, [r6, #12]
 8004fde:	e7a3      	b.n	8004f28 <setvbuf+0x24>
 8004fe0:	2f00      	cmp	r7, #0
 8004fe2:	d0d8      	beq.n	8004f96 <setvbuf+0x92>
 8004fe4:	69b3      	ldr	r3, [r6, #24]
 8004fe6:	b913      	cbnz	r3, 8004fee <setvbuf+0xea>
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 f9e9 	bl	80053c0 <__sinit>
 8004fee:	f1b8 0f01 	cmp.w	r8, #1
 8004ff2:	bf08      	it	eq
 8004ff4:	89a3      	ldrheq	r3, [r4, #12]
 8004ff6:	6027      	str	r7, [r4, #0]
 8004ff8:	bf04      	itt	eq
 8004ffa:	f043 0301 	orreq.w	r3, r3, #1
 8004ffe:	81a3      	strheq	r3, [r4, #12]
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f013 0008 	ands.w	r0, r3, #8
 8005006:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800500a:	d01b      	beq.n	8005044 <setvbuf+0x140>
 800500c:	f013 0001 	ands.w	r0, r3, #1
 8005010:	bf18      	it	ne
 8005012:	426d      	negne	r5, r5
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	bf1d      	ittte	ne
 800501a:	60a3      	strne	r3, [r4, #8]
 800501c:	61a5      	strne	r5, [r4, #24]
 800501e:	4618      	movne	r0, r3
 8005020:	60a5      	streq	r5, [r4, #8]
 8005022:	e7d0      	b.n	8004fc6 <setvbuf+0xc2>
 8005024:	4648      	mov	r0, r9
 8005026:	f000 fab9 	bl	800559c <malloc>
 800502a:	4607      	mov	r7, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d0bc      	beq.n	8004faa <setvbuf+0xa6>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	464d      	mov	r5, r9
 800503a:	e7d3      	b.n	8004fe4 <setvbuf+0xe0>
 800503c:	2000      	movs	r0, #0
 800503e:	e7b6      	b.n	8004fae <setvbuf+0xaa>
 8005040:	46a9      	mov	r9, r5
 8005042:	e7f5      	b.n	8005030 <setvbuf+0x12c>
 8005044:	60a0      	str	r0, [r4, #8]
 8005046:	e7be      	b.n	8004fc6 <setvbuf+0xc2>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	e7bb      	b.n	8004fc6 <setvbuf+0xc2>
 800504e:	bf00      	nop
 8005050:	20000010 	.word	0x20000010
 8005054:	08005e90 	.word	0x08005e90
 8005058:	08005eb0 	.word	0x08005eb0
 800505c:	08005e70 	.word	0x08005e70

08005060 <__swbuf_r>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	460e      	mov	r6, r1
 8005064:	4614      	mov	r4, r2
 8005066:	4605      	mov	r5, r0
 8005068:	b118      	cbz	r0, 8005072 <__swbuf_r+0x12>
 800506a:	6983      	ldr	r3, [r0, #24]
 800506c:	b90b      	cbnz	r3, 8005072 <__swbuf_r+0x12>
 800506e:	f000 f9a7 	bl	80053c0 <__sinit>
 8005072:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <__swbuf_r+0x98>)
 8005074:	429c      	cmp	r4, r3
 8005076:	d12a      	bne.n	80050ce <__swbuf_r+0x6e>
 8005078:	686c      	ldr	r4, [r5, #4]
 800507a:	69a3      	ldr	r3, [r4, #24]
 800507c:	60a3      	str	r3, [r4, #8]
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	071a      	lsls	r2, r3, #28
 8005082:	d52e      	bpl.n	80050e2 <__swbuf_r+0x82>
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	b363      	cbz	r3, 80050e2 <__swbuf_r+0x82>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	1ac0      	subs	r0, r0, r3
 800508e:	6963      	ldr	r3, [r4, #20]
 8005090:	b2f6      	uxtb	r6, r6
 8005092:	4283      	cmp	r3, r0
 8005094:	4637      	mov	r7, r6
 8005096:	dc04      	bgt.n	80050a2 <__swbuf_r+0x42>
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f926 	bl	80052ec <_fflush_r>
 80050a0:	bb28      	cbnz	r0, 80050ee <__swbuf_r+0x8e>
 80050a2:	68a3      	ldr	r3, [r4, #8]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	60a3      	str	r3, [r4, #8]
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	6022      	str	r2, [r4, #0]
 80050ae:	701e      	strb	r6, [r3, #0]
 80050b0:	6963      	ldr	r3, [r4, #20]
 80050b2:	3001      	adds	r0, #1
 80050b4:	4283      	cmp	r3, r0
 80050b6:	d004      	beq.n	80050c2 <__swbuf_r+0x62>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	07db      	lsls	r3, r3, #31
 80050bc:	d519      	bpl.n	80050f2 <__swbuf_r+0x92>
 80050be:	2e0a      	cmp	r6, #10
 80050c0:	d117      	bne.n	80050f2 <__swbuf_r+0x92>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f911 	bl	80052ec <_fflush_r>
 80050ca:	b190      	cbz	r0, 80050f2 <__swbuf_r+0x92>
 80050cc:	e00f      	b.n	80050ee <__swbuf_r+0x8e>
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <__swbuf_r+0x9c>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	d101      	bne.n	80050d8 <__swbuf_r+0x78>
 80050d4:	68ac      	ldr	r4, [r5, #8]
 80050d6:	e7d0      	b.n	800507a <__swbuf_r+0x1a>
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <__swbuf_r+0xa0>)
 80050da:	429c      	cmp	r4, r3
 80050dc:	bf08      	it	eq
 80050de:	68ec      	ldreq	r4, [r5, #12]
 80050e0:	e7cb      	b.n	800507a <__swbuf_r+0x1a>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f80d 	bl	8005104 <__swsetup_r>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0cc      	beq.n	8005088 <__swbuf_r+0x28>
 80050ee:	f04f 37ff 	mov.w	r7, #4294967295
 80050f2:	4638      	mov	r0, r7
 80050f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f6:	bf00      	nop
 80050f8:	08005e90 	.word	0x08005e90
 80050fc:	08005eb0 	.word	0x08005eb0
 8005100:	08005e70 	.word	0x08005e70

08005104 <__swsetup_r>:
 8005104:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <__swsetup_r+0xcc>)
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	681d      	ldr	r5, [r3, #0]
 800510a:	4606      	mov	r6, r0
 800510c:	460c      	mov	r4, r1
 800510e:	b125      	cbz	r5, 800511a <__swsetup_r+0x16>
 8005110:	69ab      	ldr	r3, [r5, #24]
 8005112:	b913      	cbnz	r3, 800511a <__swsetup_r+0x16>
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f953 	bl	80053c0 <__sinit>
 800511a:	4b2e      	ldr	r3, [pc, #184]	; (80051d4 <__swsetup_r+0xd0>)
 800511c:	429c      	cmp	r4, r3
 800511e:	d10f      	bne.n	8005140 <__swsetup_r+0x3c>
 8005120:	686c      	ldr	r4, [r5, #4]
 8005122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005126:	b29a      	uxth	r2, r3
 8005128:	0715      	lsls	r5, r2, #28
 800512a:	d42c      	bmi.n	8005186 <__swsetup_r+0x82>
 800512c:	06d0      	lsls	r0, r2, #27
 800512e:	d411      	bmi.n	8005154 <__swsetup_r+0x50>
 8005130:	2209      	movs	r2, #9
 8005132:	6032      	str	r2, [r6, #0]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	f04f 30ff 	mov.w	r0, #4294967295
 800513e:	e03e      	b.n	80051be <__swsetup_r+0xba>
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <__swsetup_r+0xd4>)
 8005142:	429c      	cmp	r4, r3
 8005144:	d101      	bne.n	800514a <__swsetup_r+0x46>
 8005146:	68ac      	ldr	r4, [r5, #8]
 8005148:	e7eb      	b.n	8005122 <__swsetup_r+0x1e>
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <__swsetup_r+0xd8>)
 800514c:	429c      	cmp	r4, r3
 800514e:	bf08      	it	eq
 8005150:	68ec      	ldreq	r4, [r5, #12]
 8005152:	e7e6      	b.n	8005122 <__swsetup_r+0x1e>
 8005154:	0751      	lsls	r1, r2, #29
 8005156:	d512      	bpl.n	800517e <__swsetup_r+0x7a>
 8005158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800515a:	b141      	cbz	r1, 800516e <__swsetup_r+0x6a>
 800515c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005160:	4299      	cmp	r1, r3
 8005162:	d002      	beq.n	800516a <__swsetup_r+0x66>
 8005164:	4630      	mov	r0, r6
 8005166:	f000 fa21 	bl	80055ac <_free_r>
 800516a:	2300      	movs	r3, #0
 800516c:	6363      	str	r3, [r4, #52]	; 0x34
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	2300      	movs	r3, #0
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	b94b      	cbnz	r3, 800519e <__swsetup_r+0x9a>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005194:	d003      	beq.n	800519e <__swsetup_r+0x9a>
 8005196:	4621      	mov	r1, r4
 8005198:	4630      	mov	r0, r6
 800519a:	f000 f9bf 	bl	800551c <__smakebuf_r>
 800519e:	89a2      	ldrh	r2, [r4, #12]
 80051a0:	f012 0301 	ands.w	r3, r2, #1
 80051a4:	d00c      	beq.n	80051c0 <__swsetup_r+0xbc>
 80051a6:	2300      	movs	r3, #0
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	6963      	ldr	r3, [r4, #20]
 80051ac:	425b      	negs	r3, r3
 80051ae:	61a3      	str	r3, [r4, #24]
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	b953      	cbnz	r3, 80051ca <__swsetup_r+0xc6>
 80051b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80051bc:	d1ba      	bne.n	8005134 <__swsetup_r+0x30>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	0792      	lsls	r2, r2, #30
 80051c2:	bf58      	it	pl
 80051c4:	6963      	ldrpl	r3, [r4, #20]
 80051c6:	60a3      	str	r3, [r4, #8]
 80051c8:	e7f2      	b.n	80051b0 <__swsetup_r+0xac>
 80051ca:	2000      	movs	r0, #0
 80051cc:	e7f7      	b.n	80051be <__swsetup_r+0xba>
 80051ce:	bf00      	nop
 80051d0:	20000010 	.word	0x20000010
 80051d4:	08005e90 	.word	0x08005e90
 80051d8:	08005eb0 	.word	0x08005eb0
 80051dc:	08005e70 	.word	0x08005e70

080051e0 <__sflush_r>:
 80051e0:	898a      	ldrh	r2, [r1, #12]
 80051e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e6:	4605      	mov	r5, r0
 80051e8:	0710      	lsls	r0, r2, #28
 80051ea:	460c      	mov	r4, r1
 80051ec:	d458      	bmi.n	80052a0 <__sflush_r+0xc0>
 80051ee:	684b      	ldr	r3, [r1, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dc05      	bgt.n	8005200 <__sflush_r+0x20>
 80051f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dc02      	bgt.n	8005200 <__sflush_r+0x20>
 80051fa:	2000      	movs	r0, #0
 80051fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005202:	2e00      	cmp	r6, #0
 8005204:	d0f9      	beq.n	80051fa <__sflush_r+0x1a>
 8005206:	2300      	movs	r3, #0
 8005208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800520c:	682f      	ldr	r7, [r5, #0]
 800520e:	6a21      	ldr	r1, [r4, #32]
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	d032      	beq.n	800527a <__sflush_r+0x9a>
 8005214:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	075a      	lsls	r2, r3, #29
 800521a:	d505      	bpl.n	8005228 <__sflush_r+0x48>
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	1ac0      	subs	r0, r0, r3
 8005220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005222:	b10b      	cbz	r3, 8005228 <__sflush_r+0x48>
 8005224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	2300      	movs	r3, #0
 800522a:	4602      	mov	r2, r0
 800522c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800522e:	6a21      	ldr	r1, [r4, #32]
 8005230:	4628      	mov	r0, r5
 8005232:	47b0      	blx	r6
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	d106      	bne.n	8005248 <__sflush_r+0x68>
 800523a:	6829      	ldr	r1, [r5, #0]
 800523c:	291d      	cmp	r1, #29
 800523e:	d848      	bhi.n	80052d2 <__sflush_r+0xf2>
 8005240:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <__sflush_r+0x108>)
 8005242:	40ca      	lsrs	r2, r1
 8005244:	07d6      	lsls	r6, r2, #31
 8005246:	d544      	bpl.n	80052d2 <__sflush_r+0xf2>
 8005248:	2200      	movs	r2, #0
 800524a:	6062      	str	r2, [r4, #4]
 800524c:	04d9      	lsls	r1, r3, #19
 800524e:	6922      	ldr	r2, [r4, #16]
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	d504      	bpl.n	800525e <__sflush_r+0x7e>
 8005254:	1c42      	adds	r2, r0, #1
 8005256:	d101      	bne.n	800525c <__sflush_r+0x7c>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b903      	cbnz	r3, 800525e <__sflush_r+0x7e>
 800525c:	6560      	str	r0, [r4, #84]	; 0x54
 800525e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005260:	602f      	str	r7, [r5, #0]
 8005262:	2900      	cmp	r1, #0
 8005264:	d0c9      	beq.n	80051fa <__sflush_r+0x1a>
 8005266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800526a:	4299      	cmp	r1, r3
 800526c:	d002      	beq.n	8005274 <__sflush_r+0x94>
 800526e:	4628      	mov	r0, r5
 8005270:	f000 f99c 	bl	80055ac <_free_r>
 8005274:	2000      	movs	r0, #0
 8005276:	6360      	str	r0, [r4, #52]	; 0x34
 8005278:	e7c0      	b.n	80051fc <__sflush_r+0x1c>
 800527a:	2301      	movs	r3, #1
 800527c:	4628      	mov	r0, r5
 800527e:	47b0      	blx	r6
 8005280:	1c41      	adds	r1, r0, #1
 8005282:	d1c8      	bne.n	8005216 <__sflush_r+0x36>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0c5      	beq.n	8005216 <__sflush_r+0x36>
 800528a:	2b1d      	cmp	r3, #29
 800528c:	d001      	beq.n	8005292 <__sflush_r+0xb2>
 800528e:	2b16      	cmp	r3, #22
 8005290:	d101      	bne.n	8005296 <__sflush_r+0xb6>
 8005292:	602f      	str	r7, [r5, #0]
 8005294:	e7b1      	b.n	80051fa <__sflush_r+0x1a>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	e7ad      	b.n	80051fc <__sflush_r+0x1c>
 80052a0:	690f      	ldr	r7, [r1, #16]
 80052a2:	2f00      	cmp	r7, #0
 80052a4:	d0a9      	beq.n	80051fa <__sflush_r+0x1a>
 80052a6:	0793      	lsls	r3, r2, #30
 80052a8:	680e      	ldr	r6, [r1, #0]
 80052aa:	bf08      	it	eq
 80052ac:	694b      	ldreq	r3, [r1, #20]
 80052ae:	600f      	str	r7, [r1, #0]
 80052b0:	bf18      	it	ne
 80052b2:	2300      	movne	r3, #0
 80052b4:	eba6 0807 	sub.w	r8, r6, r7
 80052b8:	608b      	str	r3, [r1, #8]
 80052ba:	f1b8 0f00 	cmp.w	r8, #0
 80052be:	dd9c      	ble.n	80051fa <__sflush_r+0x1a>
 80052c0:	4643      	mov	r3, r8
 80052c2:	463a      	mov	r2, r7
 80052c4:	6a21      	ldr	r1, [r4, #32]
 80052c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b0      	blx	r6
 80052cc:	2800      	cmp	r0, #0
 80052ce:	dc06      	bgt.n	80052de <__sflush_r+0xfe>
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e78e      	b.n	80051fc <__sflush_r+0x1c>
 80052de:	4407      	add	r7, r0
 80052e0:	eba8 0800 	sub.w	r8, r8, r0
 80052e4:	e7e9      	b.n	80052ba <__sflush_r+0xda>
 80052e6:	bf00      	nop
 80052e8:	20400001 	.word	0x20400001

080052ec <_fflush_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	b1db      	cbz	r3, 800532e <_fflush_r+0x42>
 80052f6:	b118      	cbz	r0, 8005300 <_fflush_r+0x14>
 80052f8:	6983      	ldr	r3, [r0, #24]
 80052fa:	b90b      	cbnz	r3, 8005300 <_fflush_r+0x14>
 80052fc:	f000 f860 	bl	80053c0 <__sinit>
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <_fflush_r+0x48>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d109      	bne.n	800531a <_fflush_r+0x2e>
 8005306:	686c      	ldr	r4, [r5, #4]
 8005308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530c:	b17b      	cbz	r3, 800532e <_fflush_r+0x42>
 800530e:	4621      	mov	r1, r4
 8005310:	4628      	mov	r0, r5
 8005312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005316:	f7ff bf63 	b.w	80051e0 <__sflush_r>
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <_fflush_r+0x4c>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d101      	bne.n	8005324 <_fflush_r+0x38>
 8005320:	68ac      	ldr	r4, [r5, #8]
 8005322:	e7f1      	b.n	8005308 <_fflush_r+0x1c>
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <_fflush_r+0x50>)
 8005326:	429c      	cmp	r4, r3
 8005328:	bf08      	it	eq
 800532a:	68ec      	ldreq	r4, [r5, #12]
 800532c:	e7ec      	b.n	8005308 <_fflush_r+0x1c>
 800532e:	2000      	movs	r0, #0
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	08005e90 	.word	0x08005e90
 8005338:	08005eb0 	.word	0x08005eb0
 800533c:	08005e70 	.word	0x08005e70

08005340 <std>:
 8005340:	2300      	movs	r3, #0
 8005342:	b510      	push	{r4, lr}
 8005344:	4604      	mov	r4, r0
 8005346:	e9c0 3300 	strd	r3, r3, [r0]
 800534a:	6083      	str	r3, [r0, #8]
 800534c:	8181      	strh	r1, [r0, #12]
 800534e:	6643      	str	r3, [r0, #100]	; 0x64
 8005350:	81c2      	strh	r2, [r0, #14]
 8005352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005356:	6183      	str	r3, [r0, #24]
 8005358:	4619      	mov	r1, r3
 800535a:	2208      	movs	r2, #8
 800535c:	305c      	adds	r0, #92	; 0x5c
 800535e:	f7ff fd45 	bl	8004dec <memset>
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <std+0x38>)
 8005364:	6263      	str	r3, [r4, #36]	; 0x24
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <std+0x3c>)
 8005368:	62a3      	str	r3, [r4, #40]	; 0x28
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <std+0x40>)
 800536c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <std+0x44>)
 8005370:	6224      	str	r4, [r4, #32]
 8005372:	6323      	str	r3, [r4, #48]	; 0x30
 8005374:	bd10      	pop	{r4, pc}
 8005376:	bf00      	nop
 8005378:	08005cad 	.word	0x08005cad
 800537c:	08005ccf 	.word	0x08005ccf
 8005380:	08005d07 	.word	0x08005d07
 8005384:	08005d2b 	.word	0x08005d2b

08005388 <_cleanup_r>:
 8005388:	4901      	ldr	r1, [pc, #4]	; (8005390 <_cleanup_r+0x8>)
 800538a:	f000 b885 	b.w	8005498 <_fwalk_reent>
 800538e:	bf00      	nop
 8005390:	080052ed 	.word	0x080052ed

08005394 <__sfmoreglue>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	1e4a      	subs	r2, r1, #1
 8005398:	2568      	movs	r5, #104	; 0x68
 800539a:	4355      	muls	r5, r2
 800539c:	460e      	mov	r6, r1
 800539e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053a2:	f000 f951 	bl	8005648 <_malloc_r>
 80053a6:	4604      	mov	r4, r0
 80053a8:	b140      	cbz	r0, 80053bc <__sfmoreglue+0x28>
 80053aa:	2100      	movs	r1, #0
 80053ac:	e9c0 1600 	strd	r1, r6, [r0]
 80053b0:	300c      	adds	r0, #12
 80053b2:	60a0      	str	r0, [r4, #8]
 80053b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053b8:	f7ff fd18 	bl	8004dec <memset>
 80053bc:	4620      	mov	r0, r4
 80053be:	bd70      	pop	{r4, r5, r6, pc}

080053c0 <__sinit>:
 80053c0:	6983      	ldr	r3, [r0, #24]
 80053c2:	b510      	push	{r4, lr}
 80053c4:	4604      	mov	r4, r0
 80053c6:	bb33      	cbnz	r3, 8005416 <__sinit+0x56>
 80053c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80053cc:	6503      	str	r3, [r0, #80]	; 0x50
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <__sinit+0x58>)
 80053d0:	4a12      	ldr	r2, [pc, #72]	; (800541c <__sinit+0x5c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6282      	str	r2, [r0, #40]	; 0x28
 80053d6:	4298      	cmp	r0, r3
 80053d8:	bf04      	itt	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	6183      	streq	r3, [r0, #24]
 80053de:	f000 f81f 	bl	8005420 <__sfp>
 80053e2:	6060      	str	r0, [r4, #4]
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 f81b 	bl	8005420 <__sfp>
 80053ea:	60a0      	str	r0, [r4, #8]
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f817 	bl	8005420 <__sfp>
 80053f2:	2200      	movs	r2, #0
 80053f4:	60e0      	str	r0, [r4, #12]
 80053f6:	2104      	movs	r1, #4
 80053f8:	6860      	ldr	r0, [r4, #4]
 80053fa:	f7ff ffa1 	bl	8005340 <std>
 80053fe:	2201      	movs	r2, #1
 8005400:	2109      	movs	r1, #9
 8005402:	68a0      	ldr	r0, [r4, #8]
 8005404:	f7ff ff9c 	bl	8005340 <std>
 8005408:	2202      	movs	r2, #2
 800540a:	2112      	movs	r1, #18
 800540c:	68e0      	ldr	r0, [r4, #12]
 800540e:	f7ff ff97 	bl	8005340 <std>
 8005412:	2301      	movs	r3, #1
 8005414:	61a3      	str	r3, [r4, #24]
 8005416:	bd10      	pop	{r4, pc}
 8005418:	08005e6c 	.word	0x08005e6c
 800541c:	08005389 	.word	0x08005389

08005420 <__sfp>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <__sfp+0x70>)
 8005424:	681e      	ldr	r6, [r3, #0]
 8005426:	69b3      	ldr	r3, [r6, #24]
 8005428:	4607      	mov	r7, r0
 800542a:	b913      	cbnz	r3, 8005432 <__sfp+0x12>
 800542c:	4630      	mov	r0, r6
 800542e:	f7ff ffc7 	bl	80053c0 <__sinit>
 8005432:	3648      	adds	r6, #72	; 0x48
 8005434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005438:	3b01      	subs	r3, #1
 800543a:	d503      	bpl.n	8005444 <__sfp+0x24>
 800543c:	6833      	ldr	r3, [r6, #0]
 800543e:	b133      	cbz	r3, 800544e <__sfp+0x2e>
 8005440:	6836      	ldr	r6, [r6, #0]
 8005442:	e7f7      	b.n	8005434 <__sfp+0x14>
 8005444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005448:	b16d      	cbz	r5, 8005466 <__sfp+0x46>
 800544a:	3468      	adds	r4, #104	; 0x68
 800544c:	e7f4      	b.n	8005438 <__sfp+0x18>
 800544e:	2104      	movs	r1, #4
 8005450:	4638      	mov	r0, r7
 8005452:	f7ff ff9f 	bl	8005394 <__sfmoreglue>
 8005456:	6030      	str	r0, [r6, #0]
 8005458:	2800      	cmp	r0, #0
 800545a:	d1f1      	bne.n	8005440 <__sfp+0x20>
 800545c:	230c      	movs	r3, #12
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4604      	mov	r4, r0
 8005462:	4620      	mov	r0, r4
 8005464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <__sfp+0x74>)
 8005468:	6665      	str	r5, [r4, #100]	; 0x64
 800546a:	e9c4 5500 	strd	r5, r5, [r4]
 800546e:	60a5      	str	r5, [r4, #8]
 8005470:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005474:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005478:	2208      	movs	r2, #8
 800547a:	4629      	mov	r1, r5
 800547c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005480:	f7ff fcb4 	bl	8004dec <memset>
 8005484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800548c:	e7e9      	b.n	8005462 <__sfp+0x42>
 800548e:	bf00      	nop
 8005490:	08005e6c 	.word	0x08005e6c
 8005494:	ffff0001 	.word	0xffff0001

08005498 <_fwalk_reent>:
 8005498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800549c:	4680      	mov	r8, r0
 800549e:	4689      	mov	r9, r1
 80054a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054a4:	2600      	movs	r6, #0
 80054a6:	b914      	cbnz	r4, 80054ae <_fwalk_reent+0x16>
 80054a8:	4630      	mov	r0, r6
 80054aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80054b2:	3f01      	subs	r7, #1
 80054b4:	d501      	bpl.n	80054ba <_fwalk_reent+0x22>
 80054b6:	6824      	ldr	r4, [r4, #0]
 80054b8:	e7f5      	b.n	80054a6 <_fwalk_reent+0xe>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d907      	bls.n	80054d0 <_fwalk_reent+0x38>
 80054c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054c4:	3301      	adds	r3, #1
 80054c6:	d003      	beq.n	80054d0 <_fwalk_reent+0x38>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4640      	mov	r0, r8
 80054cc:	47c8      	blx	r9
 80054ce:	4306      	orrs	r6, r0
 80054d0:	3568      	adds	r5, #104	; 0x68
 80054d2:	e7ee      	b.n	80054b2 <_fwalk_reent+0x1a>

080054d4 <__swhatbuf_r>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	460e      	mov	r6, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	2900      	cmp	r1, #0
 80054de:	b096      	sub	sp, #88	; 0x58
 80054e0:	4614      	mov	r4, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	da07      	bge.n	80054f6 <__swhatbuf_r+0x22>
 80054e6:	2300      	movs	r3, #0
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	89b3      	ldrh	r3, [r6, #12]
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	d410      	bmi.n	8005512 <__swhatbuf_r+0x3e>
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	e00e      	b.n	8005514 <__swhatbuf_r+0x40>
 80054f6:	466a      	mov	r2, sp
 80054f8:	f000 fc3e 	bl	8005d78 <_fstat_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	dbf2      	blt.n	80054e6 <__swhatbuf_r+0x12>
 8005500:	9a01      	ldr	r2, [sp, #4]
 8005502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800550a:	425a      	negs	r2, r3
 800550c:	415a      	adcs	r2, r3
 800550e:	602a      	str	r2, [r5, #0]
 8005510:	e7ee      	b.n	80054f0 <__swhatbuf_r+0x1c>
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	2000      	movs	r0, #0
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	b016      	add	sp, #88	; 0x58
 800551a:	bd70      	pop	{r4, r5, r6, pc}

0800551c <__smakebuf_r>:
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005520:	079d      	lsls	r5, r3, #30
 8005522:	4606      	mov	r6, r0
 8005524:	460c      	mov	r4, r1
 8005526:	d507      	bpl.n	8005538 <__smakebuf_r+0x1c>
 8005528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	2301      	movs	r3, #1
 8005532:	6163      	str	r3, [r4, #20]
 8005534:	b002      	add	sp, #8
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	ab01      	add	r3, sp, #4
 800553a:	466a      	mov	r2, sp
 800553c:	f7ff ffca 	bl	80054d4 <__swhatbuf_r>
 8005540:	9900      	ldr	r1, [sp, #0]
 8005542:	4605      	mov	r5, r0
 8005544:	4630      	mov	r0, r6
 8005546:	f000 f87f 	bl	8005648 <_malloc_r>
 800554a:	b948      	cbnz	r0, 8005560 <__smakebuf_r+0x44>
 800554c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d4ef      	bmi.n	8005534 <__smakebuf_r+0x18>
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	e7e3      	b.n	8005528 <__smakebuf_r+0xc>
 8005560:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <__smakebuf_r+0x7c>)
 8005562:	62b3      	str	r3, [r6, #40]	; 0x28
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	6020      	str	r0, [r4, #0]
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	6163      	str	r3, [r4, #20]
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	6120      	str	r0, [r4, #16]
 8005576:	b15b      	cbz	r3, 8005590 <__smakebuf_r+0x74>
 8005578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557c:	4630      	mov	r0, r6
 800557e:	f000 fc0d 	bl	8005d9c <_isatty_r>
 8005582:	b128      	cbz	r0, 8005590 <__smakebuf_r+0x74>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	431d      	orrs	r5, r3
 8005594:	81a5      	strh	r5, [r4, #12]
 8005596:	e7cd      	b.n	8005534 <__smakebuf_r+0x18>
 8005598:	08005389 	.word	0x08005389

0800559c <malloc>:
 800559c:	4b02      	ldr	r3, [pc, #8]	; (80055a8 <malloc+0xc>)
 800559e:	4601      	mov	r1, r0
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f000 b851 	b.w	8005648 <_malloc_r>
 80055a6:	bf00      	nop
 80055a8:	20000010 	.word	0x20000010

080055ac <_free_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4605      	mov	r5, r0
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d045      	beq.n	8005640 <_free_r+0x94>
 80055b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b8:	1f0c      	subs	r4, r1, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	18e4      	addlt	r4, r4, r3
 80055c0:	f000 fc0e 	bl	8005de0 <__malloc_lock>
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <_free_r+0x98>)
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	4610      	mov	r0, r2
 80055ca:	b933      	cbnz	r3, 80055da <_free_r+0x2e>
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6014      	str	r4, [r2, #0]
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d6:	f000 bc04 	b.w	8005de2 <__malloc_unlock>
 80055da:	42a3      	cmp	r3, r4
 80055dc:	d90c      	bls.n	80055f8 <_free_r+0x4c>
 80055de:	6821      	ldr	r1, [r4, #0]
 80055e0:	1862      	adds	r2, r4, r1
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bf04      	itt	eq
 80055e6:	681a      	ldreq	r2, [r3, #0]
 80055e8:	685b      	ldreq	r3, [r3, #4]
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	bf04      	itt	eq
 80055ee:	1852      	addeq	r2, r2, r1
 80055f0:	6022      	streq	r2, [r4, #0]
 80055f2:	6004      	str	r4, [r0, #0]
 80055f4:	e7ec      	b.n	80055d0 <_free_r+0x24>
 80055f6:	4613      	mov	r3, r2
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	b10a      	cbz	r2, 8005600 <_free_r+0x54>
 80055fc:	42a2      	cmp	r2, r4
 80055fe:	d9fa      	bls.n	80055f6 <_free_r+0x4a>
 8005600:	6819      	ldr	r1, [r3, #0]
 8005602:	1858      	adds	r0, r3, r1
 8005604:	42a0      	cmp	r0, r4
 8005606:	d10b      	bne.n	8005620 <_free_r+0x74>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	4401      	add	r1, r0
 800560c:	1858      	adds	r0, r3, r1
 800560e:	4282      	cmp	r2, r0
 8005610:	6019      	str	r1, [r3, #0]
 8005612:	d1dd      	bne.n	80055d0 <_free_r+0x24>
 8005614:	6810      	ldr	r0, [r2, #0]
 8005616:	6852      	ldr	r2, [r2, #4]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	4401      	add	r1, r0
 800561c:	6019      	str	r1, [r3, #0]
 800561e:	e7d7      	b.n	80055d0 <_free_r+0x24>
 8005620:	d902      	bls.n	8005628 <_free_r+0x7c>
 8005622:	230c      	movs	r3, #12
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	e7d3      	b.n	80055d0 <_free_r+0x24>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428a      	cmp	r2, r1
 800562e:	bf04      	itt	eq
 8005630:	6811      	ldreq	r1, [r2, #0]
 8005632:	6852      	ldreq	r2, [r2, #4]
 8005634:	6062      	str	r2, [r4, #4]
 8005636:	bf04      	itt	eq
 8005638:	1809      	addeq	r1, r1, r0
 800563a:	6021      	streq	r1, [r4, #0]
 800563c:	605c      	str	r4, [r3, #4]
 800563e:	e7c7      	b.n	80055d0 <_free_r+0x24>
 8005640:	bd38      	pop	{r3, r4, r5, pc}
 8005642:	bf00      	nop
 8005644:	200000c4 	.word	0x200000c4

08005648 <_malloc_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	1ccd      	adds	r5, r1, #3
 800564c:	f025 0503 	bic.w	r5, r5, #3
 8005650:	3508      	adds	r5, #8
 8005652:	2d0c      	cmp	r5, #12
 8005654:	bf38      	it	cc
 8005656:	250c      	movcc	r5, #12
 8005658:	2d00      	cmp	r5, #0
 800565a:	4606      	mov	r6, r0
 800565c:	db01      	blt.n	8005662 <_malloc_r+0x1a>
 800565e:	42a9      	cmp	r1, r5
 8005660:	d903      	bls.n	800566a <_malloc_r+0x22>
 8005662:	230c      	movs	r3, #12
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	2000      	movs	r0, #0
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	f000 fbb9 	bl	8005de0 <__malloc_lock>
 800566e:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <_malloc_r+0xac>)
 8005670:	6814      	ldr	r4, [r2, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	b991      	cbnz	r1, 800569c <_malloc_r+0x54>
 8005676:	4c20      	ldr	r4, [pc, #128]	; (80056f8 <_malloc_r+0xb0>)
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	b91b      	cbnz	r3, 8005684 <_malloc_r+0x3c>
 800567c:	4630      	mov	r0, r6
 800567e:	f000 fb05 	bl	8005c8c <_sbrk_r>
 8005682:	6020      	str	r0, [r4, #0]
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f000 fb00 	bl	8005c8c <_sbrk_r>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d124      	bne.n	80056da <_malloc_r+0x92>
 8005690:	230c      	movs	r3, #12
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	4630      	mov	r0, r6
 8005696:	f000 fba4 	bl	8005de2 <__malloc_unlock>
 800569a:	e7e4      	b.n	8005666 <_malloc_r+0x1e>
 800569c:	680b      	ldr	r3, [r1, #0]
 800569e:	1b5b      	subs	r3, r3, r5
 80056a0:	d418      	bmi.n	80056d4 <_malloc_r+0x8c>
 80056a2:	2b0b      	cmp	r3, #11
 80056a4:	d90f      	bls.n	80056c6 <_malloc_r+0x7e>
 80056a6:	600b      	str	r3, [r1, #0]
 80056a8:	50cd      	str	r5, [r1, r3]
 80056aa:	18cc      	adds	r4, r1, r3
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 fb98 	bl	8005de2 <__malloc_unlock>
 80056b2:	f104 000b 	add.w	r0, r4, #11
 80056b6:	1d23      	adds	r3, r4, #4
 80056b8:	f020 0007 	bic.w	r0, r0, #7
 80056bc:	1ac3      	subs	r3, r0, r3
 80056be:	d0d3      	beq.n	8005668 <_malloc_r+0x20>
 80056c0:	425a      	negs	r2, r3
 80056c2:	50e2      	str	r2, [r4, r3]
 80056c4:	e7d0      	b.n	8005668 <_malloc_r+0x20>
 80056c6:	428c      	cmp	r4, r1
 80056c8:	684b      	ldr	r3, [r1, #4]
 80056ca:	bf16      	itet	ne
 80056cc:	6063      	strne	r3, [r4, #4]
 80056ce:	6013      	streq	r3, [r2, #0]
 80056d0:	460c      	movne	r4, r1
 80056d2:	e7eb      	b.n	80056ac <_malloc_r+0x64>
 80056d4:	460c      	mov	r4, r1
 80056d6:	6849      	ldr	r1, [r1, #4]
 80056d8:	e7cc      	b.n	8005674 <_malloc_r+0x2c>
 80056da:	1cc4      	adds	r4, r0, #3
 80056dc:	f024 0403 	bic.w	r4, r4, #3
 80056e0:	42a0      	cmp	r0, r4
 80056e2:	d005      	beq.n	80056f0 <_malloc_r+0xa8>
 80056e4:	1a21      	subs	r1, r4, r0
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 fad0 	bl	8005c8c <_sbrk_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d0cf      	beq.n	8005690 <_malloc_r+0x48>
 80056f0:	6025      	str	r5, [r4, #0]
 80056f2:	e7db      	b.n	80056ac <_malloc_r+0x64>
 80056f4:	200000c4 	.word	0x200000c4
 80056f8:	200000c8 	.word	0x200000c8

080056fc <__sfputc_r>:
 80056fc:	6893      	ldr	r3, [r2, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	b410      	push	{r4}
 8005704:	6093      	str	r3, [r2, #8]
 8005706:	da08      	bge.n	800571a <__sfputc_r+0x1e>
 8005708:	6994      	ldr	r4, [r2, #24]
 800570a:	42a3      	cmp	r3, r4
 800570c:	db01      	blt.n	8005712 <__sfputc_r+0x16>
 800570e:	290a      	cmp	r1, #10
 8005710:	d103      	bne.n	800571a <__sfputc_r+0x1e>
 8005712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005716:	f7ff bca3 	b.w	8005060 <__swbuf_r>
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	1c58      	adds	r0, r3, #1
 800571e:	6010      	str	r0, [r2, #0]
 8005720:	7019      	strb	r1, [r3, #0]
 8005722:	4608      	mov	r0, r1
 8005724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005728:	4770      	bx	lr

0800572a <__sfputs_r>:
 800572a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572c:	4606      	mov	r6, r0
 800572e:	460f      	mov	r7, r1
 8005730:	4614      	mov	r4, r2
 8005732:	18d5      	adds	r5, r2, r3
 8005734:	42ac      	cmp	r4, r5
 8005736:	d101      	bne.n	800573c <__sfputs_r+0x12>
 8005738:	2000      	movs	r0, #0
 800573a:	e007      	b.n	800574c <__sfputs_r+0x22>
 800573c:	463a      	mov	r2, r7
 800573e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005742:	4630      	mov	r0, r6
 8005744:	f7ff ffda 	bl	80056fc <__sfputc_r>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d1f3      	bne.n	8005734 <__sfputs_r+0xa>
 800574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005750 <_vfiprintf_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	460c      	mov	r4, r1
 8005756:	b09d      	sub	sp, #116	; 0x74
 8005758:	4617      	mov	r7, r2
 800575a:	461d      	mov	r5, r3
 800575c:	4606      	mov	r6, r0
 800575e:	b118      	cbz	r0, 8005768 <_vfiprintf_r+0x18>
 8005760:	6983      	ldr	r3, [r0, #24]
 8005762:	b90b      	cbnz	r3, 8005768 <_vfiprintf_r+0x18>
 8005764:	f7ff fe2c 	bl	80053c0 <__sinit>
 8005768:	4b7c      	ldr	r3, [pc, #496]	; (800595c <_vfiprintf_r+0x20c>)
 800576a:	429c      	cmp	r4, r3
 800576c:	d158      	bne.n	8005820 <_vfiprintf_r+0xd0>
 800576e:	6874      	ldr	r4, [r6, #4]
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	0718      	lsls	r0, r3, #28
 8005774:	d55e      	bpl.n	8005834 <_vfiprintf_r+0xe4>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d05b      	beq.n	8005834 <_vfiprintf_r+0xe4>
 800577c:	2300      	movs	r3, #0
 800577e:	9309      	str	r3, [sp, #36]	; 0x24
 8005780:	2320      	movs	r3, #32
 8005782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005786:	2330      	movs	r3, #48	; 0x30
 8005788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800578c:	9503      	str	r5, [sp, #12]
 800578e:	f04f 0b01 	mov.w	fp, #1
 8005792:	46b8      	mov	r8, r7
 8005794:	4645      	mov	r5, r8
 8005796:	f815 3b01 	ldrb.w	r3, [r5], #1
 800579a:	b10b      	cbz	r3, 80057a0 <_vfiprintf_r+0x50>
 800579c:	2b25      	cmp	r3, #37	; 0x25
 800579e:	d154      	bne.n	800584a <_vfiprintf_r+0xfa>
 80057a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80057a4:	d00b      	beq.n	80057be <_vfiprintf_r+0x6e>
 80057a6:	4653      	mov	r3, sl
 80057a8:	463a      	mov	r2, r7
 80057aa:	4621      	mov	r1, r4
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7ff ffbc 	bl	800572a <__sfputs_r>
 80057b2:	3001      	adds	r0, #1
 80057b4:	f000 80c2 	beq.w	800593c <_vfiprintf_r+0x1ec>
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	4453      	add	r3, sl
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	f898 3000 	ldrb.w	r3, [r8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80ba 	beq.w	800593c <_vfiprintf_r+0x1ec>
 80057c8:	2300      	movs	r3, #0
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d2:	9304      	str	r3, [sp, #16]
 80057d4:	9307      	str	r3, [sp, #28]
 80057d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057da:	931a      	str	r3, [sp, #104]	; 0x68
 80057dc:	46a8      	mov	r8, r5
 80057de:	2205      	movs	r2, #5
 80057e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80057e4:	485e      	ldr	r0, [pc, #376]	; (8005960 <_vfiprintf_r+0x210>)
 80057e6:	f7fa fcf3 	bl	80001d0 <memchr>
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	bb78      	cbnz	r0, 800584e <_vfiprintf_r+0xfe>
 80057ee:	06d9      	lsls	r1, r3, #27
 80057f0:	bf44      	itt	mi
 80057f2:	2220      	movmi	r2, #32
 80057f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057f8:	071a      	lsls	r2, r3, #28
 80057fa:	bf44      	itt	mi
 80057fc:	222b      	movmi	r2, #43	; 0x2b
 80057fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005802:	782a      	ldrb	r2, [r5, #0]
 8005804:	2a2a      	cmp	r2, #42	; 0x2a
 8005806:	d02a      	beq.n	800585e <_vfiprintf_r+0x10e>
 8005808:	9a07      	ldr	r2, [sp, #28]
 800580a:	46a8      	mov	r8, r5
 800580c:	2000      	movs	r0, #0
 800580e:	250a      	movs	r5, #10
 8005810:	4641      	mov	r1, r8
 8005812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005816:	3b30      	subs	r3, #48	; 0x30
 8005818:	2b09      	cmp	r3, #9
 800581a:	d969      	bls.n	80058f0 <_vfiprintf_r+0x1a0>
 800581c:	b360      	cbz	r0, 8005878 <_vfiprintf_r+0x128>
 800581e:	e024      	b.n	800586a <_vfiprintf_r+0x11a>
 8005820:	4b50      	ldr	r3, [pc, #320]	; (8005964 <_vfiprintf_r+0x214>)
 8005822:	429c      	cmp	r4, r3
 8005824:	d101      	bne.n	800582a <_vfiprintf_r+0xda>
 8005826:	68b4      	ldr	r4, [r6, #8]
 8005828:	e7a2      	b.n	8005770 <_vfiprintf_r+0x20>
 800582a:	4b4f      	ldr	r3, [pc, #316]	; (8005968 <_vfiprintf_r+0x218>)
 800582c:	429c      	cmp	r4, r3
 800582e:	bf08      	it	eq
 8005830:	68f4      	ldreq	r4, [r6, #12]
 8005832:	e79d      	b.n	8005770 <_vfiprintf_r+0x20>
 8005834:	4621      	mov	r1, r4
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff fc64 	bl	8005104 <__swsetup_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	d09d      	beq.n	800577c <_vfiprintf_r+0x2c>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	b01d      	add	sp, #116	; 0x74
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	46a8      	mov	r8, r5
 800584c:	e7a2      	b.n	8005794 <_vfiprintf_r+0x44>
 800584e:	4a44      	ldr	r2, [pc, #272]	; (8005960 <_vfiprintf_r+0x210>)
 8005850:	1a80      	subs	r0, r0, r2
 8005852:	fa0b f000 	lsl.w	r0, fp, r0
 8005856:	4318      	orrs	r0, r3
 8005858:	9004      	str	r0, [sp, #16]
 800585a:	4645      	mov	r5, r8
 800585c:	e7be      	b.n	80057dc <_vfiprintf_r+0x8c>
 800585e:	9a03      	ldr	r2, [sp, #12]
 8005860:	1d11      	adds	r1, r2, #4
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	9103      	str	r1, [sp, #12]
 8005866:	2a00      	cmp	r2, #0
 8005868:	db01      	blt.n	800586e <_vfiprintf_r+0x11e>
 800586a:	9207      	str	r2, [sp, #28]
 800586c:	e004      	b.n	8005878 <_vfiprintf_r+0x128>
 800586e:	4252      	negs	r2, r2
 8005870:	f043 0302 	orr.w	r3, r3, #2
 8005874:	9207      	str	r2, [sp, #28]
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	f898 3000 	ldrb.w	r3, [r8]
 800587c:	2b2e      	cmp	r3, #46	; 0x2e
 800587e:	d10e      	bne.n	800589e <_vfiprintf_r+0x14e>
 8005880:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005884:	2b2a      	cmp	r3, #42	; 0x2a
 8005886:	d138      	bne.n	80058fa <_vfiprintf_r+0x1aa>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9203      	str	r2, [sp, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfb8      	it	lt
 8005894:	f04f 33ff 	movlt.w	r3, #4294967295
 8005898:	f108 0802 	add.w	r8, r8, #2
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	4d33      	ldr	r5, [pc, #204]	; (800596c <_vfiprintf_r+0x21c>)
 80058a0:	f898 1000 	ldrb.w	r1, [r8]
 80058a4:	2203      	movs	r2, #3
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fa fc92 	bl	80001d0 <memchr>
 80058ac:	b140      	cbz	r0, 80058c0 <_vfiprintf_r+0x170>
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	1b40      	subs	r0, r0, r5
 80058b2:	fa03 f000 	lsl.w	r0, r3, r0
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	4303      	orrs	r3, r0
 80058ba:	f108 0801 	add.w	r8, r8, #1
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	f898 1000 	ldrb.w	r1, [r8]
 80058c4:	482a      	ldr	r0, [pc, #168]	; (8005970 <_vfiprintf_r+0x220>)
 80058c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058ca:	2206      	movs	r2, #6
 80058cc:	f108 0701 	add.w	r7, r8, #1
 80058d0:	f7fa fc7e 	bl	80001d0 <memchr>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d037      	beq.n	8005948 <_vfiprintf_r+0x1f8>
 80058d8:	4b26      	ldr	r3, [pc, #152]	; (8005974 <_vfiprintf_r+0x224>)
 80058da:	bb1b      	cbnz	r3, 8005924 <_vfiprintf_r+0x1d4>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	3307      	adds	r3, #7
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	3308      	adds	r3, #8
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ea:	444b      	add	r3, r9
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
 80058ee:	e750      	b.n	8005792 <_vfiprintf_r+0x42>
 80058f0:	fb05 3202 	mla	r2, r5, r2, r3
 80058f4:	2001      	movs	r0, #1
 80058f6:	4688      	mov	r8, r1
 80058f8:	e78a      	b.n	8005810 <_vfiprintf_r+0xc0>
 80058fa:	2300      	movs	r3, #0
 80058fc:	f108 0801 	add.w	r8, r8, #1
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	4619      	mov	r1, r3
 8005904:	250a      	movs	r5, #10
 8005906:	4640      	mov	r0, r8
 8005908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800590c:	3a30      	subs	r2, #48	; 0x30
 800590e:	2a09      	cmp	r2, #9
 8005910:	d903      	bls.n	800591a <_vfiprintf_r+0x1ca>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0c3      	beq.n	800589e <_vfiprintf_r+0x14e>
 8005916:	9105      	str	r1, [sp, #20]
 8005918:	e7c1      	b.n	800589e <_vfiprintf_r+0x14e>
 800591a:	fb05 2101 	mla	r1, r5, r1, r2
 800591e:	2301      	movs	r3, #1
 8005920:	4680      	mov	r8, r0
 8005922:	e7f0      	b.n	8005906 <_vfiprintf_r+0x1b6>
 8005924:	ab03      	add	r3, sp, #12
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4622      	mov	r2, r4
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <_vfiprintf_r+0x228>)
 800592c:	a904      	add	r1, sp, #16
 800592e:	4630      	mov	r0, r6
 8005930:	f3af 8000 	nop.w
 8005934:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005938:	4681      	mov	r9, r0
 800593a:	d1d5      	bne.n	80058e8 <_vfiprintf_r+0x198>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	065b      	lsls	r3, r3, #25
 8005940:	f53f af7e 	bmi.w	8005840 <_vfiprintf_r+0xf0>
 8005944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005946:	e77d      	b.n	8005844 <_vfiprintf_r+0xf4>
 8005948:	ab03      	add	r3, sp, #12
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	4622      	mov	r2, r4
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <_vfiprintf_r+0x228>)
 8005950:	a904      	add	r1, sp, #16
 8005952:	4630      	mov	r0, r6
 8005954:	f000 f888 	bl	8005a68 <_printf_i>
 8005958:	e7ec      	b.n	8005934 <_vfiprintf_r+0x1e4>
 800595a:	bf00      	nop
 800595c:	08005e90 	.word	0x08005e90
 8005960:	08005ed0 	.word	0x08005ed0
 8005964:	08005eb0 	.word	0x08005eb0
 8005968:	08005e70 	.word	0x08005e70
 800596c:	08005ed6 	.word	0x08005ed6
 8005970:	08005eda 	.word	0x08005eda
 8005974:	00000000 	.word	0x00000000
 8005978:	0800572b 	.word	0x0800572b

0800597c <_printf_common>:
 800597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	4691      	mov	r9, r2
 8005982:	461f      	mov	r7, r3
 8005984:	688a      	ldr	r2, [r1, #8]
 8005986:	690b      	ldr	r3, [r1, #16]
 8005988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800598c:	4293      	cmp	r3, r2
 800598e:	bfb8      	it	lt
 8005990:	4613      	movlt	r3, r2
 8005992:	f8c9 3000 	str.w	r3, [r9]
 8005996:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800599a:	4606      	mov	r6, r0
 800599c:	460c      	mov	r4, r1
 800599e:	b112      	cbz	r2, 80059a6 <_printf_common+0x2a>
 80059a0:	3301      	adds	r3, #1
 80059a2:	f8c9 3000 	str.w	r3, [r9]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0699      	lsls	r1, r3, #26
 80059aa:	bf42      	ittt	mi
 80059ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059b0:	3302      	addmi	r3, #2
 80059b2:	f8c9 3000 	strmi.w	r3, [r9]
 80059b6:	6825      	ldr	r5, [r4, #0]
 80059b8:	f015 0506 	ands.w	r5, r5, #6
 80059bc:	d107      	bne.n	80059ce <_printf_common+0x52>
 80059be:	f104 0a19 	add.w	sl, r4, #25
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	f8d9 2000 	ldr.w	r2, [r9]
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	42ab      	cmp	r3, r5
 80059cc:	dc28      	bgt.n	8005a20 <_printf_common+0xa4>
 80059ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	3300      	adds	r3, #0
 80059d6:	bf18      	it	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	0692      	lsls	r2, r2, #26
 80059dc:	d42d      	bmi.n	8005a3a <_printf_common+0xbe>
 80059de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e2:	4639      	mov	r1, r7
 80059e4:	4630      	mov	r0, r6
 80059e6:	47c0      	blx	r8
 80059e8:	3001      	adds	r0, #1
 80059ea:	d020      	beq.n	8005a2e <_printf_common+0xb2>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	68e5      	ldr	r5, [r4, #12]
 80059f0:	f8d9 2000 	ldr.w	r2, [r9]
 80059f4:	f003 0306 	and.w	r3, r3, #6
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	bf08      	it	eq
 80059fc:	1aad      	subeq	r5, r5, r2
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	bf0c      	ite	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	2500      	movne	r5, #0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	bfc4      	itt	gt
 8005a0e:	1a9b      	subgt	r3, r3, r2
 8005a10:	18ed      	addgt	r5, r5, r3
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	341a      	adds	r4, #26
 8005a18:	454d      	cmp	r5, r9
 8005a1a:	d11a      	bne.n	8005a52 <_printf_common+0xd6>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e008      	b.n	8005a32 <_printf_common+0xb6>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4652      	mov	r2, sl
 8005a24:	4639      	mov	r1, r7
 8005a26:	4630      	mov	r0, r6
 8005a28:	47c0      	blx	r8
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d103      	bne.n	8005a36 <_printf_common+0xba>
 8005a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	3501      	adds	r5, #1
 8005a38:	e7c3      	b.n	80059c2 <_printf_common+0x46>
 8005a3a:	18e1      	adds	r1, r4, r3
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	2030      	movs	r0, #48	; 0x30
 8005a40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a44:	4422      	add	r2, r4
 8005a46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a4e:	3302      	adds	r3, #2
 8005a50:	e7c5      	b.n	80059de <_printf_common+0x62>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4622      	mov	r2, r4
 8005a56:	4639      	mov	r1, r7
 8005a58:	4630      	mov	r0, r6
 8005a5a:	47c0      	blx	r8
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d0e6      	beq.n	8005a2e <_printf_common+0xb2>
 8005a60:	f109 0901 	add.w	r9, r9, #1
 8005a64:	e7d8      	b.n	8005a18 <_printf_common+0x9c>
	...

08005a68 <_printf_i>:
 8005a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a70:	460c      	mov	r4, r1
 8005a72:	7e09      	ldrb	r1, [r1, #24]
 8005a74:	b085      	sub	sp, #20
 8005a76:	296e      	cmp	r1, #110	; 0x6e
 8005a78:	4617      	mov	r7, r2
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	4698      	mov	r8, r3
 8005a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a80:	f000 80b3 	beq.w	8005bea <_printf_i+0x182>
 8005a84:	d822      	bhi.n	8005acc <_printf_i+0x64>
 8005a86:	2963      	cmp	r1, #99	; 0x63
 8005a88:	d036      	beq.n	8005af8 <_printf_i+0x90>
 8005a8a:	d80a      	bhi.n	8005aa2 <_printf_i+0x3a>
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	f000 80b9 	beq.w	8005c04 <_printf_i+0x19c>
 8005a92:	2958      	cmp	r1, #88	; 0x58
 8005a94:	f000 8083 	beq.w	8005b9e <_printf_i+0x136>
 8005a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005aa0:	e032      	b.n	8005b08 <_printf_i+0xa0>
 8005aa2:	2964      	cmp	r1, #100	; 0x64
 8005aa4:	d001      	beq.n	8005aaa <_printf_i+0x42>
 8005aa6:	2969      	cmp	r1, #105	; 0x69
 8005aa8:	d1f6      	bne.n	8005a98 <_printf_i+0x30>
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	6813      	ldr	r3, [r2, #0]
 8005aae:	0605      	lsls	r5, r0, #24
 8005ab0:	f103 0104 	add.w	r1, r3, #4
 8005ab4:	d52a      	bpl.n	8005b0c <_printf_i+0xa4>
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da03      	bge.n	8005ac6 <_printf_i+0x5e>
 8005abe:	222d      	movs	r2, #45	; 0x2d
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ac6:	486f      	ldr	r0, [pc, #444]	; (8005c84 <_printf_i+0x21c>)
 8005ac8:	220a      	movs	r2, #10
 8005aca:	e039      	b.n	8005b40 <_printf_i+0xd8>
 8005acc:	2973      	cmp	r1, #115	; 0x73
 8005ace:	f000 809d 	beq.w	8005c0c <_printf_i+0x1a4>
 8005ad2:	d808      	bhi.n	8005ae6 <_printf_i+0x7e>
 8005ad4:	296f      	cmp	r1, #111	; 0x6f
 8005ad6:	d020      	beq.n	8005b1a <_printf_i+0xb2>
 8005ad8:	2970      	cmp	r1, #112	; 0x70
 8005ada:	d1dd      	bne.n	8005a98 <_printf_i+0x30>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	e003      	b.n	8005aee <_printf_i+0x86>
 8005ae6:	2975      	cmp	r1, #117	; 0x75
 8005ae8:	d017      	beq.n	8005b1a <_printf_i+0xb2>
 8005aea:	2978      	cmp	r1, #120	; 0x78
 8005aec:	d1d4      	bne.n	8005a98 <_printf_i+0x30>
 8005aee:	2378      	movs	r3, #120	; 0x78
 8005af0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af4:	4864      	ldr	r0, [pc, #400]	; (8005c88 <_printf_i+0x220>)
 8005af6:	e055      	b.n	8005ba4 <_printf_i+0x13c>
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	1d19      	adds	r1, r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6011      	str	r1, [r2, #0]
 8005b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e08c      	b.n	8005c26 <_printf_i+0x1be>
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6011      	str	r1, [r2, #0]
 8005b10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b14:	bf18      	it	ne
 8005b16:	b21b      	sxthne	r3, r3
 8005b18:	e7cf      	b.n	8005aba <_printf_i+0x52>
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	6825      	ldr	r5, [r4, #0]
 8005b1e:	1d18      	adds	r0, r3, #4
 8005b20:	6010      	str	r0, [r2, #0]
 8005b22:	0628      	lsls	r0, r5, #24
 8005b24:	d501      	bpl.n	8005b2a <_printf_i+0xc2>
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	e002      	b.n	8005b30 <_printf_i+0xc8>
 8005b2a:	0668      	lsls	r0, r5, #25
 8005b2c:	d5fb      	bpl.n	8005b26 <_printf_i+0xbe>
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	4854      	ldr	r0, [pc, #336]	; (8005c84 <_printf_i+0x21c>)
 8005b32:	296f      	cmp	r1, #111	; 0x6f
 8005b34:	bf14      	ite	ne
 8005b36:	220a      	movne	r2, #10
 8005b38:	2208      	moveq	r2, #8
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b40:	6865      	ldr	r5, [r4, #4]
 8005b42:	60a5      	str	r5, [r4, #8]
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	f2c0 8095 	blt.w	8005c74 <_printf_i+0x20c>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	f021 0104 	bic.w	r1, r1, #4
 8005b50:	6021      	str	r1, [r4, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d13d      	bne.n	8005bd2 <_printf_i+0x16a>
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	f040 808e 	bne.w	8005c78 <_printf_i+0x210>
 8005b5c:	4665      	mov	r5, ip
 8005b5e:	2a08      	cmp	r2, #8
 8005b60:	d10b      	bne.n	8005b7a <_printf_i+0x112>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	07db      	lsls	r3, r3, #31
 8005b66:	d508      	bpl.n	8005b7a <_printf_i+0x112>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	bfde      	ittt	le
 8005b70:	2330      	movle	r3, #48	; 0x30
 8005b72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b7a:	ebac 0305 	sub.w	r3, ip, r5
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	f8cd 8000 	str.w	r8, [sp]
 8005b84:	463b      	mov	r3, r7
 8005b86:	aa03      	add	r2, sp, #12
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff fef6 	bl	800597c <_printf_common>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d14d      	bne.n	8005c30 <_printf_i+0x1c8>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	b005      	add	sp, #20
 8005b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	4839      	ldr	r0, [pc, #228]	; (8005c84 <_printf_i+0x21c>)
 8005ba0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ba4:	6813      	ldr	r3, [r2, #0]
 8005ba6:	6821      	ldr	r1, [r4, #0]
 8005ba8:	1d1d      	adds	r5, r3, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6015      	str	r5, [r2, #0]
 8005bae:	060a      	lsls	r2, r1, #24
 8005bb0:	d50b      	bpl.n	8005bca <_printf_i+0x162>
 8005bb2:	07ca      	lsls	r2, r1, #31
 8005bb4:	bf44      	itt	mi
 8005bb6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bba:	6021      	strmi	r1, [r4, #0]
 8005bbc:	b91b      	cbnz	r3, 8005bc6 <_printf_i+0x15e>
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	f022 0220 	bic.w	r2, r2, #32
 8005bc4:	6022      	str	r2, [r4, #0]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	e7b7      	b.n	8005b3a <_printf_i+0xd2>
 8005bca:	064d      	lsls	r5, r1, #25
 8005bcc:	bf48      	it	mi
 8005bce:	b29b      	uxthmi	r3, r3
 8005bd0:	e7ef      	b.n	8005bb2 <_printf_i+0x14a>
 8005bd2:	4665      	mov	r5, ip
 8005bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bd8:	fb02 3311 	mls	r3, r2, r1, r3
 8005bdc:	5cc3      	ldrb	r3, [r0, r3]
 8005bde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005be2:	460b      	mov	r3, r1
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d1f5      	bne.n	8005bd4 <_printf_i+0x16c>
 8005be8:	e7b9      	b.n	8005b5e <_printf_i+0xf6>
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	6961      	ldr	r1, [r4, #20]
 8005bf0:	1d18      	adds	r0, r3, #4
 8005bf2:	6010      	str	r0, [r2, #0]
 8005bf4:	0628      	lsls	r0, r5, #24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	d501      	bpl.n	8005bfe <_printf_i+0x196>
 8005bfa:	6019      	str	r1, [r3, #0]
 8005bfc:	e002      	b.n	8005c04 <_printf_i+0x19c>
 8005bfe:	066a      	lsls	r2, r5, #25
 8005c00:	d5fb      	bpl.n	8005bfa <_printf_i+0x192>
 8005c02:	8019      	strh	r1, [r3, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	6123      	str	r3, [r4, #16]
 8005c08:	4665      	mov	r5, ip
 8005c0a:	e7b9      	b.n	8005b80 <_printf_i+0x118>
 8005c0c:	6813      	ldr	r3, [r2, #0]
 8005c0e:	1d19      	adds	r1, r3, #4
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	681d      	ldr	r5, [r3, #0]
 8005c14:	6862      	ldr	r2, [r4, #4]
 8005c16:	2100      	movs	r1, #0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f7fa fad9 	bl	80001d0 <memchr>
 8005c1e:	b108      	cbz	r0, 8005c24 <_printf_i+0x1bc>
 8005c20:	1b40      	subs	r0, r0, r5
 8005c22:	6060      	str	r0, [r4, #4]
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2e:	e7a7      	b.n	8005b80 <_printf_i+0x118>
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	462a      	mov	r2, r5
 8005c34:	4639      	mov	r1, r7
 8005c36:	4630      	mov	r0, r6
 8005c38:	47c0      	blx	r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d0aa      	beq.n	8005b94 <_printf_i+0x12c>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	079b      	lsls	r3, r3, #30
 8005c42:	d413      	bmi.n	8005c6c <_printf_i+0x204>
 8005c44:	68e0      	ldr	r0, [r4, #12]
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	4298      	cmp	r0, r3
 8005c4a:	bfb8      	it	lt
 8005c4c:	4618      	movlt	r0, r3
 8005c4e:	e7a3      	b.n	8005b98 <_printf_i+0x130>
 8005c50:	2301      	movs	r3, #1
 8005c52:	464a      	mov	r2, r9
 8005c54:	4639      	mov	r1, r7
 8005c56:	4630      	mov	r0, r6
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d09a      	beq.n	8005b94 <_printf_i+0x12c>
 8005c5e:	3501      	adds	r5, #1
 8005c60:	68e3      	ldr	r3, [r4, #12]
 8005c62:	9a03      	ldr	r2, [sp, #12]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	42ab      	cmp	r3, r5
 8005c68:	dcf2      	bgt.n	8005c50 <_printf_i+0x1e8>
 8005c6a:	e7eb      	b.n	8005c44 <_printf_i+0x1dc>
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	f104 0919 	add.w	r9, r4, #25
 8005c72:	e7f5      	b.n	8005c60 <_printf_i+0x1f8>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ac      	bne.n	8005bd2 <_printf_i+0x16a>
 8005c78:	7803      	ldrb	r3, [r0, #0]
 8005c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c82:	e76c      	b.n	8005b5e <_printf_i+0xf6>
 8005c84:	08005ee1 	.word	0x08005ee1
 8005c88:	08005ef2 	.word	0x08005ef2

08005c8c <_sbrk_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4c06      	ldr	r4, [pc, #24]	; (8005ca8 <_sbrk_r+0x1c>)
 8005c90:	2300      	movs	r3, #0
 8005c92:	4605      	mov	r5, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	f7fe fff2 	bl	8004c80 <_sbrk>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_sbrk_r+0x1a>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_sbrk_r+0x1a>
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	200002b4 	.word	0x200002b4

08005cac <__sread>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	460c      	mov	r4, r1
 8005cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb4:	f000 f896 	bl	8005de4 <_read_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	bfab      	itete	ge
 8005cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc0:	181b      	addge	r3, r3, r0
 8005cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cc6:	bfac      	ite	ge
 8005cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cca:	81a3      	strhlt	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__swrite>:
 8005cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	898b      	ldrh	r3, [r1, #12]
 8005cd6:	05db      	lsls	r3, r3, #23
 8005cd8:	4605      	mov	r5, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4616      	mov	r6, r2
 8005cde:	d505      	bpl.n	8005cec <__swrite+0x1e>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	f000 f868 	bl	8005dbc <_lseek_r>
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf6:	81a3      	strh	r3, [r4, #12]
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	f000 b817 	b.w	8005d34 <_write_r>

08005d06 <__sseek>:
 8005d06:	b510      	push	{r4, lr}
 8005d08:	460c      	mov	r4, r1
 8005d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0e:	f000 f855 	bl	8005dbc <_lseek_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	bf15      	itete	ne
 8005d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d22:	81a3      	strheq	r3, [r4, #12]
 8005d24:	bf18      	it	ne
 8005d26:	81a3      	strhne	r3, [r4, #12]
 8005d28:	bd10      	pop	{r4, pc}

08005d2a <__sclose>:
 8005d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2e:	f000 b813 	b.w	8005d58 <_close_r>
	...

08005d34 <_write_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4c07      	ldr	r4, [pc, #28]	; (8005d54 <_write_r+0x20>)
 8005d38:	4605      	mov	r5, r0
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7fe ff4b 	bl	8004bde <_write>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_write_r+0x1e>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_write_r+0x1e>
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200002b4 	.word	0x200002b4

08005d58 <_close_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4c06      	ldr	r4, [pc, #24]	; (8005d74 <_close_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4605      	mov	r5, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	f7fe ff57 	bl	8004c16 <_close>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_close_r+0x1a>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_close_r+0x1a>
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	200002b4 	.word	0x200002b4

08005d78 <_fstat_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4c07      	ldr	r4, [pc, #28]	; (8005d98 <_fstat_r+0x20>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4605      	mov	r5, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	f7fe ff52 	bl	8004c2e <_fstat>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	d102      	bne.n	8005d94 <_fstat_r+0x1c>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	b103      	cbz	r3, 8005d94 <_fstat_r+0x1c>
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	200002b4 	.word	0x200002b4

08005d9c <_isatty_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4c06      	ldr	r4, [pc, #24]	; (8005db8 <_isatty_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4605      	mov	r5, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	f7fe ff51 	bl	8004c4e <_isatty>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_isatty_r+0x1a>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_isatty_r+0x1a>
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200002b4 	.word	0x200002b4

08005dbc <_lseek_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4c07      	ldr	r4, [pc, #28]	; (8005ddc <_lseek_r+0x20>)
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fe ff4a 	bl	8004c64 <_lseek>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_lseek_r+0x1e>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_lseek_r+0x1e>
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	200002b4 	.word	0x200002b4

08005de0 <__malloc_lock>:
 8005de0:	4770      	bx	lr

08005de2 <__malloc_unlock>:
 8005de2:	4770      	bx	lr

08005de4 <_read_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4c07      	ldr	r4, [pc, #28]	; (8005e04 <_read_r+0x20>)
 8005de8:	4605      	mov	r5, r0
 8005dea:	4608      	mov	r0, r1
 8005dec:	4611      	mov	r1, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	6022      	str	r2, [r4, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f7fe fed6 	bl	8004ba4 <_read>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_read_r+0x1e>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_read_r+0x1e>
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200002b4 	.word	0x200002b4

08005e08 <_init>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr

08005e14 <_fini>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr
