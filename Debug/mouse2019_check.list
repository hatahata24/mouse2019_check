
mouse2019_check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa0  08006fa0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa8  08006fa8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000074  08007024  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08007024  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f65  00000000  00000000  0002ee5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020bdb  00000000  00000000  00032b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a909  00000000  00000000  00053713  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5f8f  00000000  00000000  0005e01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  00124028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e8c 	.word	0x08006e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006e8c 	.word	0x08006e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fd07 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f004 fc82 	bl	80056e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fd1f 	bl	8001852 <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 fce7 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	20000000 	.word	0x20000000

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000004 	.word	0x20000004
 8000e74:	200000ec 	.word	0x200000ec

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000ec 	.word	0x200000ec

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_Delay+0x40>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e033      	b.n	8000f52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 fc20 	bl	8005738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d118      	bne.n	8000f44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	f043 0202 	orr.w	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fa92 	bl	8001450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40
 8000f42:	e001      	b.n	8000f48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Start+0x1a>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e0a5      	b.n	80010c2 <HAL_ADC_Start+0x166>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d018      	beq.n	8000fbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_ADC_Start+0x174>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_ADC_Start+0x178>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9a      	lsrs	r2, r3, #18
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d179      	bne.n	80010c0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100a:	d106      	bne.n	800101a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f023 0206 	bic.w	r2, r3, #6
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_ADC_Start+0x17c>)
 800102a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2b00      	cmp	r3, #0
 8001040:	d12a      	bne.n	8001098 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a25      	ldr	r2, [pc, #148]	; (80010dc <HAL_ADC_Start+0x180>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d015      	beq.n	8001078 <HAL_ADC_Start+0x11c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_ADC_Start+0x184>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <HAL_ADC_Start+0x106>
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_ADC_Start+0x17c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_ADC_Start+0x188>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d129      	bne.n	80010c0 <HAL_ADC_Start+0x164>
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_ADC_Start+0x17c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d823      	bhi.n	80010c0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11c      	bne.n	80010c0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	e013      	b.n	80010c0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_ADC_Start+0x180>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10e      	bne.n	80010c0 <HAL_ADC_Start+0x164>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010be:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	431bde83 	.word	0x431bde83
 80010d8:	40012300 	.word	0x40012300
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40012100 	.word	0x40012100
 80010e4:	40012200 	.word	0x40012200

080010e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001104:	d113      	bne.n	800112e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d10b      	bne.n	800112e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f043 0220 	orr.w	r2, r3, #32
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e05c      	b.n	80011e8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800112e:	f7ff fea3 	bl	8000e78 <HAL_GetTick>
 8001132:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001134:	e01a      	b.n	800116c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d016      	beq.n	800116c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_ADC_PollForConversion+0x6c>
 8001144:	f7ff fe98 	bl	8000e78 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d20b      	bcs.n	800116c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e03d      	b.n	80011e8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d1dd      	bne.n	8001136 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0212 	mvn.w	r2, #18
 8001182:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d123      	bne.n	80011e6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11f      	bne.n	80011e6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d111      	bne.n	80011e6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e105      	b.n	8001434 <HAL_ADC_ConfigChannel+0x228>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d925      	bls.n	8001284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	2207      	movs	r2, #7
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4403      	add	r3, r0
 8001276:	3b1e      	subs	r3, #30
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e022      	b.n	80012ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	2207      	movs	r2, #7
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4403      	add	r3, r0
 80012c0:	409a      	lsls	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d824      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b05      	subs	r3, #5
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b05      	subs	r3, #5
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	e04c      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d824      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	3b23      	subs	r3, #35	; 0x23
 8001336:	221f      	movs	r2, #31
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b23      	subs	r3, #35	; 0x23
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
 800136c:	e023      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b41      	subs	r3, #65	; 0x41
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	; 0x41
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_ADC_ConfigChannel+0x234>)
 80013b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_ADC_ConfigChannel+0x238>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1cc>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b12      	cmp	r3, #18
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_ADC_ConfigChannel+0x238>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d123      	bne.n	800142a <HAL_ADC_ConfigChannel+0x21e>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0x1e6>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b11      	cmp	r3, #17
 80013f0:	d11b      	bne.n	800142a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d111      	bne.n	800142a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_ConfigChannel+0x23c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_ADC_ConfigChannel+0x240>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9a      	lsrs	r2, r3, #18
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800141c:	e002      	b.n	8001424 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3b01      	subs	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f9      	bne.n	800141e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40012300 	.word	0x40012300
 8001444:	40012000 	.word	0x40012000
 8001448:	2000000c 	.word	0x2000000c
 800144c:	431bde83 	.word	0x431bde83

08001450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001458:	4b79      	ldr	r3, [pc, #484]	; (8001640 <ADC_Init+0x1f0>)
 800145a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	431a      	orrs	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	021a      	lsls	r2, r3, #8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	4a58      	ldr	r2, [pc, #352]	; (8001644 <ADC_Init+0x1f4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d022      	beq.n	800152e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e00f      	b.n	800154e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800153c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800154c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0202 	bic.w	r2, r2, #2
 800155c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e1b      	ldrb	r3, [r3, #24]
 8001568:	005a      	lsls	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01b      	beq.n	80015b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800158a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800159a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	3b01      	subs	r3, #1
 80015a8:	035a      	lsls	r2, r3, #13
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	e007      	b.n	80015c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	3b01      	subs	r3, #1
 80015e0:	051a      	lsls	r2, r3, #20
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001606:	025a      	lsls	r2, r3, #9
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6899      	ldr	r1, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	029a      	lsls	r2, r3, #10
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40012300 	.word	0x40012300
 8001644:	0f000001 	.word	0x0f000001

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff8e 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff29 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff3e 	bl	8001690 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff8e 	bl	800173c <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5d 	bl	80016e8 <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff31 	bl	80016ac <__NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffa2 	bl	80017a4 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e16b      	b.n	8001b60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 815a 	bne.w	8001b5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x4a>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d123      	bne.n	80018fe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	69b9      	ldr	r1, [r7, #24]
 80018fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d00b      	beq.n	8001952 <HAL_GPIO_Init+0xe6>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d007      	beq.n	8001952 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001946:	2b11      	cmp	r3, #17
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b12      	cmp	r3, #18
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80b4 	beq.w	8001b5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_GPIO_Init+0x308>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_GPIO_Init+0x308>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_GPIO_Init+0x308>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	; (8001b78 <HAL_GPIO_Init+0x30c>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x310>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x226>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_GPIO_Init+0x314>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_Init+0x222>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	; (8001b84 <HAL_GPIO_Init+0x318>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_Init+0x21e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_GPIO_Init+0x31c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x216>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_GPIO_Init+0x328>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4a      	ldr	r2, [pc, #296]	; (8001b98 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x20a>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a76:	2308      	movs	r3, #8
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x228>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_GPIO_Init+0x30c>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad6:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b00:	4a26      	ldr	r2, [pc, #152]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae90 	bls.w	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	; 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e22d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d075      	beq.n	8001cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d112      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d05b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d157      	bne.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e208      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_OscConfig+0x74>
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a80      	ldr	r2, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8f4 	bl	8000e78 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f8f0 	bl	8000e78 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1cd      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f8e0 	bl	8000e78 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f8dc 	bl	8000e78 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1b9      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e18d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4952      	ldr	r1, [pc, #328]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f895 	bl	8000e78 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff f891 	bl	8000e78 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e16e      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4940      	ldr	r1, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f874 	bl	8000e78 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f870 	bl	8000e78 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e14d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d030      	beq.n	8001e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f854 	bl	8000e78 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f850 	bl	8000e78 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e12d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x200>
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f83d 	bl	8000e78 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f839 	bl	8000e78 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e116      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a0 	beq.w	8001f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7fe ffff 	bl	8000e78 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e011      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
 8001e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e90:	f7fe fff2 	bl	8000e78 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cf      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x478>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
 8001eb6:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a65      	ldr	r2, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ecc:	4b60      	ldr	r3, [pc, #384]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a59      	ldr	r2, [pc, #356]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7fe ffb7 	bl	8000e78 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe ffb3 	bl	8000e78 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e08e      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x33a>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe ffa1 	bl	8000e78 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe ff9d 	bl	8000e78 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e078      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d064      	beq.n	8002040 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d05c      	beq.n	800203c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d141      	bne.n	800200e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe ff72 	bl	8000e78 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe ff6e 	bl	8000e78 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04b      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	491d      	ldr	r1, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ff47 	bl	8000e78 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ff43 	bl	8000e78 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e020      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x41a>
 800200c:	e018      	b.n	8002040 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff30 	bl	8000e78 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff2c 	bl	8000e78 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e009      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x448>
 800203a:	e001      	b.n	8002040 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000
 8002050:	40023800 	.word	0x40023800
 8002054:	42470060 	.word	0x42470060

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0ca      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b6      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494c      	ldr	r1, [pc, #304]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e065      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4933      	ldr	r1, [pc, #204]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fe96 	bl	8000e78 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fe92 	bl	8000e78 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e030      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4915      	ldr	r1, [pc, #84]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f81d 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021e2:	4601      	mov	r1, r0
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	fa21 f303 	lsr.w	r3, r1, r3
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7fe fdf8 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	08006ef0 	.word	0x08006ef0
 8002218:	2000000c 	.word	0x2000000c

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d007      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x32>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d008      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x38>
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 808d 	bne.w	8002362 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCC_GetSysClockFreq+0x15c>)
 800224a:	60bb      	str	r3, [r7, #8]
       break;
 800224c:	e08c      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002250:	60bb      	str	r3, [r7, #8]
      break;
 8002252:	e089      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d023      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	f04f 0400 	mov.w	r4, #0
 8002274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	ea03 0501 	and.w	r5, r3, r1
 8002280:	ea04 0602 	and.w	r6, r4, r2
 8002284:	4a3d      	ldr	r2, [pc, #244]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002286:	fb02 f106 	mul.w	r1, r2, r6
 800228a:	2200      	movs	r2, #0
 800228c:	fb02 f205 	mul.w	r2, r2, r5
 8002290:	440a      	add	r2, r1
 8002292:	493a      	ldr	r1, [pc, #232]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002294:	fba5 0101 	umull	r0, r1, r5, r1
 8002298:	1853      	adds	r3, r2, r1
 800229a:	4619      	mov	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	f7fe fc01 	bl	8000aac <__aeabi_uldivmod>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e049      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	f04f 0400 	mov.w	r4, #0
 80022bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea03 0501 	and.w	r5, r3, r1
 80022c8:	ea04 0602 	and.w	r6, r4, r2
 80022cc:	4629      	mov	r1, r5
 80022ce:	4632      	mov	r2, r6
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	0154      	lsls	r4, r2, #5
 80022da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	4619      	mov	r1, r3
 80022e2:	4622      	mov	r2, r4
 80022e4:	1b49      	subs	r1, r1, r5
 80022e6:	eb62 0206 	sbc.w	r2, r2, r6
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f04f 0400 	mov.w	r4, #0
 80022f2:	0194      	lsls	r4, r2, #6
 80022f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022f8:	018b      	lsls	r3, r1, #6
 80022fa:	1a5b      	subs	r3, r3, r1
 80022fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800230e:	00d9      	lsls	r1, r3, #3
 8002310:	460b      	mov	r3, r1
 8002312:	4614      	mov	r4, r2
 8002314:	195b      	adds	r3, r3, r5
 8002316:	eb44 0406 	adc.w	r4, r4, r6
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	02a2      	lsls	r2, r4, #10
 8002324:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002328:	0299      	lsls	r1, r3, #10
 800232a:	460b      	mov	r3, r1
 800232c:	4614      	mov	r4, r2
 800232e:	4618      	mov	r0, r3
 8002330:	4621      	mov	r1, r4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 0400 	mov.w	r4, #0
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	f7fe fbb6 	bl	8000aac <__aeabi_uldivmod>
 8002340:	4603      	mov	r3, r0
 8002342:	460c      	mov	r4, r1
 8002344:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	60bb      	str	r3, [r7, #8]
      break;
 8002360:	e002      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002364:	60bb      	str	r3, [r7, #8]
      break;
 8002366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002368:	68bb      	ldr	r3, [r7, #8]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	00f42400 	.word	0x00f42400
 800237c:	017d7840 	.word	0x017d7840

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4601      	mov	r1, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08006f00 	.word	0x08006f00

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffdc 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c8:	4601      	mov	r1, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0b5b      	lsrs	r3, r3, #13
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	08006f00 	.word	0x08006f00

080023e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e056      	b.n	80024a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f003 f9d3 	bl	80057c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002430:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	ea42 0103 	orr.w	r1, r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 0104 	and.w	r1, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Transmit+0x22>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e11e      	b.n	8002710 <HAL_SPI_Transmit+0x260>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024da:	f7fe fccd 	bl	8000e78 <HAL_GetTick>
 80024de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f4:	e103      	b.n	80026fe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_SPI_Transmit+0x52>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002506:	e0fa      	b.n	80026fe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2203      	movs	r2, #3
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d107      	bne.n	8002560 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d007      	beq.n	800257e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002586:	d14b      	bne.n	8002620 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_SPI_Transmit+0xe6>
 8002590:	8afb      	ldrh	r3, [r7, #22]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d13e      	bne.n	8002614 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ba:	e02b      	b.n	8002614 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d112      	bne.n	80025f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	1c9a      	adds	r2, r3, #2
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80025ee:	e011      	b.n	8002614 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f0:	f7fe fc42 	bl	8000e78 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d803      	bhi.n	8002608 <HAL_SPI_Transmit+0x158>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d102      	bne.n	800260e <HAL_SPI_Transmit+0x15e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002612:	e074      	b.n	80026fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ce      	bne.n	80025bc <HAL_SPI_Transmit+0x10c>
 800261e:	e04c      	b.n	80026ba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_SPI_Transmit+0x17e>
 8002628:	8afb      	ldrh	r3, [r7, #22]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d140      	bne.n	80026b0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002654:	e02c      	b.n	80026b0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d113      	bne.n	800268c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36
 800268a:	e011      	b.n	80026b0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268c:	f7fe fbf4 	bl	8000e78 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d803      	bhi.n	80026a4 <HAL_SPI_Transmit+0x1f4>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d102      	bne.n	80026aa <HAL_SPI_Transmit+0x1fa>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026ae:	e026      	b.n	80026fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1cd      	bne.n	8002656 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fba4 	bl	8002e0c <SPI_EndRxTxTransaction>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]
 80026fa:	e000      	b.n	80026fe <HAL_SPI_Transmit+0x24e>
  }

error:
 80026fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800270e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002734:	d112      	bne.n	800275c <HAL_SPI_Receive+0x44>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10e      	bne.n	800275c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2204      	movs	r2, #4
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8e9 	bl	800292a <HAL_SPI_TransmitReceive>
 8002758:	4603      	mov	r3, r0
 800275a:	e0e2      	b.n	8002922 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_SPI_Receive+0x52>
 8002766:	2302      	movs	r3, #2
 8002768:	e0db      	b.n	8002922 <HAL_SPI_Receive+0x20a>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002772:	f7fe fb81 	bl	8000e78 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002788:	e0c2      	b.n	8002910 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_SPI_Receive+0x7e>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800279a:	e0b9      	b.n	8002910 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2204      	movs	r2, #4
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e2:	d107      	bne.n	80027f4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d007      	beq.n	8002812 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d162      	bne.n	80028e0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800281a:	e02e      	b.n	800287a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d115      	bne.n	8002856 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f103 020c 	add.w	r2, r3, #12
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002854:	e011      	b.n	800287a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002856:	f7fe fb0f 	bl	8000e78 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d803      	bhi.n	800286e <HAL_SPI_Receive+0x156>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d102      	bne.n	8002874 <HAL_SPI_Receive+0x15c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002878:	e04a      	b.n	8002910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1cb      	bne.n	800281c <HAL_SPI_Receive+0x104>
 8002884:	e031      	b.n	80028ea <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d113      	bne.n	80028bc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	1c9a      	adds	r2, r3, #2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028ba:	e011      	b.n	80028e0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028bc:	f7fe fadc 	bl	8000e78 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d803      	bhi.n	80028d4 <HAL_SPI_Receive+0x1bc>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d102      	bne.n	80028da <HAL_SPI_Receive+0x1c2>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028de:	e017      	b.n	8002910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1cd      	bne.n	8002886 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa27 	bl	8002d42 <SPI_EndRxTransaction>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
 800290c:	e000      	b.n	8002910 <HAL_SPI_Receive+0x1f8>
  }

error :
 800290e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b08c      	sub	sp, #48	; 0x30
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x26>
 800294c:	2302      	movs	r3, #2
 800294e:	e18a      	b.n	8002c66 <HAL_SPI_TransmitReceive+0x33c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002958:	f7fe fa8e 	bl	8000e78 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002976:	2b01      	cmp	r3, #1
 8002978:	d00f      	beq.n	800299a <HAL_SPI_TransmitReceive+0x70>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002980:	d107      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x68>
 800298a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002998:	e15b      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x82>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x82>
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029b2:	e14e      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d003      	beq.n	80029c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2205      	movs	r2, #5
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d007      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a24:	d178      	bne.n	8002b18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_SPI_TransmitReceive+0x10a>
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d166      	bne.n	8002b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a58:	e053      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x176>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x176>
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d113      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	1c9a      	adds	r2, r3, #2
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d119      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x1b8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d014      	beq.n	8002ae2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	1c9a      	adds	r2, r3, #2
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ae2:	f7fe f9c9 	bl	8000e78 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d807      	bhi.n	8002b02 <HAL_SPI_TransmitReceive+0x1d8>
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d003      	beq.n	8002b02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b00:	e0a7      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1a6      	bne.n	8002a5a <HAL_SPI_TransmitReceive+0x130>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1a1      	bne.n	8002a5a <HAL_SPI_TransmitReceive+0x130>
 8002b16:	e07c      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x1fc>
 8002b20:	8b7b      	ldrh	r3, [r7, #26]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d16b      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b4c:	e057      	b.n	8002bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d11c      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x26c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x26c>
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d114      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d119      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x2ae>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bd8:	f7fe f94e 	bl	8000e78 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d803      	bhi.n	8002bf0 <HAL_SPI_TransmitReceive+0x2c6>
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d102      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x2cc>
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bfc:	e029      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1a2      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x224>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d19d      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8f8 	bl	8002e0c <SPI_EndRxTxTransaction>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c2e:	e010      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	e000      	b.n	8002c52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7e:	e04c      	b.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d048      	beq.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c88:	f7fe f8f6 	bl	8000e78 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d902      	bls.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13d      	bne.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb6:	d111      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	d004      	beq.n	8002ccc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cca:	d107      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce4:	d10f      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1a3      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d111      	bne.n	8002d7c <SPI_EndRxTransaction+0x3a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d60:	d004      	beq.n	8002d6c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d107      	bne.n	8002d7c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d84:	d12a      	bne.n	8002ddc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d012      	beq.n	8002db6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff67 	bl	8002c6e <SPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02d      	beq.n	8002e02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e026      	b.n	8002e04 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff ff54 	bl	8002c6e <SPI_WaitFlagStateUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e013      	b.n	8002e04 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2101      	movs	r1, #1
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff41 	bl	8002c6e <SPI_WaitFlagStateUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e000      	b.n	8002e04 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <SPI_EndRxTxTransaction+0x7c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <SPI_EndRxTxTransaction+0x80>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0d5b      	lsrs	r3, r3, #21
 8002e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e36:	d112      	bne.n	8002e5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff13 	bl	8002c6e <SPI_WaitFlagStateUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00f      	b.n	8002e7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d0f2      	beq.n	8002e5e <SPI_EndRxTxTransaction+0x52>
 8002e78:	e000      	b.n	8002e7c <SPI_EndRxTxTransaction+0x70>
        break;
 8002e7a:	bf00      	nop
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	165e9f81 	.word	0x165e9f81

08002e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e01d      	b.n	8002ede <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f002 fcca 	bl	8005850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 fc18 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01d      	b.n	8002f7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f815 	bl	8002f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 fbc9 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fe94 	bl	8003cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_TIM_PWM_Start+0x74>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIM_PWM_Start+0x2c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_TIM_PWM_Start+0x78>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_PWM_Start+0x30>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_TIM_PWM_Start+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e083      	b.n	8003130 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f002 fc61 	bl	8005904 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003058:	f023 0307 	bic.w	r3, r3, #7
 800305c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fb4b 	bl	8003704 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	4313      	orrs	r3, r2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030b4:	f023 030c 	bic.w	r3, r3, #12
 80030b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	4313      	orrs	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	011a      	lsls	r2, r3, #4
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	031b      	lsls	r3, r3, #12
 80030e4:	4313      	orrs	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4313      	orrs	r3, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_TIM_Encoder_Start+0x16>
 8003148:	2b04      	cmp	r3, #4
 800314a:	d008      	beq.n	800315e <HAL_TIM_Encoder_Start+0x26>
 800314c:	e00f      	b.n	800316e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fdbe 	bl	8003cd8 <TIM_CCxChannelCmd>
      break;
 800315c:	e016      	b.n	800318c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	2104      	movs	r1, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fdb6 	bl	8003cd8 <TIM_CCxChannelCmd>
      break;
 800316c:	e00e      	b.n	800318c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2201      	movs	r2, #1
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fdae 	bl	8003cd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	2104      	movs	r1, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fda7 	bl	8003cd8 <TIM_CCxChannelCmd>
      break;
 800318a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d122      	bne.n	8003202 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d11b      	bne.n	8003202 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0202 	mvn.w	r2, #2
 80031d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa6c 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 80031ee:	e005      	b.n	80031fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa5e 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa6f 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d122      	bne.n	8003256 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d11b      	bne.n	8003256 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0204 	mvn.w	r2, #4
 8003226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fa42 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 8003242:	e005      	b.n	8003250 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa34 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa45 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d122      	bne.n	80032aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11b      	bne.n	80032aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0208 	mvn.w	r2, #8
 800327a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fa18 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fa0a 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa1b 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d122      	bne.n	80032fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0210 	mvn.w	r2, #16
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2208      	movs	r2, #8
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9ee 	bl	80036c6 <HAL_TIM_IC_CaptureCallback>
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9e0 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9f1 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0201 	mvn.w	r2, #1
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f001 f8af 	bl	8004488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fd35 	bl	8003dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9b6 	bl	80036ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fcff 	bl	8003dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0b4      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x184>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f200 809f 	bhi.w	8003528 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003425 	.word	0x08003425
 80033f4:	08003529 	.word	0x08003529
 80033f8:	08003529 	.word	0x08003529
 80033fc:	08003529 	.word	0x08003529
 8003400:	08003465 	.word	0x08003465
 8003404:	08003529 	.word	0x08003529
 8003408:	08003529 	.word	0x08003529
 800340c:	08003529 	.word	0x08003529
 8003410:	080034a7 	.word	0x080034a7
 8003414:	08003529 	.word	0x08003529
 8003418:	08003529 	.word	0x08003529
 800341c:	08003529 	.word	0x08003529
 8003420:	080034e7 	.word	0x080034e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa0a 	bl	8003844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6999      	ldr	r1, [r3, #24]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]
      break;
 8003462:	e062      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa5a 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]
      break;
 80034a4:	e041      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 faaf 	bl	8003a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0208 	orr.w	r2, r2, #8
 80034c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0204 	bic.w	r2, r2, #4
 80034d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69d9      	ldr	r1, [r3, #28]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	61da      	str	r2, [r3, #28]
      break;
 80034e4:	e021      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fb03 	bl	8003af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
      break;
 8003526:	e000      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003528:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e0a6      	b.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d067      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0x120>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d80b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x6c>
 8003598:	2b10      	cmp	r3, #16
 800359a:	d073      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x140>
 800359c:	2b10      	cmp	r3, #16
 800359e:	d802      	bhi.n	80035a6 <HAL_TIM_ConfigClockSource+0x62>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d06f      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035a4:	e078      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d06c      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x140>
 80035aa:	2b30      	cmp	r3, #48	; 0x30
 80035ac:	d06a      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035ae:	e073      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d00d      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x8c>
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d804      	bhi.n	80035c2 <HAL_TIM_ConfigClockSource+0x7e>
 80035b8:	2b50      	cmp	r3, #80	; 0x50
 80035ba:	d033      	beq.n	8003624 <HAL_TIM_ConfigClockSource+0xe0>
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d041      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035c0:	e06a      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d066      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x152>
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d017      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035ce:	e063      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f000 fb5a 	bl	8003c98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	609a      	str	r2, [r3, #8]
      break;
 80035fc:	e04c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6899      	ldr	r1, [r3, #8]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f000 fb43 	bl	8003c98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003620:	609a      	str	r2, [r3, #8]
      break;
 8003622:	e039      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	461a      	mov	r2, r3
 8003632:	f000 fab7 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2150      	movs	r1, #80	; 0x50
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fb10 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003642:	e029      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	461a      	mov	r2, r3
 8003652:	f000 fad6 	bl	8003c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2160      	movs	r1, #96	; 0x60
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fb00 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003662:	e019      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	461a      	mov	r2, r3
 8003672:	f000 fa97 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	4618      	mov	r0, r3
 800367e:	f000 faf0 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003682:	e009      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fae7 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003694:	e000      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a40      	ldr	r2, [pc, #256]	; (8003818 <TIM_Base_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d00f      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3d      	ldr	r2, [pc, #244]	; (800381c <TIM_Base_SetConfig+0x118>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <TIM_Base_SetConfig+0x11c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <TIM_Base_SetConfig+0x120>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3a      	ldr	r2, [pc, #232]	; (8003828 <TIM_Base_SetConfig+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <TIM_Base_SetConfig+0x114>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d027      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <TIM_Base_SetConfig+0x118>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d023      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <TIM_Base_SetConfig+0x11c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01f      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <TIM_Base_SetConfig+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a29      	ldr	r2, [pc, #164]	; (8003828 <TIM_Base_SetConfig+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d017      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a28      	ldr	r2, [pc, #160]	; (800382c <TIM_Base_SetConfig+0x128>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <TIM_Base_SetConfig+0x12c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <TIM_Base_SetConfig+0x130>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <TIM_Base_SetConfig+0x134>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a24      	ldr	r2, [pc, #144]	; (800383c <TIM_Base_SetConfig+0x138>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <TIM_Base_SetConfig+0x13c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <TIM_Base_SetConfig+0x114>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0xf8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d103      	bne.n	8003804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	615a      	str	r2, [r3, #20]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800
 8003838:	40001800 	.word	0x40001800
 800383c:	40001c00 	.word	0x40001c00
 8003840:	40002000 	.word	0x40002000

08003844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 0302 	bic.w	r3, r3, #2
 800388c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a20      	ldr	r2, [pc, #128]	; (800391c <TIM_OC1_SetConfig+0xd8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC1_SetConfig+0x64>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <TIM_OC1_SetConfig+0xdc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10c      	bne.n	80038c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0308 	bic.w	r3, r3, #8
 80038ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <TIM_OC1_SetConfig+0xd8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC1_SetConfig+0x8e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <TIM_OC1_SetConfig+0xdc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0210 	bic.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <TIM_OC2_SetConfig+0xe4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC2_SetConfig+0x68>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <TIM_OC2_SetConfig+0xe8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10d      	bne.n	80039a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <TIM_OC2_SetConfig+0xe4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC2_SetConfig+0x94>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <TIM_OC2_SetConfig+0xe8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d113      	bne.n	80039e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40010400 	.word	0x40010400

08003a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <TIM_OC3_SetConfig+0xe0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC3_SetConfig+0x66>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <TIM_OC3_SetConfig+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10d      	bne.n	8003a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <TIM_OC3_SetConfig+0xe0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC3_SetConfig+0x92>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <TIM_OC3_SetConfig+0xe4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400

08003af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <TIM_OC4_SetConfig+0xa4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC4_SetConfig+0x68>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <TIM_OC4_SetConfig+0xa8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0210 	bic.w	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f043 0307 	orr.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e032      	b.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d72:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03f      	b.n	8003e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f001 fe86 	bl	8005b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f90b 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b088      	sub	sp, #32
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 8083 	bne.w	8003f96 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Transmit+0x2e>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e07b      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Transmit+0x40>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e074      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ec4:	f7fc ffd8 	bl	8000e78 <HAL_GetTick>
 8003ec8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ed6:	e042      	b.n	8003f5e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eee:	d122      	bne.n	8003f36 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f850 	bl	8003fa0 <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e046      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	e017      	b.n	8003f5e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	e013      	b.n	8003f5e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f82d 	bl	8003fa0 <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e023      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	60ba      	str	r2, [r7, #8]
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1b7      	bne.n	8003ed8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f814 	bl	8003fa0 <UART_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e00a      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb0:	e02c      	b.n	800400c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d028      	beq.n	800400c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc0:	f7fc ff5a 	bl	8000e78 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d21d      	bcs.n	800400c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e00f      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d0c3      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	b5b0      	push	{r4, r5, r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004074:	f023 030c 	bic.w	r3, r3, #12
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	430b      	orrs	r3, r1
 8004080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	f040 80e4 	bne.w	800426c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4aab      	ldr	r2, [pc, #684]	; (8004358 <UART_SetConfig+0x324>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <UART_SetConfig+0x84>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4aaa      	ldr	r2, [pc, #680]	; (800435c <UART_SetConfig+0x328>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d16c      	bne.n	8004192 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040b8:	f7fe f982 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009a      	lsls	r2, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	4aa3      	ldr	r2, [pc, #652]	; (8004360 <UART_SetConfig+0x32c>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	011c      	lsls	r4, r3, #4
 80040dc:	f7fe f970 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009a      	lsls	r2, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f6:	f7fe f963 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	4a93      	ldr	r2, [pc, #588]	; (8004360 <UART_SetConfig+0x32c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2264      	movs	r2, #100	; 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	1aeb      	subs	r3, r5, r3
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a8e      	ldr	r2, [pc, #568]	; (8004360 <UART_SetConfig+0x32c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004132:	441c      	add	r4, r3
 8004134:	f7fe f944 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004138:	4602      	mov	r2, r0
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009a      	lsls	r2, r3, #2
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fbb2 f5f3 	udiv	r5, r2, r3
 800414e:	f7fe f937 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004152:	4602      	mov	r2, r0
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	4a7d      	ldr	r2, [pc, #500]	; (8004360 <UART_SetConfig+0x32c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	; 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1aeb      	subs	r3, r5, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a78      	ldr	r2, [pc, #480]	; (8004360 <UART_SetConfig+0x32c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 0207 	and.w	r2, r3, #7
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4422      	add	r2, r4
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	e154      	b.n	800443c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004192:	f7fe f901 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004196:	4602      	mov	r2, r0
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009a      	lsls	r2, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	4a6c      	ldr	r2, [pc, #432]	; (8004360 <UART_SetConfig+0x32c>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011c      	lsls	r4, r3, #4
 80041b6:	f7fe f8ef 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80041d0:	f7fe f8e2 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009a      	lsls	r2, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	4a5d      	ldr	r2, [pc, #372]	; (8004360 <UART_SetConfig+0x32c>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2264      	movs	r2, #100	; 0x64
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
 80041f8:	1aeb      	subs	r3, r5, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a58      	ldr	r2, [pc, #352]	; (8004360 <UART_SetConfig+0x32c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800420c:	441c      	add	r4, r3
 800420e:	f7fe f8c3 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004212:	4602      	mov	r2, r0
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fbb2 f5f3 	udiv	r5, r2, r3
 8004228:	f7fe f8b6 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 800422c:	4602      	mov	r2, r0
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009a      	lsls	r2, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4a47      	ldr	r2, [pc, #284]	; (8004360 <UART_SetConfig+0x32c>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2264      	movs	r2, #100	; 0x64
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	1aeb      	subs	r3, r5, r3
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	3332      	adds	r3, #50	; 0x32
 8004256:	4a42      	ldr	r2, [pc, #264]	; (8004360 <UART_SetConfig+0x32c>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 0207 	and.w	r2, r3, #7
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4422      	add	r2, r4
 8004268:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800426a:	e0e7      	b.n	800443c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <UART_SetConfig+0x324>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <UART_SetConfig+0x24c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a38      	ldr	r2, [pc, #224]	; (800435c <UART_SetConfig+0x328>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d171      	bne.n	8004364 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004280:	f7fe f89e 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004284:	4602      	mov	r2, r0
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009a      	lsls	r2, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	4a31      	ldr	r2, [pc, #196]	; (8004360 <UART_SetConfig+0x32c>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	011c      	lsls	r4, r3, #4
 80042a4:	f7fe f88c 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009a      	lsls	r2, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80042be:	f7fe f87f 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009a      	lsls	r2, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <UART_SetConfig+0x32c>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2264      	movs	r2, #100	; 0x64
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	1aeb      	subs	r3, r5, r3
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	3332      	adds	r3, #50	; 0x32
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <UART_SetConfig+0x32c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f8:	441c      	add	r4, r3
 80042fa:	f7fe f861 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f5f3 	udiv	r5, r2, r3
 8004314:	f7fe f854 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004318:	4602      	mov	r2, r0
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <UART_SetConfig+0x32c>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2264      	movs	r2, #100	; 0x64
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	1aeb      	subs	r3, r5, r3
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <UART_SetConfig+0x32c>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4422      	add	r2, r4
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	e071      	b.n	800443c <UART_SetConfig+0x408>
 8004358:	40011000 	.word	0x40011000
 800435c:	40011400 	.word	0x40011400
 8004360:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004364:	f7fe f818 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004368:	4602      	mov	r2, r0
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4a31      	ldr	r2, [pc, #196]	; (8004444 <UART_SetConfig+0x410>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	011c      	lsls	r4, r3, #4
 8004388:	f7fe f806 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 800438c:	4602      	mov	r2, r0
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009a      	lsls	r2, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	fbb2 f5f3 	udiv	r5, r2, r3
 80043a2:	f7fd fff9 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	4a21      	ldr	r2, [pc, #132]	; (8004444 <UART_SetConfig+0x410>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	1aeb      	subs	r3, r5, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <UART_SetConfig+0x410>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	441c      	add	r4, r3
 80043de:	f7fd ffdb 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80043f8:	f7fd ffce 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009a      	lsls	r2, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <UART_SetConfig+0x410>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2264      	movs	r2, #100	; 0x64
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	1aeb      	subs	r3, r5, r3
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	3332      	adds	r3, #50	; 0x32
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <UART_SetConfig+0x410>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4422      	add	r2, r4
 8004438:	609a      	str	r2, [r3, #8]
}
 800443a:	e7ff      	b.n	800443c <UART_SetConfig+0x408>
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c){
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if(c == '\n'){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b0a      	cmp	r3, #10
 8004454:	d108      	bne.n	8004468 <__io_putchar+0x20>
    int _c = '\r';
 8004456:	230d      	movs	r3, #13
 8004458:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800445a:	f107 010c 	add.w	r1, r7, #12
 800445e:	2301      	movs	r3, #1
 8004460:	2201      	movs	r2, #1
 8004462:	4807      	ldr	r0, [pc, #28]	; (8004480 <__io_putchar+0x38>)
 8004464:	f7ff fd03 	bl	8003e6e <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8004468:	1d39      	adds	r1, r7, #4
 800446a:	2301      	movs	r3, #1
 800446c:	2201      	movs	r2, #1
 800446e:	4804      	ldr	r0, [pc, #16]	; (8004480 <__io_putchar+0x38>)
 8004470:	f7ff fcfd 	bl	8003e6e <HAL_UART_Transmit>
  return 0;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000089c 	.word	0x2000089c
 8004484:	00000000 	.word	0x00000000

08004488 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004490:	2360      	movs	r3, #96	; 0x60
 8004492:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4ab4      	ldr	r2, [pc, #720]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f040 839e 	bne.w	8004be2 <HAL_TIM_PeriodElapsedCallback+0x75a>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);   //
		  break;
	  }
*/

		cnt_l = TIM4 -> CNT;
 80044a6:	4bb3      	ldr	r3, [pc, #716]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	4bb1      	ldr	r3, [pc, #708]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80044b4:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 80044b8:	4bb0      	ldr	r3, [pc, #704]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c4:	4bae      	ldr	r3, [pc, #696]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80044c6:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 80044ca:	4bab      	ldr	r3, [pc, #684]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8004784 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	dd09      	ble.n	80044f2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 80044de:	4ba6      	ldr	r3, [pc, #664]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8004788 <HAL_TIM_PeriodElapsedCallback+0x300>
 80044e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ec:	4ba2      	ldr	r3, [pc, #648]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80044ee:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 80044f2:	4ba3      	ldr	r3, [pc, #652]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004784 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 80044fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	dd09      	ble.n	800451a <HAL_TIM_PeriodElapsedCallback+0x92>
 8004506:	4b9e      	ldr	r3, [pc, #632]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004788 <HAL_TIM_PeriodElapsedCallback+0x300>
 8004510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004514:	4b9a      	ldr	r3, [pc, #616]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004516:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 800451a:	4b99      	ldr	r3, [pc, #612]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	eef1 7a67 	vneg.f32	s15, s15
 8004524:	4b96      	ldr	r3, [pc, #600]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004526:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800452a:	4b98      	ldr	r3, [pc, #608]	; (800478c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc f802 	bl	8000538 <__aeabi_f2d>
 8004534:	4604      	mov	r4, r0
 8004536:	460d      	mov	r5, r1
 8004538:	4b8f      	ldr	r3, [pc, #572]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fb fffb 	bl	8000538 <__aeabi_f2d>
 8004542:	a387      	add	r3, pc, #540	; (adr r3, 8004760 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f84e 	bl	80005e8 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fb fe92 	bl	800027c <__adddf3>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4618      	mov	r0, r3
 800455e:	4621      	mov	r1, r4
 8004560:	f7fc fa54 	bl	8000a0c <__aeabi_d2f>
 8004564:	4602      	mov	r2, r0
 8004566:	4b89      	ldr	r3, [pc, #548]	; (800478c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004568:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800456a:	4b89      	ldr	r3, [pc, #548]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ffe2 	bl	8000538 <__aeabi_f2d>
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
 8004578:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb ffdb 	bl	8000538 <__aeabi_f2d>
 8004582:	a377      	add	r3, pc, #476	; (adr r3, 8004760 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fc f82e 	bl	80005e8 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4620      	mov	r0, r4
 8004592:	4629      	mov	r1, r5
 8004594:	f7fb fe72 	bl	800027c <__adddf3>
 8004598:	4603      	mov	r3, r0
 800459a:	460c      	mov	r4, r1
 800459c:	4618      	mov	r0, r3
 800459e:	4621      	mov	r1, r4
 80045a0:	f7fc fa34 	bl	8000a0c <__aeabi_d2f>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b7a      	ldr	r3, [pc, #488]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80045a8:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 80045aa:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb ffc2 	bl	8000538 <__aeabi_f2d>
 80045b4:	a36a      	add	r3, pc, #424	; (adr r3, 8004760 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fc f815 	bl	80005e8 <__aeabi_dmul>
 80045be:	4603      	mov	r3, r0
 80045c0:	460c      	mov	r4, r1
 80045c2:	4618      	mov	r0, r3
 80045c4:	4621      	mov	r1, r4
 80045c6:	a368      	add	r3, pc, #416	; (adr r3, 8004768 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fc f936 	bl	800083c <__aeabi_ddiv>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4618      	mov	r0, r3
 80045d6:	4621      	mov	r1, r4
 80045d8:	f7fc fa18 	bl	8000a0c <__aeabi_d2f>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80045e0:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 80045e2:	4b67      	ldr	r3, [pc, #412]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb ffa6 	bl	8000538 <__aeabi_f2d>
 80045ec:	a35c      	add	r3, pc, #368	; (adr r3, 8004760 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f7fb fff9 	bl	80005e8 <__aeabi_dmul>
 80045f6:	4603      	mov	r3, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	4618      	mov	r0, r3
 80045fc:	4621      	mov	r1, r4
 80045fe:	a35a      	add	r3, pc, #360	; (adr r3, 8004768 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fc f91a 	bl	800083c <__aeabi_ddiv>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4618      	mov	r0, r3
 800460e:	4621      	mov	r1, r4
 8004610:	f7fc f9fc 	bl	8000a0c <__aeabi_d2f>
 8004614:	4602      	mov	r2, r0
 8004616:	4b60      	ldr	r3, [pc, #384]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004618:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800461a:	4b56      	ldr	r3, [pc, #344]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800461c:	2200      	movs	r2, #0
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8004620:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004622:	2200      	movs	r2, #0
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.DRV){
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 81e1 	beq.w	80049f8 <HAL_TIM_PeriodElapsedCallback+0x570>
			current_speed_l = current_speed_l + accel_l * 0.001;
 8004636:	4b5a      	ldr	r3, [pc, #360]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb ff7c 	bl	8000538 <__aeabi_f2d>
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	4b57      	ldr	r3, [pc, #348]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff75 	bl	8000538 <__aeabi_f2d>
 800464e:	a346      	add	r3, pc, #280	; (adr r3, 8004768 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ffc8 	bl	80005e8 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fe0c 	bl	800027c <__adddf3>
 8004664:	4603      	mov	r3, r0
 8004666:	460c      	mov	r4, r1
 8004668:	4618      	mov	r0, r3
 800466a:	4621      	mov	r1, r4
 800466c:	f7fc f9ce 	bl	8000a0c <__aeabi_d2f>
 8004670:	4602      	mov	r2, r0
 8004672:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004674:	601a      	str	r2, [r3, #0]
			current_speed_l = max(min(current_speed_l, target_speed_max_l), target_speed_min_l);
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004678:	ed93 7a00 	vldr	s14, [r3]
 800467c:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800467e:	edd3 7a00 	vldr	s15, [r3]
 8004682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	dd03      	ble.n	8004694 <HAL_TIM_PeriodElapsedCallback+0x20c>
 800468c:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	e002      	b.n	800469a <HAL_TIM_PeriodElapsedCallback+0x212>
 8004694:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	4b44      	ldr	r3, [pc, #272]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800469c:	ed93 7a00 	vldr	s14, [r3]
 80046a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	dd10      	ble.n	80046cc <HAL_TIM_PeriodElapsedCallback+0x244>
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80046ac:	ed93 7a00 	vldr	s14, [r3]
 80046b0:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	dd02      	ble.n	80046c6 <HAL_TIM_PeriodElapsedCallback+0x23e>
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	e004      	b.n	80046d0 <HAL_TIM_PeriodElapsedCallback+0x248>
 80046c6:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e001      	b.n	80046d0 <HAL_TIM_PeriodElapsedCallback+0x248>
 80046cc:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80046d2:	6013      	str	r3, [r2, #0]
			epsilon_l = current_speed_l - speed_l;
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80046d6:	ed93 7a00 	vldr	s14, [r3]
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80046dc:	edd3 7a00 	vldr	s15, [r3]
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80046e6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80046ec:	ed93 7a00 	vldr	s14, [r3]
 80046f0:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80046fc:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l < 0){
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004702:	edd3 7a00 	vldr	s15, [r3]
 8004706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	d55b      	bpl.n	80047c8 <HAL_TIM_PeriodElapsedCallback+0x340>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004710:	2200      	movs	r2, #0
 8004712:	2120      	movs	r1, #32
 8004714:	4829      	ldr	r0, [pc, #164]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004716:	f7fd fa43 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 800471a:	2201      	movs	r2, #1
 800471c:	2110      	movs	r1, #16
 800471e:	4827      	ldr	r0, [pc, #156]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004720:	f7fd fa3e 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004724:	2201      	movs	r2, #1
 8004726:	2101      	movs	r1, #1
 8004728:	4825      	ldr	r0, [pc, #148]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800472a:	f7fd fa39 	bl	8001ba0 <HAL_GPIO_WritePin>

				ConfigOC.Pulse = -pulse_l;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	eef1 7a67 	vneg.f32	s15, s15
 8004738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473c:	ee17 3a90 	vmov	r3, s15
 8004740:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	2200      	movs	r2, #0
 8004748:	4619      	mov	r1, r3
 800474a:	481e      	ldr	r0, [pc, #120]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800474c:	f7fe fe34 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8004750:	2100      	movs	r1, #0
 8004752:	481c      	ldr	r0, [pc, #112]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004754:	f7fe fc20 	bl	8002f98 <HAL_TIM_PWM_Start>
 8004758:	e060      	b.n	800481c <HAL_TIM_PeriodElapsedCallback+0x394>
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w
 8004760:	c1239813 	.word	0xc1239813
 8004764:	3f54e844 	.word	0x3f54e844
 8004768:	d2f1a9fc 	.word	0xd2f1a9fc
 800476c:	3f50624d 	.word	0x3f50624d
 8004770:	200008e0 	.word	0x200008e0
 8004774:	40000800 	.word	0x40000800
 8004778:	2000009c 	.word	0x2000009c
 800477c:	40010400 	.word	0x40010400
 8004780:	20000090 	.word	0x20000090
 8004784:	471c4000 	.word	0x471c4000
 8004788:	477fff00 	.word	0x477fff00
 800478c:	200000a0 	.word	0x200000a0
 8004790:	20000094 	.word	0x20000094
 8004794:	200000a4 	.word	0x200000a4
 8004798:	20000098 	.word	0x20000098
 800479c:	20000968 	.word	0x20000968
 80047a0:	200000cc 	.word	0x200000cc
 80047a4:	200000c4 	.word	0x200000c4
 80047a8:	200000b8 	.word	0x200000b8
 80047ac:	200000b4 	.word	0x200000b4
 80047b0:	200000d8 	.word	0x200000d8
 80047b4:	20000008 	.word	0x20000008
 80047b8:	200008dc 	.word	0x200008dc
 80047bc:	40020800 	.word	0x40020800
 80047c0:	40020400 	.word	0x40020400
 80047c4:	20000924 	.word	0x20000924
			}
			else if(pulse_l > 0){
 80047c8:	4bb9      	ldr	r3, [pc, #740]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	dd21      	ble.n	800481c <HAL_TIM_PeriodElapsedCallback+0x394>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 80047d8:	2201      	movs	r2, #1
 80047da:	2120      	movs	r1, #32
 80047dc:	48b5      	ldr	r0, [pc, #724]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80047de:	f7fd f9df 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 80047e2:	2200      	movs	r2, #0
 80047e4:	2110      	movs	r1, #16
 80047e6:	48b3      	ldr	r0, [pc, #716]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80047e8:	f7fd f9da 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 80047ec:	2201      	movs	r2, #1
 80047ee:	2101      	movs	r1, #1
 80047f0:	48b1      	ldr	r0, [pc, #708]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80047f2:	f7fd f9d5 	bl	8001ba0 <HAL_GPIO_WritePin>

				ConfigOC.Pulse = pulse_l;
 80047f6:	4bae      	ldr	r3, [pc, #696]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004800:	ee17 3a90 	vmov	r3, s15
 8004804:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	2200      	movs	r2, #0
 800480c:	4619      	mov	r1, r3
 800480e:	48ab      	ldr	r0, [pc, #684]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8004810:	f7fe fdd2 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8004814:	2100      	movs	r1, #0
 8004816:	48a9      	ldr	r0, [pc, #676]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8004818:	f7fe fbbe 	bl	8002f98 <HAL_TIM_PWM_Start>
			}

			current_speed_r = current_speed_r + accel_r * 0.001;
 800481c:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fe89 	bl	8000538 <__aeabi_f2d>
 8004826:	4604      	mov	r4, r0
 8004828:	460d      	mov	r5, r1
 800482a:	4ba6      	ldr	r3, [pc, #664]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb fe82 	bl	8000538 <__aeabi_f2d>
 8004834:	a39c      	add	r3, pc, #624	; (adr r3, 8004aa8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fed5 	bl	80005e8 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	f7fb fd19 	bl	800027c <__adddf3>
 800484a:	4603      	mov	r3, r0
 800484c:	460c      	mov	r4, r1
 800484e:	4618      	mov	r0, r3
 8004850:	4621      	mov	r1, r4
 8004852:	f7fc f8db 	bl	8000a0c <__aeabi_d2f>
 8004856:	4602      	mov	r2, r0
 8004858:	4b99      	ldr	r3, [pc, #612]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800485a:	601a      	str	r2, [r3, #0]
			current_speed_r = max(min(current_speed_r, target_speed_max_r), target_speed_min_r);
 800485c:	4b98      	ldr	r3, [pc, #608]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800485e:	ed93 7a00 	vldr	s14, [r3]
 8004862:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8004864:	edd3 7a00 	vldr	s15, [r3]
 8004868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	dd03      	ble.n	800487a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8004872:	4b95      	ldr	r3, [pc, #596]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8004874:	edd3 7a00 	vldr	s15, [r3]
 8004878:	e002      	b.n	8004880 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 800487a:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800487c:	edd3 7a00 	vldr	s15, [r3]
 8004880:	4b92      	ldr	r3, [pc, #584]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0x644>)
 8004882:	ed93 7a00 	vldr	s14, [r3]
 8004886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	dd10      	ble.n	80048b2 <HAL_TIM_PeriodElapsedCallback+0x42a>
 8004890:	4b8b      	ldr	r3, [pc, #556]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8004892:	ed93 7a00 	vldr	s14, [r3]
 8004896:	4b8c      	ldr	r3, [pc, #560]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8004898:	edd3 7a00 	vldr	s15, [r3]
 800489c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	dd02      	ble.n	80048ac <HAL_TIM_PeriodElapsedCallback+0x424>
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	e004      	b.n	80048b6 <HAL_TIM_PeriodElapsedCallback+0x42e>
 80048ac:	4b84      	ldr	r3, [pc, #528]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	e001      	b.n	80048b6 <HAL_TIM_PeriodElapsedCallback+0x42e>
 80048b2:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0x644>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a82      	ldr	r2, [pc, #520]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80048b8:	6013      	str	r3, [r2, #0]
			epsilon_r = current_speed_r - speed_r;
 80048ba:	4b81      	ldr	r3, [pc, #516]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80048bc:	ed93 7a00 	vldr	s14, [r3]
 80048c0:	4b83      	ldr	r3, [pc, #524]	; (8004ad0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ca:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80048cc:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 80048d0:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80048d2:	ed93 7a00 	vldr	s14, [r3]
 80048d6:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80048e2:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r < 0){
 80048e6:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80048e8:	edd3 7a00 	vldr	s15, [r3]
 80048ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d525      	bpl.n	8004942 <HAL_TIM_PeriodElapsedCallback+0x4ba>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 80048f6:	2200      	movs	r2, #0
 80048f8:	2102      	movs	r1, #2
 80048fa:	486f      	ldr	r0, [pc, #444]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80048fc:	f7fd f950 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004900:	2201      	movs	r2, #1
 8004902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004906:	486c      	ldr	r0, [pc, #432]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004908:	f7fd f94a 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 800490c:	2201      	movs	r2, #1
 800490e:	2101      	movs	r1, #1
 8004910:	4869      	ldr	r0, [pc, #420]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004912:	f7fd f945 	bl	8001ba0 <HAL_GPIO_WritePin>

				ConfigOC.Pulse = -pulse_r;
 8004916:	4b71      	ldr	r3, [pc, #452]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8004918:	edd3 7a00 	vldr	s15, [r3]
 800491c:	eef1 7a67 	vneg.f32	s15, s15
 8004920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004924:	ee17 3a90 	vmov	r3, s15
 8004928:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	220c      	movs	r2, #12
 8004930:	4619      	mov	r1, r3
 8004932:	4862      	ldr	r0, [pc, #392]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8004934:	f7fe fd40 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8004938:	210c      	movs	r1, #12
 800493a:	4860      	ldr	r0, [pc, #384]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 800493c:	f7fe fb2c 	bl	8002f98 <HAL_TIM_PWM_Start>
 8004940:	e02a      	b.n	8004998 <HAL_TIM_PeriodElapsedCallback+0x510>
			}
			else if(pulse_r > 0){
 8004942:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004950:	dd22      	ble.n	8004998 <HAL_TIM_PeriodElapsedCallback+0x510>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004952:	2201      	movs	r2, #1
 8004954:	2102      	movs	r1, #2
 8004956:	4858      	ldr	r0, [pc, #352]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004958:	f7fd f922 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 800495c:	2200      	movs	r2, #0
 800495e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004962:	4855      	ldr	r0, [pc, #340]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004964:	f7fd f91c 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004968:	2201      	movs	r2, #1
 800496a:	2101      	movs	r1, #1
 800496c:	4852      	ldr	r0, [pc, #328]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800496e:	f7fd f917 	bl	8001ba0 <HAL_GPIO_WritePin>

				ConfigOC.Pulse = pulse_r;
 8004972:	4b5a      	ldr	r3, [pc, #360]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8004974:	edd3 7a00 	vldr	s15, [r3]
 8004978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497c:	ee17 3a90 	vmov	r3, s15
 8004980:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	220c      	movs	r2, #12
 8004988:	4619      	mov	r1, r3
 800498a:	484c      	ldr	r0, [pc, #304]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 800498c:	f7fe fd14 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8004990:	210c      	movs	r1, #12
 8004992:	484a      	ldr	r0, [pc, #296]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8004994:	f7fe fb00 	bl	8002f98 <HAL_TIM_PWM_Start>
			}
			if(cnt >= 5 && MF.FLAG.LOG){
 8004998:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	dd3b      	ble.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x590>
 80049a0:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d034      	beq.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x590>
				cnt = 0;
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
				if(get_cnt < log_allay){
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2bc7      	cmp	r3, #199	; 0xc7
 80049ba:	dc2d      	bgt.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x590>
					get_speed_l[get_cnt] = speed_l;
 80049bc:	4b4b      	ldr	r3, [pc, #300]	; (8004aec <HAL_TIM_PeriodElapsedCallback+0x664>)
 80049be:	edd3 7a00 	vldr	s15, [r3]
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ca:	ee17 1a90 	vmov	r1, s15
 80049ce:	4a48      	ldr	r2, [pc, #288]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80049d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_speed_r[get_cnt] = speed_r;
 80049d4:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80049d6:	edd3 7a00 	vldr	s15, [r3]
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e2:	ee17 1a90 	vmov	r1, s15
 80049e6:	4a43      	ldr	r2, [pc, #268]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80049e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_cnt++;
 80049ec:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a3d      	ldr	r2, [pc, #244]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e00f      	b.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x590>
				}
			}
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);			//R_CW
 80049f8:	2201      	movs	r2, #1
 80049fa:	2102      	movs	r1, #2
 80049fc:	482e      	ldr	r0, [pc, #184]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80049fe:	f7fd f8cf 	bl	8001ba0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		//R_CCW
 8004a02:	2200      	movs	r2, #0
 8004a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a08:	482b      	ldr	r0, [pc, #172]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004a0a:	f7fd f8c9 	bl	8001ba0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);		//STBY
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2101      	movs	r1, #1
 8004a12:	4829      	ldr	r0, [pc, #164]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8004a14:	f7fd f8c4 	bl	8001ba0 <HAL_GPIO_WritePin>
		}

		//gyro interrupt
		degree_z += icm20689_read_gyro_z() * 0.001;
 8004a18:	f000 fe22 	bl	8005660 <icm20689_read_gyro_z>
 8004a1c:	ee10 3a10 	vmov	r3, s0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fd89 	bl	8000538 <__aeabi_f2d>
 8004a26:	a320      	add	r3, pc, #128	; (adr r3, 8004aa8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fddc 	bl	80005e8 <__aeabi_dmul>
 8004a30:	4603      	mov	r3, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4625      	mov	r5, r4
 8004a36:	461c      	mov	r4, r3
 8004a38:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd7b 	bl	8000538 <__aeabi_f2d>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f7fb fc17 	bl	800027c <__adddf3>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	460c      	mov	r4, r1
 8004a52:	4618      	mov	r0, r3
 8004a54:	4621      	mov	r1, r4
 8004a56:	f7fb ffd9 	bl	8000a0c <__aeabi_d2f>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8004a5e:	601a      	str	r2, [r3, #0]


		//ADchange interrupt
		uint16_t delay = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	84fb      	strh	r3, [r7, #38]	; 0x26
		cnt++;
 8004a64:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8004a6c:	6013      	str	r3, [r2, #0]
		mode = (mode+1)%2;
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x674>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	bfb8      	it	lt
 8004a7c:	425b      	neglt	r3, r3
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x674>)
 8004a80:	6013      	str	r3, [r2, #0]

		switch(mode){
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x674>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_TIM_PeriodElapsedCallback+0x608>
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d06c      	beq.n	8004b68 <HAL_TIM_PeriodElapsedCallback+0x6e0>
				value1 = get_adc_value(&hadc1, ADC_CHANNEL_0);	//FR
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
			break;
		}
	}
}
 8004a8e:	e0a8      	b.n	8004be2 <HAL_TIM_PeriodElapsedCallback+0x75a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);  //L
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a96:	4807      	ldr	r0, [pc, #28]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8004a98:	f7fd f882 	bl	8001ba0 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aa0:	e031      	b.n	8004b06 <HAL_TIM_PeriodElapsedCallback+0x67e>
 8004aa2:	bf00      	nop
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004aac:	3f50624d 	.word	0x3f50624d
 8004ab0:	200008dc 	.word	0x200008dc
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40020400 	.word	0x40020400
 8004abc:	20000924 	.word	0x20000924
 8004ac0:	200000d0 	.word	0x200000d0
 8004ac4:	200000c8 	.word	0x200000c8
 8004ac8:	200000c0 	.word	0x200000c0
 8004acc:	200000bc 	.word	0x200000bc
 8004ad0:	20000098 	.word	0x20000098
 8004ad4:	200000dc 	.word	0x200000dc
 8004ad8:	20000008 	.word	0x20000008
 8004adc:	20000494 	.word	0x20000494
 8004ae0:	200000ac 	.word	0x200000ac
 8004ae4:	20000968 	.word	0x20000968
 8004ae8:	200000b0 	.word	0x200000b0
 8004aec:	200000a4 	.word	0x200000a4
 8004af0:	20000498 	.word	0x20000498
 8004af4:	20000174 	.word	0x20000174
 8004af8:	200000d4 	.word	0x200000d4
 8004afc:	200000a8 	.word	0x200000a8
 8004b00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b02:	3301      	adds	r3, #1
 8004b04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b08:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d9f7      	bls.n	8004b00 <HAL_TIM_PeriodElapsedCallback+0x678>
				value4 = get_adc_value(&hadc1, ADC_CHANNEL_3);	//L
 8004b10:	2103      	movs	r1, #3
 8004b12:	4836      	ldr	r0, [pc, #216]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x764>)
 8004b14:	f000 fce8 	bl	80054e8 <get_adc_value>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8004b1c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b24:	4833      	ldr	r0, [pc, #204]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8004b26:	f7fd f83b 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   //R
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b30:	4831      	ldr	r0, [pc, #196]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8004b32:	f7fd f835 	bl	8001ba0 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8004b36:	2300      	movs	r3, #0
 8004b38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_PeriodElapsedCallback+0x6ba>
 8004b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b44:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d9f7      	bls.n	8004b3c <HAL_TIM_PeriodElapsedCallback+0x6b4>
				value2 = get_adc_value(&hadc1, ADC_CHANNEL_1);	//R
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4827      	ldr	r0, [pc, #156]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x764>)
 8004b50:	f000 fcca 	bl	80054e8 <get_adc_value>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8004b58:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b60:	4825      	ldr	r0, [pc, #148]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8004b62:	f7fd f81d 	bl	8001ba0 <HAL_GPIO_WritePin>
			break;
 8004b66:	e03c      	b.n	8004be2 <HAL_TIM_PeriodElapsedCallback+0x75a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);  //FL
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b6e:	4821      	ldr	r0, [pc, #132]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8004b70:	f7fd f816 	bl	8001ba0 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8004b74:	2300      	movs	r3, #0
 8004b76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b78:	e002      	b.n	8004b80 <HAL_TIM_PeriodElapsedCallback+0x6f8>
 8004b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b82:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d9f7      	bls.n	8004b7a <HAL_TIM_PeriodElapsedCallback+0x6f2>
				value3 = get_adc_value(&hadc1, ADC_CHANNEL_2);	//FL
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4817      	ldr	r0, [pc, #92]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x764>)
 8004b8e:	f000 fcab 	bl	80054e8 <get_adc_value>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8004b96:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b9e:	4815      	ldr	r0, [pc, #84]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8004ba0:	f7fc fffe 	bl	8001ba0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //FR
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004baa:	4812      	ldr	r0, [pc, #72]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8004bac:	f7fc fff8 	bl	8001ba0 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bb4:	e002      	b.n	8004bbc <HAL_TIM_PeriodElapsedCallback+0x734>
 8004bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb8:	3301      	adds	r3, #1
 8004bba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bbe:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d9f7      	bls.n	8004bb6 <HAL_TIM_PeriodElapsedCallback+0x72e>
				value1 = get_adc_value(&hadc1, ADC_CHANNEL_0);	//FR
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x764>)
 8004bca:	f000 fc8d 	bl	80054e8 <get_adc_value>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8004bd2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bda:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8004bdc:	f7fc ffe0 	bl	8001ba0 <HAL_GPIO_WritePin>
			break;
 8004be0:	bf00      	nop
}
 8004be2:	bf00      	nop
 8004be4:	3728      	adds	r7, #40	; 0x28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000850 	.word	0x20000850
 8004bf0:	20000964 	.word	0x20000964
 8004bf4:	40020800 	.word	0x40020800
 8004bf8:	40020000 	.word	0x40020000
 8004bfc:	20000920 	.word	0x20000920
 8004c00:	20000898 	.word	0x20000898
 8004c04:	2000096c 	.word	0x2000096c

08004c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b092      	sub	sp, #72	; 0x48
 8004c0c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c0e:	f7fc f8cd 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c12:	f000 f8b7 	bl	8004d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c16:	f000 fba9 	bl	800536c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004c1a:	f000 fb7d 	bl	8005318 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004c1e:	f000 f91b 	bl	8004e58 <MX_ADC1_Init>
  MX_TIM4_Init();
 8004c22:	f000 fa97 	bl	8005154 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004c26:	f000 fb1f 	bl	8005268 <MX_TIM8_Init>
  MX_TIM2_Init();
 8004c2a:	f000 f99d 	bl	8004f68 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004c2e:	f000 fae5 	bl	80051fc <MX_TIM6_Init>
  MX_TIM3_Init();
 8004c32:	f000 fa19 	bl	8005068 <MX_TIM3_Init>
  MX_SPI3_Init();
 8004c36:	f000 f961 	bl	8004efc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  icm20689_init();
 8004c3a:	f000 fc7f 	bl	800553c <icm20689_init>

  printf("Welcome to WMMC !\n");
 8004c3e:	4844      	ldr	r0, [pc, #272]	; (8004d50 <main+0x148>)
 8004c40:	f001 f992 	bl	8005f68 <puts>

  int val = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44

  setbuf(stdout, NULL);
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <main+0x14c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f991 	bl	8005f78 <setbuf>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8004c56:	213c      	movs	r1, #60	; 0x3c
 8004c58:	483f      	ldr	r0, [pc, #252]	; (8004d58 <main+0x150>)
 8004c5a:	f7fe fa6d 	bl	8003138 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8004c5e:	213c      	movs	r1, #60	; 0x3c
 8004c60:	483e      	ldr	r0, [pc, #248]	; (8004d5c <main+0x154>)
 8004c62:	f7fe fa69 	bl	8003138 <HAL_TIM_Encoder_Start>

  int pulse = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40

  TIM_OC_InitTypeDef ConfigOC;
  ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c6a:	2360      	movs	r3, #96	; 0x60
 8004c6c:	607b      	str	r3, [r7, #4]
  ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
  ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]

  HAL_TIM_Base_Start_IT(&htim6);
 8004c76:	483a      	ldr	r0, [pc, #232]	; (8004d60 <main+0x158>)
 8004c78:	f7fe f935 	bl	8002ee6 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int cnt_r2, cnt_l2, dist_r2, dist_l2, speed_r2, speed_l2;
	cnt_r2 = cnt_r * 10;
 8004c7c:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <main+0x15c>)
 8004c7e:	edd3 7a00 	vldr	s15, [r3]
 8004c82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c8e:	ee17 3a90 	vmov	r3, s15
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	cnt_l2 = cnt_l * 10;
 8004c94:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <main+0x160>)
 8004c96:	edd3 7a00 	vldr	s15, [r3]
 8004c9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca6:	ee17 3a90 	vmov	r3, s15
 8004caa:	63bb      	str	r3, [r7, #56]	; 0x38
	dist_r2 = dist_r * 10;
 8004cac:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <main+0x164>)
 8004cae:	edd3 7a00 	vldr	s15, [r3]
 8004cb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cbe:	ee17 3a90 	vmov	r3, s15
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
	dist_l2 = dist_l * 10;
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <main+0x168>)
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd6:	ee17 3a90 	vmov	r3, s15
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
	speed_r2 = speed_r * 10;
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <main+0x16c>)
 8004cde:	edd3 7a00 	vldr	s15, [r3]
 8004ce2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cee:	ee17 3a90 	vmov	r3, s15
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	speed_l2 = speed_l * 10;
 8004cf4:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <main+0x170>)
 8004cf6:	edd3 7a00 	vldr	s15, [r3]
 8004cfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d06:	ee17 3a90 	vmov	r3, s15
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
*/

//gyro z read
	int gyro_z2, degree_z2;
	gyro_z2 = icm20689_read_gyro_z() * 10;
 8004d0c:	f000 fca8 	bl	8005660 <icm20689_read_gyro_z>
 8004d10:	eeb0 7a40 	vmov.f32	s14, s0
 8004d14:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d20:	ee17 3a90 	vmov	r3, s15
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
	degree_z2 = degree_z * 10;
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <main+0x174>)
 8004d28:	edd3 7a00 	vldr	s15, [r3]
 8004d2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d38:	ee17 3a90 	vmov	r3, s15
 8004d3c:	623b      	str	r3, [r7, #32]
	printf("gyro_z*10: %3d, degree*10: %3d\n", gyro_z2, degree_z2);
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d42:	480f      	ldr	r0, [pc, #60]	; (8004d80 <main+0x178>)
 8004d44:	f001 f89c 	bl	8005e80 <iprintf>
	HAL_Delay(5);
 8004d48:	2005      	movs	r0, #5
 8004d4a:	f7fc f8a1 	bl	8000e90 <HAL_Delay>
  {
 8004d4e:	e795      	b.n	8004c7c <main+0x74>
 8004d50:	08006ea4 	.word	0x08006ea4
 8004d54:	20000010 	.word	0x20000010
 8004d58:	20000134 	.word	0x20000134
 8004d5c:	200000f4 	.word	0x200000f4
 8004d60:	200008e0 	.word	0x200008e0
 8004d64:	20000090 	.word	0x20000090
 8004d68:	2000009c 	.word	0x2000009c
 8004d6c:	20000094 	.word	0x20000094
 8004d70:	200000a0 	.word	0x200000a0
 8004d74:	20000098 	.word	0x20000098
 8004d78:	200000a4 	.word	0x200000a4
 8004d7c:	200000d4 	.word	0x200000d4
 8004d80:	08006eb8 	.word	0x08006eb8

08004d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b094      	sub	sp, #80	; 0x50
 8004d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d8a:	f107 0320 	add.w	r3, r7, #32
 8004d8e:	2230      	movs	r2, #48	; 0x30
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 f86c 	bl	8005e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <SystemClock_Config+0xcc>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <SystemClock_Config+0xcc>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6413      	str	r3, [r2, #64]	; 0x40
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <SystemClock_Config+0xcc>)
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <SystemClock_Config+0xd0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <SystemClock_Config+0xd0>)
 8004dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <SystemClock_Config+0xd0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004de0:	2302      	movs	r3, #2
 8004de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004de4:	2301      	movs	r3, #1
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004de8:	2310      	movs	r3, #16
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dec:	2302      	movs	r3, #2
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004df0:	2300      	movs	r3, #0
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004df4:	2308      	movs	r3, #8
 8004df6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004df8:	23a8      	movs	r3, #168	; 0xa8
 8004dfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e00:	2304      	movs	r3, #4
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e04:	f107 0320 	add.w	r3, r7, #32
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fc fee3 	bl	8001bd4 <HAL_RCC_OscConfig>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004e14:	f000 fc60 	bl	80056d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e18:	230f      	movs	r3, #15
 8004e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e30:	f107 030c 	add.w	r3, r7, #12
 8004e34:	2105      	movs	r1, #5
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd f90e 	bl	8002058 <HAL_RCC_ClockConfig>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004e42:	f000 fc49 	bl	80056d8 <Error_Handler>
  }
}
 8004e46:	bf00      	nop
 8004e48:	3750      	adds	r7, #80	; 0x50
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000

08004e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e5e:	463b      	mov	r3, r7
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <MX_ADC1_Init+0x9c>)
 8004e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <MX_ADC1_Init+0xa0>)
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004eb8:	480d      	ldr	r0, [pc, #52]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004eba:	f7fc f80b 	bl	8000ed4 <HAL_ADC_Init>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ec4:	f000 fc08 	bl	80056d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4805      	ldr	r0, [pc, #20]	; (8004ef0 <MX_ADC1_Init+0x98>)
 8004eda:	f7fc f997 	bl	800120c <HAL_ADC_ConfigChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004ee4:	f000 fbf8 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000850 	.word	0x20000850
 8004ef4:	40012000 	.word	0x40012000
 8004ef8:	0f000001 	.word	0x0f000001

08004efc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <MX_SPI3_Init+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f30:	2218      	movs	r2, #24
 8004f32:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f48:	220a      	movs	r2, #10
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004f4c:	4804      	ldr	r0, [pc, #16]	; (8004f60 <MX_SPI3_Init+0x64>)
 8004f4e:	f7fd fa4b 	bl	80023e8 <HAL_SPI_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004f58:	f000 fbbe 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200007f8 	.word	0x200007f8
 8004f64:	40003c00 	.word	0x40003c00

08004f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08e      	sub	sp, #56	; 0x38
 8004f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f7c:	f107 0320 	add.w	r3, r7, #32
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	611a      	str	r2, [r3, #16]
 8004f94:	615a      	str	r2, [r3, #20]
 8004f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f98:	4b32      	ldr	r3, [pc, #200]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004fac:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fba:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fc0:	4828      	ldr	r0, [pc, #160]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fc2:	f7fd ff65 	bl	8002e90 <HAL_TIM_Base_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004fcc:	f000 fb84 	bl	80056d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4821      	ldr	r0, [pc, #132]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fde:	f7fe fab1 	bl	8003544 <HAL_TIM_ConfigClockSource>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004fe8:	f000 fb76 	bl	80056d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fec:	481d      	ldr	r0, [pc, #116]	; (8005064 <MX_TIM2_Init+0xfc>)
 8004fee:	f7fd ff9e 	bl	8002f2e <HAL_TIM_PWM_Init>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004ff8:	f000 fb6e 	bl	80056d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005004:	f107 0320 	add.w	r3, r7, #32
 8005008:	4619      	mov	r1, r3
 800500a:	4816      	ldr	r0, [pc, #88]	; (8005064 <MX_TIM2_Init+0xfc>)
 800500c:	f7fe fe89 	bl	8003d22 <HAL_TIMEx_MasterConfigSynchronization>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005016:	f000 fb5f 	bl	80056d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800501a:	2360      	movs	r3, #96	; 0x60
 800501c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	2200      	movs	r2, #0
 800502e:	4619      	mov	r1, r3
 8005030:	480c      	ldr	r0, [pc, #48]	; (8005064 <MX_TIM2_Init+0xfc>)
 8005032:	f7fe f9c1 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800503c:	f000 fb4c 	bl	80056d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	220c      	movs	r2, #12
 8005044:	4619      	mov	r1, r3
 8005046:	4807      	ldr	r0, [pc, #28]	; (8005064 <MX_TIM2_Init+0xfc>)
 8005048:	f7fe f9b6 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8005052:	f000 fb41 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005056:	4803      	ldr	r0, [pc, #12]	; (8005064 <MX_TIM2_Init+0xfc>)
 8005058:	f000 fcda 	bl	8005a10 <HAL_TIM_MspPostInit>

}
 800505c:	bf00      	nop
 800505e:	3738      	adds	r7, #56	; 0x38
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000924 	.word	0x20000924

08005068 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800506e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800507c:	f107 0320 	add.w	r3, r7, #32
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	60da      	str	r2, [r3, #12]
 8005092:	611a      	str	r2, [r3, #16]
 8005094:	615a      	str	r2, [r3, #20]
 8005096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005098:	4b2c      	ldr	r3, [pc, #176]	; (800514c <MX_TIM3_Init+0xe4>)
 800509a:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <MX_TIM3_Init+0xe8>)
 800509c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800509e:	4b2b      	ldr	r3, [pc, #172]	; (800514c <MX_TIM3_Init+0xe4>)
 80050a0:	2253      	movs	r2, #83	; 0x53
 80050a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <MX_TIM3_Init+0xe4>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80050aa:	4b28      	ldr	r3, [pc, #160]	; (800514c <MX_TIM3_Init+0xe4>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <MX_TIM3_Init+0xe4>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050b6:	4b25      	ldr	r3, [pc, #148]	; (800514c <MX_TIM3_Init+0xe4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050bc:	4823      	ldr	r0, [pc, #140]	; (800514c <MX_TIM3_Init+0xe4>)
 80050be:	f7fd fee7 	bl	8002e90 <HAL_TIM_Base_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80050c8:	f000 fb06 	bl	80056d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80050d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d6:	4619      	mov	r1, r3
 80050d8:	481c      	ldr	r0, [pc, #112]	; (800514c <MX_TIM3_Init+0xe4>)
 80050da:	f7fe fa33 	bl	8003544 <HAL_TIM_ConfigClockSource>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80050e4:	f000 faf8 	bl	80056d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80050e8:	4818      	ldr	r0, [pc, #96]	; (800514c <MX_TIM3_Init+0xe4>)
 80050ea:	f7fd ff20 	bl	8002f2e <HAL_TIM_PWM_Init>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80050f4:	f000 faf0 	bl	80056d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005100:	f107 0320 	add.w	r3, r7, #32
 8005104:	4619      	mov	r1, r3
 8005106:	4811      	ldr	r0, [pc, #68]	; (800514c <MX_TIM3_Init+0xe4>)
 8005108:	f7fe fe0b 	bl	8003d22 <HAL_TIMEx_MasterConfigSynchronization>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8005112:	f000 fae1 	bl	80056d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005116:	2360      	movs	r3, #96	; 0x60
 8005118:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	2204      	movs	r2, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4807      	ldr	r0, [pc, #28]	; (800514c <MX_TIM3_Init+0xe4>)
 800512e:	f7fe f943 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005138:	f000 face 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <MX_TIM3_Init+0xe4>)
 800513e:	f000 fc67 	bl	8005a10 <HAL_TIM_MspPostInit>

}
 8005142:	bf00      	nop
 8005144:	3738      	adds	r7, #56	; 0x38
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200007b8 	.word	0x200007b8
 8005150:	40000400 	.word	0x40000400

08005154 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fe84 	bl	8005e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <MX_TIM4_Init+0xa0>)
 8005172:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <MX_TIM4_Init+0xa4>)
 8005174:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <MX_TIM4_Init+0xa0>)
 8005178:	2200      	movs	r2, #0
 800517a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <MX_TIM4_Init+0xa0>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <MX_TIM4_Init+0xa0>)
 8005184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005188:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800518a:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <MX_TIM4_Init+0xa0>)
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <MX_TIM4_Init+0xa0>)
 8005192:	2200      	movs	r2, #0
 8005194:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005196:	2303      	movs	r3, #3
 8005198:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800519e:	2301      	movs	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80051aa:	2300      	movs	r3, #0
 80051ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051ae:	2301      	movs	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051b2:	2300      	movs	r3, #0
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80051ba:	f107 030c 	add.w	r3, r7, #12
 80051be:	4619      	mov	r1, r3
 80051c0:	480c      	ldr	r0, [pc, #48]	; (80051f4 <MX_TIM4_Init+0xa0>)
 80051c2:	f7fd ff27 	bl	8003014 <HAL_TIM_Encoder_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80051cc:	f000 fa84 	bl	80056d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d0:	2300      	movs	r3, #0
 80051d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4805      	ldr	r0, [pc, #20]	; (80051f4 <MX_TIM4_Init+0xa0>)
 80051de:	f7fe fda0 	bl	8003d22 <HAL_TIMEx_MasterConfigSynchronization>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80051e8:	f000 fa76 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80051ec:	bf00      	nop
 80051ee:	3730      	adds	r7, #48	; 0x30
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000134 	.word	0x20000134
 80051f8:	40000800 	.word	0x40000800

080051fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005202:	463b      	mov	r3, r7
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <MX_TIM6_Init+0x64>)
 800520c:	4a15      	ldr	r2, [pc, #84]	; (8005264 <MX_TIM6_Init+0x68>)
 800520e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <MX_TIM6_Init+0x64>)
 8005212:	2253      	movs	r2, #83	; 0x53
 8005214:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <MX_TIM6_Init+0x64>)
 8005218:	2200      	movs	r2, #0
 800521a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <MX_TIM6_Init+0x64>)
 800521e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005222:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <MX_TIM6_Init+0x64>)
 8005226:	2200      	movs	r2, #0
 8005228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800522a:	480d      	ldr	r0, [pc, #52]	; (8005260 <MX_TIM6_Init+0x64>)
 800522c:	f7fd fe30 	bl	8002e90 <HAL_TIM_Base_Init>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005236:	f000 fa4f 	bl	80056d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005242:	463b      	mov	r3, r7
 8005244:	4619      	mov	r1, r3
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <MX_TIM6_Init+0x64>)
 8005248:	f7fe fd6b 	bl	8003d22 <HAL_TIMEx_MasterConfigSynchronization>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005252:	f000 fa41 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200008e0 	.word	0x200008e0
 8005264:	40001000 	.word	0x40001000

08005268 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800526e:	f107 030c 	add.w	r3, r7, #12
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fdfa 	bl	8005e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <MX_TIM8_Init+0xa8>)
 8005286:	4a23      	ldr	r2, [pc, #140]	; (8005314 <MX_TIM8_Init+0xac>)
 8005288:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <MX_TIM8_Init+0xa8>)
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <MX_TIM8_Init+0xa8>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <MX_TIM8_Init+0xa8>)
 8005298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800529c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800529e:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <MX_TIM8_Init+0xa8>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <MX_TIM8_Init+0xa8>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <MX_TIM8_Init+0xa8>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052b0:	2303      	movs	r3, #3
 80052b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052c4:	2300      	movs	r3, #0
 80052c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052c8:	2301      	movs	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	4619      	mov	r1, r3
 80052da:	480d      	ldr	r0, [pc, #52]	; (8005310 <MX_TIM8_Init+0xa8>)
 80052dc:	f7fd fe9a 	bl	8003014 <HAL_TIM_Encoder_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80052e6:	f000 f9f7 	bl	80056d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4806      	ldr	r0, [pc, #24]	; (8005310 <MX_TIM8_Init+0xa8>)
 80052f8:	f7fe fd13 	bl	8003d22 <HAL_TIMEx_MasterConfigSynchronization>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005302:	f000 f9e9 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005306:	bf00      	nop
 8005308:	3730      	adds	r7, #48	; 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200000f4 	.word	0x200000f4
 8005314:	40010400 	.word	0x40010400

08005318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <MX_USART1_UART_Init+0x50>)
 8005320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005324:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800533e:	220c      	movs	r2, #12
 8005340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005350:	f7fe fd40 	bl	8003dd4 <HAL_UART_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800535a:	f000 f9bd 	bl	80056d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2000089c 	.word	0x2000089c
 8005368:	40011000 	.word	0x40011000

0800536c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005372:	f107 0314 	add.w	r3, r7, #20
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	605a      	str	r2, [r3, #4]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <MX_GPIO_Init+0x168>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <MX_GPIO_Init+0x168>)
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <MX_GPIO_Init+0x168>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b4c      	ldr	r3, [pc, #304]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	4a4b      	ldr	r2, [pc, #300]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6313      	str	r3, [r2, #48]	; 0x30
 80053ae:	4b49      	ldr	r3, [pc, #292]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4a44      	ldr	r2, [pc, #272]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053e0:	f043 0308 	orr.w	r3, r3, #8
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <MX_GPIO_Init+0x168>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80053f2:	2200      	movs	r2, #0
 80053f4:	f24e 213c 	movw	r1, #57916	; 0xe23c
 80053f8:	4837      	ldr	r0, [pc, #220]	; (80054d8 <MX_GPIO_Init+0x16c>)
 80053fa:	f7fc fbd1 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80053fe:	2200      	movs	r2, #0
 8005400:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8005404:	4835      	ldr	r0, [pc, #212]	; (80054dc <MX_GPIO_Init+0x170>)
 8005406:	f7fc fbcb 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800540a:	2200      	movs	r2, #0
 800540c:	f242 7103 	movw	r1, #9987	; 0x2703
 8005410:	4833      	ldr	r0, [pc, #204]	; (80054e0 <MX_GPIO_Init+0x174>)
 8005412:	f7fc fbc5 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8005416:	2200      	movs	r2, #0
 8005418:	2104      	movs	r1, #4
 800541a:	4832      	ldr	r0, [pc, #200]	; (80054e4 <MX_GPIO_Init+0x178>)
 800541c:	f7fc fbc0 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8005420:	f24e 233c 	movw	r3, #57916	; 0xe23c
 8005424:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005426:	2301      	movs	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005432:	f107 0314 	add.w	r3, r7, #20
 8005436:	4619      	mov	r1, r3
 8005438:	4827      	ldr	r0, [pc, #156]	; (80054d8 <MX_GPIO_Init+0x16c>)
 800543a:	f7fc fa17 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800543e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005444:	2301      	movs	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	4821      	ldr	r0, [pc, #132]	; (80054dc <MX_GPIO_Init+0x170>)
 8005458:	f7fc fa08 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800545c:	f242 7303 	movw	r3, #9987	; 0x2703
 8005460:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546a:	2300      	movs	r3, #0
 800546c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	4619      	mov	r1, r3
 8005474:	481a      	ldr	r0, [pc, #104]	; (80054e0 <MX_GPIO_Init+0x174>)
 8005476:	f7fc f9f9 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800547a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4814      	ldr	r0, [pc, #80]	; (80054e0 <MX_GPIO_Init+0x174>)
 8005490:	f7fc f9ec 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4619      	mov	r1, r3
 80054a8:	480c      	ldr	r0, [pc, #48]	; (80054dc <MX_GPIO_Init+0x170>)
 80054aa:	f7fc f9df 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054ae:	2304      	movs	r3, #4
 80054b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	4619      	mov	r1, r3
 80054c4:	4807      	ldr	r0, [pc, #28]	; (80054e4 <MX_GPIO_Init+0x178>)
 80054c6:	f7fc f9d1 	bl	800186c <HAL_GPIO_Init>

}
 80054ca:	bf00      	nop
 80054cc:	3728      	adds	r7, #40	; 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40020800 	.word	0x40020800
 80054dc:	40020000 	.word	0x40020000
 80054e0:	40020400 	.word	0x40020400
 80054e4:	40020c00 	.word	0x40020c00

080054e8 <get_adc_value>:
// ??��?��?定されたチャンネルのアナログ電圧値を取り�???��?��??��?��?
// 引数1???��?��??��?��hadc …… 電圧値を取り�???��?��すチャンネルが属すADCのHandler
// 引数2???��?��??��?��channel …… 電圧値を取り�???��?��すチャンネル
// 戻り�???��?��???��?��??��?��電圧値???��?��?12bit??��?��?解能???��?��?
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	609a      	str	r2, [r3, #8]
 80054fe:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8005504:	2301      	movs	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
  //sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
  //sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fe78 	bl	800120c <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    // AD変換を開始す??��?��?
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fb fd1d 	bl	8000f5c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   // AD変換終�?まで??��?��?機す??��?��?
 8005522:	2164      	movs	r1, #100	; 0x64
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7fb fddf 	bl	80010e8 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          // AD変換結果を取得す??��?��?
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fe60 	bl	80011f0 <HAL_ADC_GetValue>
 8005530:	4603      	mov	r3, r0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <icm20689_init>:
	printf("ADC CH2 Value is %d\r\n",aADCxConvertedData[2]);
	printf("ADC CH3 Value is %d\r\n",aADCxConvertedData[3]);
}
*/

void icm20689_init(void){
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); // wait start up
 8005542:	2064      	movs	r0, #100	; 0x64
 8005544:	f7fb fca4 	bl	8000e90 <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); // 1. read who am i
 8005548:	2075      	movs	r0, #117	; 0x75
 800554a:	f000 f82f 	bl	80055ac <read_byte>
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  printf("\r\n0x%x\r\n",who_am_i); // 2. check who am i value
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4619      	mov	r1, r3
 8005556:	4813      	ldr	r0, [pc, #76]	; (80055a4 <icm20689_init+0x68>)
 8005558:	f000 fc92 	bl	8005e80 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b98      	cmp	r3, #152	; 0x98
 8005560:	d003      	beq.n	800556a <icm20689_init+0x2e>
    while(1){
      printf( "gyro_error\r");
 8005562:	4811      	ldr	r0, [pc, #68]	; (80055a8 <icm20689_init+0x6c>)
 8005564:	f000 fc8c 	bl	8005e80 <iprintf>
 8005568:	e7fb      	b.n	8005562 <icm20689_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800556a:	2032      	movs	r0, #50	; 0x32
 800556c:	f7fb fc90 	bl	8000e90 <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); // 3. set pwr_might
 8005570:	2100      	movs	r1, #0
 8005572:	206b      	movs	r0, #107	; 0x6b
 8005574:	f000 f846 	bl	8005604 <write_byte>

  HAL_Delay(50);
 8005578:	2032      	movs	r0, #50	; 0x32
 800557a:	f7fb fc89 	bl	8000e90 <HAL_Delay>
  write_byte(CONFIG, 0x00); // 4. set config
 800557e:	2100      	movs	r1, #0
 8005580:	201a      	movs	r0, #26
 8005582:	f000 f83f 	bl	8005604 <write_byte>

  HAL_Delay(50);
 8005586:	2032      	movs	r0, #50	; 0x32
 8005588:	f7fb fc82 	bl	8000e90 <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); // 5. set gyro config
 800558c:	2118      	movs	r1, #24
 800558e:	201b      	movs	r0, #27
 8005590:	f000 f838 	bl	8005604 <write_byte>

  HAL_Delay(50);
 8005594:	2032      	movs	r0, #50	; 0x32
 8005596:	f7fb fc7b 	bl	8000e90 <HAL_Delay>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08006ed8 	.word	0x08006ed8
 80055a8:	08006ee4 	.word	0x08006ee4

080055ac <read_byte>:

uint8_t read_byte(uint8_t reg){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); //cs = Low;
 80055b6:	2200      	movs	r2, #0
 80055b8:	2104      	movs	r1, #4
 80055ba:	4810      	ldr	r0, [pc, #64]	; (80055fc <read_byte+0x50>)
 80055bc:	f7fc faf0 	bl	8001ba0 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 80055ca:	f107 010f 	add.w	r1, r7, #15
 80055ce:	2364      	movs	r3, #100	; 0x64
 80055d0:	2201      	movs	r2, #1
 80055d2:	480b      	ldr	r0, [pc, #44]	; (8005600 <read_byte+0x54>)
 80055d4:	f7fc ff6c 	bl	80024b0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); // read 1byte(read data)
 80055d8:	f107 010e 	add.w	r1, r7, #14
 80055dc:	2364      	movs	r3, #100	; 0x64
 80055de:	2201      	movs	r2, #1
 80055e0:	4807      	ldr	r0, [pc, #28]	; (8005600 <read_byte+0x54>)
 80055e2:	f7fd f899 	bl	8002718 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  //cs = High;
 80055e6:	2201      	movs	r2, #1
 80055e8:	2104      	movs	r1, #4
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <read_byte+0x50>)
 80055ec:	f7fc fad8 	bl	8001ba0 <HAL_GPIO_WritePin>
  return val;
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40020c00 	.word	0x40020c00
 8005600:	200007f8 	.word	0x200007f8

08005604 <write_byte>:

void write_byte(uint8_t reg, uint8_t val){
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	460a      	mov	r2, r1
 800560e:	71fb      	strb	r3, [r7, #7]
 8005610:	4613      	mov	r3, r2
 8005612:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	b2db      	uxtb	r3, r3
 800561c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); // cs = Low;
 800561e:	2200      	movs	r2, #0
 8005620:	2104      	movs	r1, #4
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <write_byte+0x50>)
 8005624:	f7fc fabc 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 8005628:	f107 010f 	add.w	r1, r7, #15
 800562c:	2364      	movs	r3, #100	; 0x64
 800562e:	2201      	movs	r2, #1
 8005630:	4809      	ldr	r0, [pc, #36]	; (8005658 <write_byte+0x54>)
 8005632:	f7fc ff3d 	bl	80024b0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); // read 1byte(write data)
 8005636:	1db9      	adds	r1, r7, #6
 8005638:	2364      	movs	r3, #100	; 0x64
 800563a:	2201      	movs	r2, #1
 800563c:	4806      	ldr	r0, [pc, #24]	; (8005658 <write_byte+0x54>)
 800563e:	f7fc ff37 	bl	80024b0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); // cs = High;
 8005642:	2201      	movs	r2, #1
 8005644:	2104      	movs	r1, #4
 8005646:	4803      	ldr	r0, [pc, #12]	; (8005654 <write_byte+0x50>)
 8005648:	f7fc faaa 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40020c00 	.word	0x40020c00
 8005658:	200007f8 	.word	0x200007f8
 800565c:	00000000 	.word	0x00000000

08005660 <icm20689_read_gyro_z>:

float icm20689_read_gyro_z(void){
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8005666:	2047      	movs	r0, #71	; 0x47
 8005668:	f7ff ffa0 	bl	80055ac <read_byte>
 800566c:	4603      	mov	r3, r0
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	b21c      	sxth	r4, r3
 8005672:	2048      	movs	r0, #72	; 0x48
 8005674:	f7ff ff9a 	bl	80055ac <read_byte>
 8005678:	4603      	mov	r3, r0
 800567a:	b21b      	sxth	r3, r3
 800567c:	4323      	orrs	r3, r4
 800567e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_z / GYRO_FACTOR + 1.15); // dps to deg/sec
 8005680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005684:	4618      	mov	r0, r3
 8005686:	f7fa ff45 	bl	8000514 <__aeabi_i2d>
 800568a:	a30f      	add	r3, pc, #60	; (adr r3, 80056c8 <icm20689_read_gyro_z+0x68>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fb f8d4 	bl	800083c <__aeabi_ddiv>
 8005694:	4603      	mov	r3, r0
 8005696:	460c      	mov	r4, r1
 8005698:	4618      	mov	r0, r3
 800569a:	4621      	mov	r1, r4
 800569c:	a30c      	add	r3, pc, #48	; (adr r3, 80056d0 <icm20689_read_gyro_z+0x70>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa fdeb 	bl	800027c <__adddf3>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	4618      	mov	r0, r3
 80056ac:	4621      	mov	r1, r4
 80056ae:	f7fb f9ad 	bl	8000a0c <__aeabi_d2f>
 80056b2:	4603      	mov	r3, r0
 80056b4:	603b      	str	r3, [r7, #0]
  return omega;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	ee07 3a90 	vmov	s15, r3
}
 80056bc:	eeb0 0a67 	vmov.f32	s0, s15
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}
 80056c6:	bf00      	nop
 80056c8:	66666666 	.word	0x66666666
 80056cc:	40306666 	.word	0x40306666
 80056d0:	66666666 	.word	0x66666666
 80056d4:	3ff26666 	.word	0x3ff26666

080056d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_MspInit+0x4c>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <HAL_MspInit+0x4c>)
 80056f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056fc:	6453      	str	r3, [r2, #68]	; 0x44
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <HAL_MspInit+0x4c>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_MspInit+0x4c>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	4a08      	ldr	r2, [pc, #32]	; (8005734 <HAL_MspInit+0x4c>)
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005718:	6413      	str	r3, [r2, #64]	; 0x40
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_MspInit+0x4c>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800

08005738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_ADC_MspInit+0x7c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d127      	bne.n	80057aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6313      	str	r3, [r2, #48]	; 0x30
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_ADC_MspInit+0x80>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005792:	230f      	movs	r3, #15
 8005794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005796:	2303      	movs	r3, #3
 8005798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	4619      	mov	r1, r3
 80057a4:	4805      	ldr	r0, [pc, #20]	; (80057bc <HAL_ADC_MspInit+0x84>)
 80057a6:	f7fc f861 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80057aa:	bf00      	nop
 80057ac:	3728      	adds	r7, #40	; 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40012000 	.word	0x40012000
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40020000 	.word	0x40020000

080057c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	609a      	str	r2, [r3, #8]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_SPI_MspInit+0x84>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d12c      	bne.n	800583c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_SPI_MspInit+0x88>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_SPI_MspInit+0x88>)
 80057ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f0:	6413      	str	r3, [r2, #64]	; 0x40
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <HAL_SPI_MspInit+0x88>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <HAL_SPI_MspInit+0x88>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <HAL_SPI_MspInit+0x88>)
 8005808:	f043 0304 	orr.w	r3, r3, #4
 800580c:	6313      	str	r3, [r2, #48]	; 0x30
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <HAL_SPI_MspInit+0x88>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800581a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800581e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005820:	2302      	movs	r3, #2
 8005822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005828:	2303      	movs	r3, #3
 800582a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800582c:	2306      	movs	r3, #6
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	4619      	mov	r1, r3
 8005836:	4805      	ldr	r0, [pc, #20]	; (800584c <HAL_SPI_MspInit+0x8c>)
 8005838:	f7fc f818 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800583c:	bf00      	nop
 800583e:	3728      	adds	r7, #40	; 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40003c00 	.word	0x40003c00
 8005848:	40023800 	.word	0x40023800
 800584c:	40020800 	.word	0x40020800

08005850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800587e:	e036      	b.n	80058ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_TIM_Base_MspInit+0xac>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d116      	bne.n	80058b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80058a6:	2200      	movs	r2, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	201d      	movs	r0, #29
 80058ac:	f7fb ffa7 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80058b0:	201d      	movs	r0, #29
 80058b2:	f7fb ffc0 	bl	8001836 <HAL_NVIC_EnableIRQ>
}
 80058b6:	e01a      	b.n	80058ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a10      	ldr	r2, [pc, #64]	; (8005900 <HAL_TIM_Base_MspInit+0xb0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d115      	bne.n	80058ee <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 80058cc:	f043 0310 	orr.w	r3, r3, #16
 80058d0:	6413      	str	r3, [r2, #64]	; 0x40
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_TIM_Base_MspInit+0xa8>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	2036      	movs	r0, #54	; 0x36
 80058e4:	f7fb ff8b 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80058e8:	2036      	movs	r0, #54	; 0x36
 80058ea:	f7fb ffa4 	bl	8001836 <HAL_NVIC_EnableIRQ>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40000400 	.word	0x40000400
 8005900:	40001000 	.word	0x40001000

08005904 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08c      	sub	sp, #48	; 0x30
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590c:	f107 031c 	add.w	r3, r7, #28
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a36      	ldr	r2, [pc, #216]	; (80059fc <HAL_TIM_Encoder_MspInit+0xf8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d134      	bne.n	8005990 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005930:	f043 0304 	orr.w	r3, r3, #4
 8005934:	6413      	str	r3, [r2, #64]	; 0x40
 8005936:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	6313      	str	r3, [r2, #48]	; 0x30
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800595e:	23c0      	movs	r3, #192	; 0xc0
 8005960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005962:	2302      	movs	r3, #2
 8005964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005966:	2300      	movs	r3, #0
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800596e:	2302      	movs	r3, #2
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005972:	f107 031c 	add.w	r3, r7, #28
 8005976:	4619      	mov	r1, r3
 8005978:	4822      	ldr	r0, [pc, #136]	; (8005a04 <HAL_TIM_Encoder_MspInit+0x100>)
 800597a:	f7fb ff77 	bl	800186c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	2100      	movs	r1, #0
 8005982:	201e      	movs	r0, #30
 8005984:	f7fb ff3b 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005988:	201e      	movs	r0, #30
 800598a:	f7fb ff54 	bl	8001836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800598e:	e030      	b.n	80059f2 <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_TIM_Encoder_MspInit+0x104>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d12b      	bne.n	80059f2 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059a4:	f043 0302 	orr.w	r3, r3, #2
 80059a8:	6453      	str	r3, [r2, #68]	; 0x44
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	4a10      	ldr	r2, [pc, #64]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059c0:	f043 0304 	orr.w	r3, r3, #4
 80059c4:	6313      	str	r3, [r2, #48]	; 0x30
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xfc>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059d2:	23c0      	movs	r3, #192	; 0xc0
 80059d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d6:	2302      	movs	r3, #2
 80059d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059de:	2300      	movs	r3, #0
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80059e2:	2303      	movs	r3, #3
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	4619      	mov	r1, r3
 80059ec:	4807      	ldr	r0, [pc, #28]	; (8005a0c <HAL_TIM_Encoder_MspInit+0x108>)
 80059ee:	f7fb ff3d 	bl	800186c <HAL_GPIO_Init>
}
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	; 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40020400 	.word	0x40020400
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40020800 	.word	0x40020800

08005a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d13d      	bne.n	8005aae <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	4b31      	ldr	r3, [pc, #196]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	4a30      	ldr	r2, [pc, #192]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6313      	str	r3, [r2, #48]	; 0x30
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	4a29      	ldr	r2, [pc, #164]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a76:	2300      	movs	r3, #0
 8005a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	4619      	mov	r1, r3
 8005a84:	481e      	ldr	r0, [pc, #120]	; (8005b00 <HAL_TIM_MspPostInit+0xf0>)
 8005a86:	f7fb fef1 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a90:	2302      	movs	r3, #2
 8005a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa0:	f107 0314 	add.w	r3, r7, #20
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4817      	ldr	r0, [pc, #92]	; (8005b04 <HAL_TIM_MspPostInit+0xf4>)
 8005aa8:	f7fb fee0 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005aac:	e022      	b.n	8005af4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <HAL_TIM_MspPostInit+0xf8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d11d      	bne.n	8005af4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005ac2:	f043 0302 	orr.w	r3, r3, #2
 8005ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <HAL_TIM_MspPostInit+0xec>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	4619      	mov	r1, r3
 8005aee:	4805      	ldr	r0, [pc, #20]	; (8005b04 <HAL_TIM_MspPostInit+0xf4>)
 8005af0:	f7fb febc 	bl	800186c <HAL_GPIO_Init>
}
 8005af4:	bf00      	nop
 8005af6:	3728      	adds	r7, #40	; 0x28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40020000 	.word	0x40020000
 8005b04:	40020400 	.word	0x40020400
 8005b08:	40000400 	.word	0x40000400

08005b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_UART_MspInit+0x84>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d12c      	bne.n	8005b88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b38:	f043 0310 	orr.w	r3, r3, #16
 8005b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	4a10      	ldr	r2, [pc, #64]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5a:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <HAL_UART_MspInit+0x88>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b74:	2303      	movs	r3, #3
 8005b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b78:	2307      	movs	r3, #7
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4619      	mov	r1, r3
 8005b82:	4805      	ldr	r0, [pc, #20]	; (8005b98 <HAL_UART_MspInit+0x8c>)
 8005b84:	f7fb fe72 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005b88:	bf00      	nop
 8005b8a:	3728      	adds	r7, #40	; 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40011000 	.word	0x40011000
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40020000 	.word	0x40020000

08005b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bae:	e7fe      	b.n	8005bae <HardFault_Handler+0x4>

08005bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bb4:	e7fe      	b.n	8005bb4 <MemManage_Handler+0x4>

08005bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bba:	e7fe      	b.n	8005bba <BusFault_Handler+0x4>

08005bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bc0:	e7fe      	b.n	8005bc0 <UsageFault_Handler+0x4>

08005bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005be2:	bf00      	nop
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bf0:	f7fb f92e 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bf4:	bf00      	nop
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005c18:	4802      	ldr	r0, [pc, #8]	; (8005c24 <TIM6_DAC_IRQHandler+0x10>)
 8005c1a:	f7fd fac4 	bl	80031a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200008e0 	.word	0x200008e0

08005c28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e00a      	b.n	8005c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c3a:	f3af 8000 	nop.w
 8005c3e:	4601      	mov	r1, r0
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	60ba      	str	r2, [r7, #8]
 8005c46:	b2ca      	uxtb	r2, r1
 8005c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dbf0      	blt.n	8005c3a <_read+0x12>
	}

return len;
 8005c58:	687b      	ldr	r3, [r7, #4]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e009      	b.n	8005c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	60ba      	str	r2, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fbe3 	bl	8004448 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	3301      	adds	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dbf1      	blt.n	8005c74 <_write+0x12>
	}
	return len;
 8005c90:	687b      	ldr	r3, [r7, #4]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_close>:

int _close(int file)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_isatty>:

int _isatty(int file)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8005cda:	2301      	movs	r3, #1
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <_sbrk+0x50>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <_sbrk+0x16>
		heap_end = &end;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <_sbrk+0x50>)
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <_sbrk+0x54>)
 8005d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <_sbrk+0x50>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <_sbrk+0x50>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	466a      	mov	r2, sp
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d907      	bls.n	8005d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005d2e:	f000 f875 	bl	8005e1c <__errno>
 8005d32:	4602      	mov	r2, r0
 8005d34:	230c      	movs	r3, #12
 8005d36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	e006      	b.n	8005d4c <_sbrk+0x48>
	}

	heap_end += incr;
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <_sbrk+0x50>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	4a03      	ldr	r2, [pc, #12]	; (8005d54 <_sbrk+0x50>)
 8005d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200000e0 	.word	0x200000e0
 8005d58:	20000978 	.word	0x20000978

08005d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d60:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <SystemInit+0x60>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <SystemInit+0x60>)
 8005d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005d70:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <SystemInit+0x64>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <SystemInit+0x64>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <SystemInit+0x64>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <SystemInit+0x64>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <SystemInit+0x64>)
 8005d88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <SystemInit+0x64>)
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <SystemInit+0x68>)
 8005d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <SystemInit+0x64>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <SystemInit+0x64>)
 8005d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <SystemInit+0x64>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <SystemInit+0x60>)
 8005dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005db0:	609a      	str	r2, [r3, #8]
#endif
}
 8005db2:	bf00      	nop
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000ed00 	.word	0xe000ed00
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	24003010 	.word	0x24003010

08005dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005dce:	e003      	b.n	8005dd8 <LoopCopyDataInit>

08005dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005dd6:	3104      	adds	r1, #4

08005dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005dd8:	480b      	ldr	r0, [pc, #44]	; (8005e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005de0:	d3f6      	bcc.n	8005dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8005de2:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005de4:	e002      	b.n	8005dec <LoopFillZerobss>

08005de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005de8:	f842 3b04 	str.w	r3, [r2], #4

08005dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005df0:	d3f9      	bcc.n	8005de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005df2:	f7ff ffb3 	bl	8005d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005df6:	f000 f817 	bl	8005e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfa:	f7fe ff05 	bl	8004c08 <main>
  bx  lr    
 8005dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e00:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8005e04:	08006fb0 	.word	0x08006fb0
  ldr  r0, =_sdata
 8005e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e0c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8005e10:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005e14:	20000974 	.word	0x20000974

08005e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e18:	e7fe      	b.n	8005e18 <ADC_IRQHandler>
	...

08005e1c <__errno>:
 8005e1c:	4b01      	ldr	r3, [pc, #4]	; (8005e24 <__errno+0x8>)
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000010 	.word	0x20000010

08005e28 <__libc_init_array>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	4e0d      	ldr	r6, [pc, #52]	; (8005e60 <__libc_init_array+0x38>)
 8005e2c:	4c0d      	ldr	r4, [pc, #52]	; (8005e64 <__libc_init_array+0x3c>)
 8005e2e:	1ba4      	subs	r4, r4, r6
 8005e30:	10a4      	asrs	r4, r4, #2
 8005e32:	2500      	movs	r5, #0
 8005e34:	42a5      	cmp	r5, r4
 8005e36:	d109      	bne.n	8005e4c <__libc_init_array+0x24>
 8005e38:	4e0b      	ldr	r6, [pc, #44]	; (8005e68 <__libc_init_array+0x40>)
 8005e3a:	4c0c      	ldr	r4, [pc, #48]	; (8005e6c <__libc_init_array+0x44>)
 8005e3c:	f001 f826 	bl	8006e8c <_init>
 8005e40:	1ba4      	subs	r4, r4, r6
 8005e42:	10a4      	asrs	r4, r4, #2
 8005e44:	2500      	movs	r5, #0
 8005e46:	42a5      	cmp	r5, r4
 8005e48:	d105      	bne.n	8005e56 <__libc_init_array+0x2e>
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e50:	4798      	blx	r3
 8005e52:	3501      	adds	r5, #1
 8005e54:	e7ee      	b.n	8005e34 <__libc_init_array+0xc>
 8005e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e5a:	4798      	blx	r3
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	e7f2      	b.n	8005e46 <__libc_init_array+0x1e>
 8005e60:	08006fa8 	.word	0x08006fa8
 8005e64:	08006fa8 	.word	0x08006fa8
 8005e68:	08006fa8 	.word	0x08006fa8
 8005e6c:	08006fac 	.word	0x08006fac

08005e70 <memset>:
 8005e70:	4402      	add	r2, r0
 8005e72:	4603      	mov	r3, r0
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d100      	bne.n	8005e7a <memset+0xa>
 8005e78:	4770      	bx	lr
 8005e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e7e:	e7f9      	b.n	8005e74 <memset+0x4>

08005e80 <iprintf>:
 8005e80:	b40f      	push	{r0, r1, r2, r3}
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <iprintf+0x2c>)
 8005e84:	b513      	push	{r0, r1, r4, lr}
 8005e86:	681c      	ldr	r4, [r3, #0]
 8005e88:	b124      	cbz	r4, 8005e94 <iprintf+0x14>
 8005e8a:	69a3      	ldr	r3, [r4, #24]
 8005e8c:	b913      	cbnz	r3, 8005e94 <iprintf+0x14>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fad8 	bl	8006444 <__sinit>
 8005e94:	ab05      	add	r3, sp, #20
 8005e96:	9a04      	ldr	r2, [sp, #16]
 8005e98:	68a1      	ldr	r1, [r4, #8]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 fc99 	bl	80067d4 <_vfiprintf_r>
 8005ea2:	b002      	add	sp, #8
 8005ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	20000010 	.word	0x20000010

08005eb0 <_puts_r>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <_puts_r+0x10>
 8005eb8:	6983      	ldr	r3, [r0, #24]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_puts_r+0x10>
 8005ebc:	f000 fac2 	bl	8006444 <__sinit>
 8005ec0:	69ab      	ldr	r3, [r5, #24]
 8005ec2:	68ac      	ldr	r4, [r5, #8]
 8005ec4:	b913      	cbnz	r3, 8005ecc <_puts_r+0x1c>
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fabc 	bl	8006444 <__sinit>
 8005ecc:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <_puts_r+0xac>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d117      	bne.n	8005f02 <_puts_r+0x52>
 8005ed2:	686c      	ldr	r4, [r5, #4]
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	071b      	lsls	r3, r3, #28
 8005ed8:	d51d      	bpl.n	8005f16 <_puts_r+0x66>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	b1db      	cbz	r3, 8005f16 <_puts_r+0x66>
 8005ede:	3e01      	subs	r6, #1
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	b9e9      	cbnz	r1, 8005f28 <_puts_r+0x78>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da2e      	bge.n	8005f4e <_puts_r+0x9e>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	210a      	movs	r1, #10
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 f8f5 	bl	80060e4 <__swbuf_r>
 8005efa:	3001      	adds	r0, #1
 8005efc:	d011      	beq.n	8005f22 <_puts_r+0x72>
 8005efe:	200a      	movs	r0, #10
 8005f00:	e011      	b.n	8005f26 <_puts_r+0x76>
 8005f02:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <_puts_r+0xb0>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	d101      	bne.n	8005f0c <_puts_r+0x5c>
 8005f08:	68ac      	ldr	r4, [r5, #8]
 8005f0a:	e7e3      	b.n	8005ed4 <_puts_r+0x24>
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <_puts_r+0xb4>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	bf08      	it	eq
 8005f12:	68ec      	ldreq	r4, [r5, #12]
 8005f14:	e7de      	b.n	8005ed4 <_puts_r+0x24>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f935 	bl	8006188 <__swsetup_r>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0dd      	beq.n	8005ede <_puts_r+0x2e>
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da04      	bge.n	8005f36 <_puts_r+0x86>
 8005f2c:	69a2      	ldr	r2, [r4, #24]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	dc06      	bgt.n	8005f40 <_puts_r+0x90>
 8005f32:	290a      	cmp	r1, #10
 8005f34:	d004      	beq.n	8005f40 <_puts_r+0x90>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	7019      	strb	r1, [r3, #0]
 8005f3e:	e7cf      	b.n	8005ee0 <_puts_r+0x30>
 8005f40:	4622      	mov	r2, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f8ce 	bl	80060e4 <__swbuf_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d1c9      	bne.n	8005ee0 <_puts_r+0x30>
 8005f4c:	e7e9      	b.n	8005f22 <_puts_r+0x72>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	200a      	movs	r0, #10
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	7018      	strb	r0, [r3, #0]
 8005f58:	e7e5      	b.n	8005f26 <_puts_r+0x76>
 8005f5a:	bf00      	nop
 8005f5c:	08006f2c 	.word	0x08006f2c
 8005f60:	08006f4c 	.word	0x08006f4c
 8005f64:	08006f0c 	.word	0x08006f0c

08005f68 <puts>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <puts+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f7ff bf9f 	b.w	8005eb0 <_puts_r>
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010

08005f78 <setbuf>:
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7e:	bf0c      	ite	eq
 8005f80:	2202      	moveq	r2, #2
 8005f82:	2200      	movne	r2, #0
 8005f84:	f000 b800 	b.w	8005f88 <setvbuf>

08005f88 <setvbuf>:
 8005f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <setvbuf+0x14c>)
 8005f90:	681e      	ldr	r6, [r3, #0]
 8005f92:	4604      	mov	r4, r0
 8005f94:	460f      	mov	r7, r1
 8005f96:	4690      	mov	r8, r2
 8005f98:	b126      	cbz	r6, 8005fa4 <setvbuf+0x1c>
 8005f9a:	69b3      	ldr	r3, [r6, #24]
 8005f9c:	b913      	cbnz	r3, 8005fa4 <setvbuf+0x1c>
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 fa50 	bl	8006444 <__sinit>
 8005fa4:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <setvbuf+0x150>)
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d152      	bne.n	8006050 <setvbuf+0xc8>
 8005faa:	6874      	ldr	r4, [r6, #4]
 8005fac:	f1b8 0f02 	cmp.w	r8, #2
 8005fb0:	d006      	beq.n	8005fc0 <setvbuf+0x38>
 8005fb2:	f1b8 0f01 	cmp.w	r8, #1
 8005fb6:	f200 8089 	bhi.w	80060cc <setvbuf+0x144>
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	f2c0 8086 	blt.w	80060cc <setvbuf+0x144>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f9d4 	bl	8006370 <_fflush_r>
 8005fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fca:	b141      	cbz	r1, 8005fde <setvbuf+0x56>
 8005fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	d002      	beq.n	8005fda <setvbuf+0x52>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 fb2b 	bl	8006630 <_free_r>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61a3      	str	r3, [r4, #24]
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	d503      	bpl.n	8005ff2 <setvbuf+0x6a>
 8005fea:	6921      	ldr	r1, [r4, #16]
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 fb1f 	bl	8006630 <_free_r>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	f1b8 0f02 	cmp.w	r8, #2
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	d05d      	beq.n	80060c0 <setvbuf+0x138>
 8006004:	ab01      	add	r3, sp, #4
 8006006:	466a      	mov	r2, sp
 8006008:	4621      	mov	r1, r4
 800600a:	4630      	mov	r0, r6
 800600c:	f000 faa4 	bl	8006558 <__swhatbuf_r>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	4318      	orrs	r0, r3
 8006014:	81a0      	strh	r0, [r4, #12]
 8006016:	bb2d      	cbnz	r5, 8006064 <setvbuf+0xdc>
 8006018:	9d00      	ldr	r5, [sp, #0]
 800601a:	4628      	mov	r0, r5
 800601c:	f000 fb00 	bl	8006620 <malloc>
 8006020:	4607      	mov	r7, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d14e      	bne.n	80060c4 <setvbuf+0x13c>
 8006026:	f8dd 9000 	ldr.w	r9, [sp]
 800602a:	45a9      	cmp	r9, r5
 800602c:	d13c      	bne.n	80060a8 <setvbuf+0x120>
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	f043 0302 	orr.w	r3, r3, #2
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	2300      	movs	r3, #0
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	6123      	str	r3, [r4, #16]
 8006046:	2301      	movs	r3, #1
 8006048:	6163      	str	r3, [r4, #20]
 800604a:	b003      	add	sp, #12
 800604c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <setvbuf+0x154>)
 8006052:	429c      	cmp	r4, r3
 8006054:	d101      	bne.n	800605a <setvbuf+0xd2>
 8006056:	68b4      	ldr	r4, [r6, #8]
 8006058:	e7a8      	b.n	8005fac <setvbuf+0x24>
 800605a:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <setvbuf+0x158>)
 800605c:	429c      	cmp	r4, r3
 800605e:	bf08      	it	eq
 8006060:	68f4      	ldreq	r4, [r6, #12]
 8006062:	e7a3      	b.n	8005fac <setvbuf+0x24>
 8006064:	2f00      	cmp	r7, #0
 8006066:	d0d8      	beq.n	800601a <setvbuf+0x92>
 8006068:	69b3      	ldr	r3, [r6, #24]
 800606a:	b913      	cbnz	r3, 8006072 <setvbuf+0xea>
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f9e9 	bl	8006444 <__sinit>
 8006072:	f1b8 0f01 	cmp.w	r8, #1
 8006076:	bf08      	it	eq
 8006078:	89a3      	ldrheq	r3, [r4, #12]
 800607a:	6027      	str	r7, [r4, #0]
 800607c:	bf04      	itt	eq
 800607e:	f043 0301 	orreq.w	r3, r3, #1
 8006082:	81a3      	strheq	r3, [r4, #12]
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f013 0008 	ands.w	r0, r3, #8
 800608a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800608e:	d01b      	beq.n	80060c8 <setvbuf+0x140>
 8006090:	f013 0001 	ands.w	r0, r3, #1
 8006094:	bf18      	it	ne
 8006096:	426d      	negne	r5, r5
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	bf1d      	ittte	ne
 800609e:	60a3      	strne	r3, [r4, #8]
 80060a0:	61a5      	strne	r5, [r4, #24]
 80060a2:	4618      	movne	r0, r3
 80060a4:	60a5      	streq	r5, [r4, #8]
 80060a6:	e7d0      	b.n	800604a <setvbuf+0xc2>
 80060a8:	4648      	mov	r0, r9
 80060aa:	f000 fab9 	bl	8006620 <malloc>
 80060ae:	4607      	mov	r7, r0
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0bc      	beq.n	800602e <setvbuf+0xa6>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	464d      	mov	r5, r9
 80060be:	e7d3      	b.n	8006068 <setvbuf+0xe0>
 80060c0:	2000      	movs	r0, #0
 80060c2:	e7b6      	b.n	8006032 <setvbuf+0xaa>
 80060c4:	46a9      	mov	r9, r5
 80060c6:	e7f5      	b.n	80060b4 <setvbuf+0x12c>
 80060c8:	60a0      	str	r0, [r4, #8]
 80060ca:	e7be      	b.n	800604a <setvbuf+0xc2>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	e7bb      	b.n	800604a <setvbuf+0xc2>
 80060d2:	bf00      	nop
 80060d4:	20000010 	.word	0x20000010
 80060d8:	08006f2c 	.word	0x08006f2c
 80060dc:	08006f4c 	.word	0x08006f4c
 80060e0:	08006f0c 	.word	0x08006f0c

080060e4 <__swbuf_r>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	460e      	mov	r6, r1
 80060e8:	4614      	mov	r4, r2
 80060ea:	4605      	mov	r5, r0
 80060ec:	b118      	cbz	r0, 80060f6 <__swbuf_r+0x12>
 80060ee:	6983      	ldr	r3, [r0, #24]
 80060f0:	b90b      	cbnz	r3, 80060f6 <__swbuf_r+0x12>
 80060f2:	f000 f9a7 	bl	8006444 <__sinit>
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <__swbuf_r+0x98>)
 80060f8:	429c      	cmp	r4, r3
 80060fa:	d12a      	bne.n	8006152 <__swbuf_r+0x6e>
 80060fc:	686c      	ldr	r4, [r5, #4]
 80060fe:	69a3      	ldr	r3, [r4, #24]
 8006100:	60a3      	str	r3, [r4, #8]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	071a      	lsls	r2, r3, #28
 8006106:	d52e      	bpl.n	8006166 <__swbuf_r+0x82>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	b363      	cbz	r3, 8006166 <__swbuf_r+0x82>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	6963      	ldr	r3, [r4, #20]
 8006114:	b2f6      	uxtb	r6, r6
 8006116:	4283      	cmp	r3, r0
 8006118:	4637      	mov	r7, r6
 800611a:	dc04      	bgt.n	8006126 <__swbuf_r+0x42>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f926 	bl	8006370 <_fflush_r>
 8006124:	bb28      	cbnz	r0, 8006172 <__swbuf_r+0x8e>
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	3b01      	subs	r3, #1
 800612a:	60a3      	str	r3, [r4, #8]
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	6022      	str	r2, [r4, #0]
 8006132:	701e      	strb	r6, [r3, #0]
 8006134:	6963      	ldr	r3, [r4, #20]
 8006136:	3001      	adds	r0, #1
 8006138:	4283      	cmp	r3, r0
 800613a:	d004      	beq.n	8006146 <__swbuf_r+0x62>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	07db      	lsls	r3, r3, #31
 8006140:	d519      	bpl.n	8006176 <__swbuf_r+0x92>
 8006142:	2e0a      	cmp	r6, #10
 8006144:	d117      	bne.n	8006176 <__swbuf_r+0x92>
 8006146:	4621      	mov	r1, r4
 8006148:	4628      	mov	r0, r5
 800614a:	f000 f911 	bl	8006370 <_fflush_r>
 800614e:	b190      	cbz	r0, 8006176 <__swbuf_r+0x92>
 8006150:	e00f      	b.n	8006172 <__swbuf_r+0x8e>
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <__swbuf_r+0x9c>)
 8006154:	429c      	cmp	r4, r3
 8006156:	d101      	bne.n	800615c <__swbuf_r+0x78>
 8006158:	68ac      	ldr	r4, [r5, #8]
 800615a:	e7d0      	b.n	80060fe <__swbuf_r+0x1a>
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <__swbuf_r+0xa0>)
 800615e:	429c      	cmp	r4, r3
 8006160:	bf08      	it	eq
 8006162:	68ec      	ldreq	r4, [r5, #12]
 8006164:	e7cb      	b.n	80060fe <__swbuf_r+0x1a>
 8006166:	4621      	mov	r1, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f000 f80d 	bl	8006188 <__swsetup_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	d0cc      	beq.n	800610c <__swbuf_r+0x28>
 8006172:	f04f 37ff 	mov.w	r7, #4294967295
 8006176:	4638      	mov	r0, r7
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	bf00      	nop
 800617c:	08006f2c 	.word	0x08006f2c
 8006180:	08006f4c 	.word	0x08006f4c
 8006184:	08006f0c 	.word	0x08006f0c

08006188 <__swsetup_r>:
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <__swsetup_r+0xcc>)
 800618a:	b570      	push	{r4, r5, r6, lr}
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	4606      	mov	r6, r0
 8006190:	460c      	mov	r4, r1
 8006192:	b125      	cbz	r5, 800619e <__swsetup_r+0x16>
 8006194:	69ab      	ldr	r3, [r5, #24]
 8006196:	b913      	cbnz	r3, 800619e <__swsetup_r+0x16>
 8006198:	4628      	mov	r0, r5
 800619a:	f000 f953 	bl	8006444 <__sinit>
 800619e:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <__swsetup_r+0xd0>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d10f      	bne.n	80061c4 <__swsetup_r+0x3c>
 80061a4:	686c      	ldr	r4, [r5, #4]
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	0715      	lsls	r5, r2, #28
 80061ae:	d42c      	bmi.n	800620a <__swsetup_r+0x82>
 80061b0:	06d0      	lsls	r0, r2, #27
 80061b2:	d411      	bmi.n	80061d8 <__swsetup_r+0x50>
 80061b4:	2209      	movs	r2, #9
 80061b6:	6032      	str	r2, [r6, #0]
 80061b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e03e      	b.n	8006242 <__swsetup_r+0xba>
 80061c4:	4b25      	ldr	r3, [pc, #148]	; (800625c <__swsetup_r+0xd4>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <__swsetup_r+0x46>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7eb      	b.n	80061a6 <__swsetup_r+0x1e>
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <__swsetup_r+0xd8>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7e6      	b.n	80061a6 <__swsetup_r+0x1e>
 80061d8:	0751      	lsls	r1, r2, #29
 80061da:	d512      	bpl.n	8006202 <__swsetup_r+0x7a>
 80061dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061de:	b141      	cbz	r1, 80061f2 <__swsetup_r+0x6a>
 80061e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e4:	4299      	cmp	r1, r3
 80061e6:	d002      	beq.n	80061ee <__swsetup_r+0x66>
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 fa21 	bl	8006630 <_free_r>
 80061ee:	2300      	movs	r3, #0
 80061f0:	6363      	str	r3, [r4, #52]	; 0x34
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	2300      	movs	r3, #0
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0308 	orr.w	r3, r3, #8
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	b94b      	cbnz	r3, 8006222 <__swsetup_r+0x9a>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d003      	beq.n	8006222 <__swsetup_r+0x9a>
 800621a:	4621      	mov	r1, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f000 f9bf 	bl	80065a0 <__smakebuf_r>
 8006222:	89a2      	ldrh	r2, [r4, #12]
 8006224:	f012 0301 	ands.w	r3, r2, #1
 8006228:	d00c      	beq.n	8006244 <__swsetup_r+0xbc>
 800622a:	2300      	movs	r3, #0
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	425b      	negs	r3, r3
 8006232:	61a3      	str	r3, [r4, #24]
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b953      	cbnz	r3, 800624e <__swsetup_r+0xc6>
 8006238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006240:	d1ba      	bne.n	80061b8 <__swsetup_r+0x30>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	0792      	lsls	r2, r2, #30
 8006246:	bf58      	it	pl
 8006248:	6963      	ldrpl	r3, [r4, #20]
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	e7f2      	b.n	8006234 <__swsetup_r+0xac>
 800624e:	2000      	movs	r0, #0
 8006250:	e7f7      	b.n	8006242 <__swsetup_r+0xba>
 8006252:	bf00      	nop
 8006254:	20000010 	.word	0x20000010
 8006258:	08006f2c 	.word	0x08006f2c
 800625c:	08006f4c 	.word	0x08006f4c
 8006260:	08006f0c 	.word	0x08006f0c

08006264 <__sflush_r>:
 8006264:	898a      	ldrh	r2, [r1, #12]
 8006266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	0710      	lsls	r0, r2, #28
 800626e:	460c      	mov	r4, r1
 8006270:	d458      	bmi.n	8006324 <__sflush_r+0xc0>
 8006272:	684b      	ldr	r3, [r1, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dc05      	bgt.n	8006284 <__sflush_r+0x20>
 8006278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	dc02      	bgt.n	8006284 <__sflush_r+0x20>
 800627e:	2000      	movs	r0, #0
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006286:	2e00      	cmp	r6, #0
 8006288:	d0f9      	beq.n	800627e <__sflush_r+0x1a>
 800628a:	2300      	movs	r3, #0
 800628c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006290:	682f      	ldr	r7, [r5, #0]
 8006292:	6a21      	ldr	r1, [r4, #32]
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	d032      	beq.n	80062fe <__sflush_r+0x9a>
 8006298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	075a      	lsls	r2, r3, #29
 800629e:	d505      	bpl.n	80062ac <__sflush_r+0x48>
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062a6:	b10b      	cbz	r3, 80062ac <__sflush_r+0x48>
 80062a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062aa:	1ac0      	subs	r0, r0, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	4602      	mov	r2, r0
 80062b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b2:	6a21      	ldr	r1, [r4, #32]
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b0      	blx	r6
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	d106      	bne.n	80062cc <__sflush_r+0x68>
 80062be:	6829      	ldr	r1, [r5, #0]
 80062c0:	291d      	cmp	r1, #29
 80062c2:	d848      	bhi.n	8006356 <__sflush_r+0xf2>
 80062c4:	4a29      	ldr	r2, [pc, #164]	; (800636c <__sflush_r+0x108>)
 80062c6:	40ca      	lsrs	r2, r1
 80062c8:	07d6      	lsls	r6, r2, #31
 80062ca:	d544      	bpl.n	8006356 <__sflush_r+0xf2>
 80062cc:	2200      	movs	r2, #0
 80062ce:	6062      	str	r2, [r4, #4]
 80062d0:	04d9      	lsls	r1, r3, #19
 80062d2:	6922      	ldr	r2, [r4, #16]
 80062d4:	6022      	str	r2, [r4, #0]
 80062d6:	d504      	bpl.n	80062e2 <__sflush_r+0x7e>
 80062d8:	1c42      	adds	r2, r0, #1
 80062da:	d101      	bne.n	80062e0 <__sflush_r+0x7c>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b903      	cbnz	r3, 80062e2 <__sflush_r+0x7e>
 80062e0:	6560      	str	r0, [r4, #84]	; 0x54
 80062e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062e4:	602f      	str	r7, [r5, #0]
 80062e6:	2900      	cmp	r1, #0
 80062e8:	d0c9      	beq.n	800627e <__sflush_r+0x1a>
 80062ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ee:	4299      	cmp	r1, r3
 80062f0:	d002      	beq.n	80062f8 <__sflush_r+0x94>
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f99c 	bl	8006630 <_free_r>
 80062f8:	2000      	movs	r0, #0
 80062fa:	6360      	str	r0, [r4, #52]	; 0x34
 80062fc:	e7c0      	b.n	8006280 <__sflush_r+0x1c>
 80062fe:	2301      	movs	r3, #1
 8006300:	4628      	mov	r0, r5
 8006302:	47b0      	blx	r6
 8006304:	1c41      	adds	r1, r0, #1
 8006306:	d1c8      	bne.n	800629a <__sflush_r+0x36>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0c5      	beq.n	800629a <__sflush_r+0x36>
 800630e:	2b1d      	cmp	r3, #29
 8006310:	d001      	beq.n	8006316 <__sflush_r+0xb2>
 8006312:	2b16      	cmp	r3, #22
 8006314:	d101      	bne.n	800631a <__sflush_r+0xb6>
 8006316:	602f      	str	r7, [r5, #0]
 8006318:	e7b1      	b.n	800627e <__sflush_r+0x1a>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	e7ad      	b.n	8006280 <__sflush_r+0x1c>
 8006324:	690f      	ldr	r7, [r1, #16]
 8006326:	2f00      	cmp	r7, #0
 8006328:	d0a9      	beq.n	800627e <__sflush_r+0x1a>
 800632a:	0793      	lsls	r3, r2, #30
 800632c:	680e      	ldr	r6, [r1, #0]
 800632e:	bf08      	it	eq
 8006330:	694b      	ldreq	r3, [r1, #20]
 8006332:	600f      	str	r7, [r1, #0]
 8006334:	bf18      	it	ne
 8006336:	2300      	movne	r3, #0
 8006338:	eba6 0807 	sub.w	r8, r6, r7
 800633c:	608b      	str	r3, [r1, #8]
 800633e:	f1b8 0f00 	cmp.w	r8, #0
 8006342:	dd9c      	ble.n	800627e <__sflush_r+0x1a>
 8006344:	4643      	mov	r3, r8
 8006346:	463a      	mov	r2, r7
 8006348:	6a21      	ldr	r1, [r4, #32]
 800634a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800634c:	4628      	mov	r0, r5
 800634e:	47b0      	blx	r6
 8006350:	2800      	cmp	r0, #0
 8006352:	dc06      	bgt.n	8006362 <__sflush_r+0xfe>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e78e      	b.n	8006280 <__sflush_r+0x1c>
 8006362:	4407      	add	r7, r0
 8006364:	eba8 0800 	sub.w	r8, r8, r0
 8006368:	e7e9      	b.n	800633e <__sflush_r+0xda>
 800636a:	bf00      	nop
 800636c:	20400001 	.word	0x20400001

08006370 <_fflush_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	690b      	ldr	r3, [r1, #16]
 8006374:	4605      	mov	r5, r0
 8006376:	460c      	mov	r4, r1
 8006378:	b1db      	cbz	r3, 80063b2 <_fflush_r+0x42>
 800637a:	b118      	cbz	r0, 8006384 <_fflush_r+0x14>
 800637c:	6983      	ldr	r3, [r0, #24]
 800637e:	b90b      	cbnz	r3, 8006384 <_fflush_r+0x14>
 8006380:	f000 f860 	bl	8006444 <__sinit>
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <_fflush_r+0x48>)
 8006386:	429c      	cmp	r4, r3
 8006388:	d109      	bne.n	800639e <_fflush_r+0x2e>
 800638a:	686c      	ldr	r4, [r5, #4]
 800638c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006390:	b17b      	cbz	r3, 80063b2 <_fflush_r+0x42>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800639a:	f7ff bf63 	b.w	8006264 <__sflush_r>
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <_fflush_r+0x4c>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	d101      	bne.n	80063a8 <_fflush_r+0x38>
 80063a4:	68ac      	ldr	r4, [r5, #8]
 80063a6:	e7f1      	b.n	800638c <_fflush_r+0x1c>
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <_fflush_r+0x50>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	bf08      	it	eq
 80063ae:	68ec      	ldreq	r4, [r5, #12]
 80063b0:	e7ec      	b.n	800638c <_fflush_r+0x1c>
 80063b2:	2000      	movs	r0, #0
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
 80063b6:	bf00      	nop
 80063b8:	08006f2c 	.word	0x08006f2c
 80063bc:	08006f4c 	.word	0x08006f4c
 80063c0:	08006f0c 	.word	0x08006f0c

080063c4 <std>:
 80063c4:	2300      	movs	r3, #0
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	e9c0 3300 	strd	r3, r3, [r0]
 80063ce:	6083      	str	r3, [r0, #8]
 80063d0:	8181      	strh	r1, [r0, #12]
 80063d2:	6643      	str	r3, [r0, #100]	; 0x64
 80063d4:	81c2      	strh	r2, [r0, #14]
 80063d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063da:	6183      	str	r3, [r0, #24]
 80063dc:	4619      	mov	r1, r3
 80063de:	2208      	movs	r2, #8
 80063e0:	305c      	adds	r0, #92	; 0x5c
 80063e2:	f7ff fd45 	bl	8005e70 <memset>
 80063e6:	4b05      	ldr	r3, [pc, #20]	; (80063fc <std+0x38>)
 80063e8:	6263      	str	r3, [r4, #36]	; 0x24
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <std+0x3c>)
 80063ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <std+0x40>)
 80063f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <std+0x44>)
 80063f4:	6224      	str	r4, [r4, #32]
 80063f6:	6323      	str	r3, [r4, #48]	; 0x30
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	08006d31 	.word	0x08006d31
 8006400:	08006d53 	.word	0x08006d53
 8006404:	08006d8b 	.word	0x08006d8b
 8006408:	08006daf 	.word	0x08006daf

0800640c <_cleanup_r>:
 800640c:	4901      	ldr	r1, [pc, #4]	; (8006414 <_cleanup_r+0x8>)
 800640e:	f000 b885 	b.w	800651c <_fwalk_reent>
 8006412:	bf00      	nop
 8006414:	08006371 	.word	0x08006371

08006418 <__sfmoreglue>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	1e4a      	subs	r2, r1, #1
 800641c:	2568      	movs	r5, #104	; 0x68
 800641e:	4355      	muls	r5, r2
 8006420:	460e      	mov	r6, r1
 8006422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006426:	f000 f951 	bl	80066cc <_malloc_r>
 800642a:	4604      	mov	r4, r0
 800642c:	b140      	cbz	r0, 8006440 <__sfmoreglue+0x28>
 800642e:	2100      	movs	r1, #0
 8006430:	e9c0 1600 	strd	r1, r6, [r0]
 8006434:	300c      	adds	r0, #12
 8006436:	60a0      	str	r0, [r4, #8]
 8006438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800643c:	f7ff fd18 	bl	8005e70 <memset>
 8006440:	4620      	mov	r0, r4
 8006442:	bd70      	pop	{r4, r5, r6, pc}

08006444 <__sinit>:
 8006444:	6983      	ldr	r3, [r0, #24]
 8006446:	b510      	push	{r4, lr}
 8006448:	4604      	mov	r4, r0
 800644a:	bb33      	cbnz	r3, 800649a <__sinit+0x56>
 800644c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006450:	6503      	str	r3, [r0, #80]	; 0x50
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <__sinit+0x58>)
 8006454:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <__sinit+0x5c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6282      	str	r2, [r0, #40]	; 0x28
 800645a:	4298      	cmp	r0, r3
 800645c:	bf04      	itt	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	6183      	streq	r3, [r0, #24]
 8006462:	f000 f81f 	bl	80064a4 <__sfp>
 8006466:	6060      	str	r0, [r4, #4]
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f81b 	bl	80064a4 <__sfp>
 800646e:	60a0      	str	r0, [r4, #8]
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f817 	bl	80064a4 <__sfp>
 8006476:	2200      	movs	r2, #0
 8006478:	60e0      	str	r0, [r4, #12]
 800647a:	2104      	movs	r1, #4
 800647c:	6860      	ldr	r0, [r4, #4]
 800647e:	f7ff ffa1 	bl	80063c4 <std>
 8006482:	2201      	movs	r2, #1
 8006484:	2109      	movs	r1, #9
 8006486:	68a0      	ldr	r0, [r4, #8]
 8006488:	f7ff ff9c 	bl	80063c4 <std>
 800648c:	2202      	movs	r2, #2
 800648e:	2112      	movs	r1, #18
 8006490:	68e0      	ldr	r0, [r4, #12]
 8006492:	f7ff ff97 	bl	80063c4 <std>
 8006496:	2301      	movs	r3, #1
 8006498:	61a3      	str	r3, [r4, #24]
 800649a:	bd10      	pop	{r4, pc}
 800649c:	08006f08 	.word	0x08006f08
 80064a0:	0800640d 	.word	0x0800640d

080064a4 <__sfp>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <__sfp+0x70>)
 80064a8:	681e      	ldr	r6, [r3, #0]
 80064aa:	69b3      	ldr	r3, [r6, #24]
 80064ac:	4607      	mov	r7, r0
 80064ae:	b913      	cbnz	r3, 80064b6 <__sfp+0x12>
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7ff ffc7 	bl	8006444 <__sinit>
 80064b6:	3648      	adds	r6, #72	; 0x48
 80064b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064bc:	3b01      	subs	r3, #1
 80064be:	d503      	bpl.n	80064c8 <__sfp+0x24>
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	b133      	cbz	r3, 80064d2 <__sfp+0x2e>
 80064c4:	6836      	ldr	r6, [r6, #0]
 80064c6:	e7f7      	b.n	80064b8 <__sfp+0x14>
 80064c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064cc:	b16d      	cbz	r5, 80064ea <__sfp+0x46>
 80064ce:	3468      	adds	r4, #104	; 0x68
 80064d0:	e7f4      	b.n	80064bc <__sfp+0x18>
 80064d2:	2104      	movs	r1, #4
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff ff9f 	bl	8006418 <__sfmoreglue>
 80064da:	6030      	str	r0, [r6, #0]
 80064dc:	2800      	cmp	r0, #0
 80064de:	d1f1      	bne.n	80064c4 <__sfp+0x20>
 80064e0:	230c      	movs	r3, #12
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4604      	mov	r4, r0
 80064e6:	4620      	mov	r0, r4
 80064e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <__sfp+0x74>)
 80064ec:	6665      	str	r5, [r4, #100]	; 0x64
 80064ee:	e9c4 5500 	strd	r5, r5, [r4]
 80064f2:	60a5      	str	r5, [r4, #8]
 80064f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80064f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80064fc:	2208      	movs	r2, #8
 80064fe:	4629      	mov	r1, r5
 8006500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006504:	f7ff fcb4 	bl	8005e70 <memset>
 8006508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800650c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006510:	e7e9      	b.n	80064e6 <__sfp+0x42>
 8006512:	bf00      	nop
 8006514:	08006f08 	.word	0x08006f08
 8006518:	ffff0001 	.word	0xffff0001

0800651c <_fwalk_reent>:
 800651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006520:	4680      	mov	r8, r0
 8006522:	4689      	mov	r9, r1
 8006524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006528:	2600      	movs	r6, #0
 800652a:	b914      	cbnz	r4, 8006532 <_fwalk_reent+0x16>
 800652c:	4630      	mov	r0, r6
 800652e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006532:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006536:	3f01      	subs	r7, #1
 8006538:	d501      	bpl.n	800653e <_fwalk_reent+0x22>
 800653a:	6824      	ldr	r4, [r4, #0]
 800653c:	e7f5      	b.n	800652a <_fwalk_reent+0xe>
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d907      	bls.n	8006554 <_fwalk_reent+0x38>
 8006544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006548:	3301      	adds	r3, #1
 800654a:	d003      	beq.n	8006554 <_fwalk_reent+0x38>
 800654c:	4629      	mov	r1, r5
 800654e:	4640      	mov	r0, r8
 8006550:	47c8      	blx	r9
 8006552:	4306      	orrs	r6, r0
 8006554:	3568      	adds	r5, #104	; 0x68
 8006556:	e7ee      	b.n	8006536 <_fwalk_reent+0x1a>

08006558 <__swhatbuf_r>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	460e      	mov	r6, r1
 800655c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006560:	2900      	cmp	r1, #0
 8006562:	b096      	sub	sp, #88	; 0x58
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	da07      	bge.n	800657a <__swhatbuf_r+0x22>
 800656a:	2300      	movs	r3, #0
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	89b3      	ldrh	r3, [r6, #12]
 8006570:	061a      	lsls	r2, r3, #24
 8006572:	d410      	bmi.n	8006596 <__swhatbuf_r+0x3e>
 8006574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006578:	e00e      	b.n	8006598 <__swhatbuf_r+0x40>
 800657a:	466a      	mov	r2, sp
 800657c:	f000 fc3e 	bl	8006dfc <_fstat_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	dbf2      	blt.n	800656a <__swhatbuf_r+0x12>
 8006584:	9a01      	ldr	r2, [sp, #4]
 8006586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800658a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800658e:	425a      	negs	r2, r3
 8006590:	415a      	adcs	r2, r3
 8006592:	602a      	str	r2, [r5, #0]
 8006594:	e7ee      	b.n	8006574 <__swhatbuf_r+0x1c>
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	2000      	movs	r0, #0
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	b016      	add	sp, #88	; 0x58
 800659e:	bd70      	pop	{r4, r5, r6, pc}

080065a0 <__smakebuf_r>:
 80065a0:	898b      	ldrh	r3, [r1, #12]
 80065a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065a4:	079d      	lsls	r5, r3, #30
 80065a6:	4606      	mov	r6, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	d507      	bpl.n	80065bc <__smakebuf_r+0x1c>
 80065ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	2301      	movs	r3, #1
 80065b6:	6163      	str	r3, [r4, #20]
 80065b8:	b002      	add	sp, #8
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	ab01      	add	r3, sp, #4
 80065be:	466a      	mov	r2, sp
 80065c0:	f7ff ffca 	bl	8006558 <__swhatbuf_r>
 80065c4:	9900      	ldr	r1, [sp, #0]
 80065c6:	4605      	mov	r5, r0
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 f87f 	bl	80066cc <_malloc_r>
 80065ce:	b948      	cbnz	r0, 80065e4 <__smakebuf_r+0x44>
 80065d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d4:	059a      	lsls	r2, r3, #22
 80065d6:	d4ef      	bmi.n	80065b8 <__smakebuf_r+0x18>
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	e7e3      	b.n	80065ac <__smakebuf_r+0xc>
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <__smakebuf_r+0x7c>)
 80065e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	6163      	str	r3, [r4, #20]
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	6120      	str	r0, [r4, #16]
 80065fa:	b15b      	cbz	r3, 8006614 <__smakebuf_r+0x74>
 80065fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006600:	4630      	mov	r0, r6
 8006602:	f000 fc0d 	bl	8006e20 <_isatty_r>
 8006606:	b128      	cbz	r0, 8006614 <__smakebuf_r+0x74>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	431d      	orrs	r5, r3
 8006618:	81a5      	strh	r5, [r4, #12]
 800661a:	e7cd      	b.n	80065b8 <__smakebuf_r+0x18>
 800661c:	0800640d 	.word	0x0800640d

08006620 <malloc>:
 8006620:	4b02      	ldr	r3, [pc, #8]	; (800662c <malloc+0xc>)
 8006622:	4601      	mov	r1, r0
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	f000 b851 	b.w	80066cc <_malloc_r>
 800662a:	bf00      	nop
 800662c:	20000010 	.word	0x20000010

08006630 <_free_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4605      	mov	r5, r0
 8006634:	2900      	cmp	r1, #0
 8006636:	d045      	beq.n	80066c4 <_free_r+0x94>
 8006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663c:	1f0c      	subs	r4, r1, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfb8      	it	lt
 8006642:	18e4      	addlt	r4, r4, r3
 8006644:	f000 fc0e 	bl	8006e64 <__malloc_lock>
 8006648:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <_free_r+0x98>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	4610      	mov	r0, r2
 800664e:	b933      	cbnz	r3, 800665e <_free_r+0x2e>
 8006650:	6063      	str	r3, [r4, #4]
 8006652:	6014      	str	r4, [r2, #0]
 8006654:	4628      	mov	r0, r5
 8006656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665a:	f000 bc04 	b.w	8006e66 <__malloc_unlock>
 800665e:	42a3      	cmp	r3, r4
 8006660:	d90c      	bls.n	800667c <_free_r+0x4c>
 8006662:	6821      	ldr	r1, [r4, #0]
 8006664:	1862      	adds	r2, r4, r1
 8006666:	4293      	cmp	r3, r2
 8006668:	bf04      	itt	eq
 800666a:	681a      	ldreq	r2, [r3, #0]
 800666c:	685b      	ldreq	r3, [r3, #4]
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	bf04      	itt	eq
 8006672:	1852      	addeq	r2, r2, r1
 8006674:	6022      	streq	r2, [r4, #0]
 8006676:	6004      	str	r4, [r0, #0]
 8006678:	e7ec      	b.n	8006654 <_free_r+0x24>
 800667a:	4613      	mov	r3, r2
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	b10a      	cbz	r2, 8006684 <_free_r+0x54>
 8006680:	42a2      	cmp	r2, r4
 8006682:	d9fa      	bls.n	800667a <_free_r+0x4a>
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	1858      	adds	r0, r3, r1
 8006688:	42a0      	cmp	r0, r4
 800668a:	d10b      	bne.n	80066a4 <_free_r+0x74>
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	4401      	add	r1, r0
 8006690:	1858      	adds	r0, r3, r1
 8006692:	4282      	cmp	r2, r0
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	d1dd      	bne.n	8006654 <_free_r+0x24>
 8006698:	6810      	ldr	r0, [r2, #0]
 800669a:	6852      	ldr	r2, [r2, #4]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	4401      	add	r1, r0
 80066a0:	6019      	str	r1, [r3, #0]
 80066a2:	e7d7      	b.n	8006654 <_free_r+0x24>
 80066a4:	d902      	bls.n	80066ac <_free_r+0x7c>
 80066a6:	230c      	movs	r3, #12
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	e7d3      	b.n	8006654 <_free_r+0x24>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	1821      	adds	r1, r4, r0
 80066b0:	428a      	cmp	r2, r1
 80066b2:	bf04      	itt	eq
 80066b4:	6811      	ldreq	r1, [r2, #0]
 80066b6:	6852      	ldreq	r2, [r2, #4]
 80066b8:	6062      	str	r2, [r4, #4]
 80066ba:	bf04      	itt	eq
 80066bc:	1809      	addeq	r1, r1, r0
 80066be:	6021      	streq	r1, [r4, #0]
 80066c0:	605c      	str	r4, [r3, #4]
 80066c2:	e7c7      	b.n	8006654 <_free_r+0x24>
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	200000e4 	.word	0x200000e4

080066cc <_malloc_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	1ccd      	adds	r5, r1, #3
 80066d0:	f025 0503 	bic.w	r5, r5, #3
 80066d4:	3508      	adds	r5, #8
 80066d6:	2d0c      	cmp	r5, #12
 80066d8:	bf38      	it	cc
 80066da:	250c      	movcc	r5, #12
 80066dc:	2d00      	cmp	r5, #0
 80066de:	4606      	mov	r6, r0
 80066e0:	db01      	blt.n	80066e6 <_malloc_r+0x1a>
 80066e2:	42a9      	cmp	r1, r5
 80066e4:	d903      	bls.n	80066ee <_malloc_r+0x22>
 80066e6:	230c      	movs	r3, #12
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	2000      	movs	r0, #0
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	f000 fbb9 	bl	8006e64 <__malloc_lock>
 80066f2:	4a21      	ldr	r2, [pc, #132]	; (8006778 <_malloc_r+0xac>)
 80066f4:	6814      	ldr	r4, [r2, #0]
 80066f6:	4621      	mov	r1, r4
 80066f8:	b991      	cbnz	r1, 8006720 <_malloc_r+0x54>
 80066fa:	4c20      	ldr	r4, [pc, #128]	; (800677c <_malloc_r+0xb0>)
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	b91b      	cbnz	r3, 8006708 <_malloc_r+0x3c>
 8006700:	4630      	mov	r0, r6
 8006702:	f000 fb05 	bl	8006d10 <_sbrk_r>
 8006706:	6020      	str	r0, [r4, #0]
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f000 fb00 	bl	8006d10 <_sbrk_r>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d124      	bne.n	800675e <_malloc_r+0x92>
 8006714:	230c      	movs	r3, #12
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	4630      	mov	r0, r6
 800671a:	f000 fba4 	bl	8006e66 <__malloc_unlock>
 800671e:	e7e4      	b.n	80066ea <_malloc_r+0x1e>
 8006720:	680b      	ldr	r3, [r1, #0]
 8006722:	1b5b      	subs	r3, r3, r5
 8006724:	d418      	bmi.n	8006758 <_malloc_r+0x8c>
 8006726:	2b0b      	cmp	r3, #11
 8006728:	d90f      	bls.n	800674a <_malloc_r+0x7e>
 800672a:	600b      	str	r3, [r1, #0]
 800672c:	50cd      	str	r5, [r1, r3]
 800672e:	18cc      	adds	r4, r1, r3
 8006730:	4630      	mov	r0, r6
 8006732:	f000 fb98 	bl	8006e66 <__malloc_unlock>
 8006736:	f104 000b 	add.w	r0, r4, #11
 800673a:	1d23      	adds	r3, r4, #4
 800673c:	f020 0007 	bic.w	r0, r0, #7
 8006740:	1ac3      	subs	r3, r0, r3
 8006742:	d0d3      	beq.n	80066ec <_malloc_r+0x20>
 8006744:	425a      	negs	r2, r3
 8006746:	50e2      	str	r2, [r4, r3]
 8006748:	e7d0      	b.n	80066ec <_malloc_r+0x20>
 800674a:	428c      	cmp	r4, r1
 800674c:	684b      	ldr	r3, [r1, #4]
 800674e:	bf16      	itet	ne
 8006750:	6063      	strne	r3, [r4, #4]
 8006752:	6013      	streq	r3, [r2, #0]
 8006754:	460c      	movne	r4, r1
 8006756:	e7eb      	b.n	8006730 <_malloc_r+0x64>
 8006758:	460c      	mov	r4, r1
 800675a:	6849      	ldr	r1, [r1, #4]
 800675c:	e7cc      	b.n	80066f8 <_malloc_r+0x2c>
 800675e:	1cc4      	adds	r4, r0, #3
 8006760:	f024 0403 	bic.w	r4, r4, #3
 8006764:	42a0      	cmp	r0, r4
 8006766:	d005      	beq.n	8006774 <_malloc_r+0xa8>
 8006768:	1a21      	subs	r1, r4, r0
 800676a:	4630      	mov	r0, r6
 800676c:	f000 fad0 	bl	8006d10 <_sbrk_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d0cf      	beq.n	8006714 <_malloc_r+0x48>
 8006774:	6025      	str	r5, [r4, #0]
 8006776:	e7db      	b.n	8006730 <_malloc_r+0x64>
 8006778:	200000e4 	.word	0x200000e4
 800677c:	200000e8 	.word	0x200000e8

08006780 <__sfputc_r>:
 8006780:	6893      	ldr	r3, [r2, #8]
 8006782:	3b01      	subs	r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	b410      	push	{r4}
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	da08      	bge.n	800679e <__sfputc_r+0x1e>
 800678c:	6994      	ldr	r4, [r2, #24]
 800678e:	42a3      	cmp	r3, r4
 8006790:	db01      	blt.n	8006796 <__sfputc_r+0x16>
 8006792:	290a      	cmp	r1, #10
 8006794:	d103      	bne.n	800679e <__sfputc_r+0x1e>
 8006796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679a:	f7ff bca3 	b.w	80060e4 <__swbuf_r>
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	1c58      	adds	r0, r3, #1
 80067a2:	6010      	str	r0, [r2, #0]
 80067a4:	7019      	strb	r1, [r3, #0]
 80067a6:	4608      	mov	r0, r1
 80067a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <__sfputs_r>:
 80067ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b0:	4606      	mov	r6, r0
 80067b2:	460f      	mov	r7, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	18d5      	adds	r5, r2, r3
 80067b8:	42ac      	cmp	r4, r5
 80067ba:	d101      	bne.n	80067c0 <__sfputs_r+0x12>
 80067bc:	2000      	movs	r0, #0
 80067be:	e007      	b.n	80067d0 <__sfputs_r+0x22>
 80067c0:	463a      	mov	r2, r7
 80067c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ffda 	bl	8006780 <__sfputc_r>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d1f3      	bne.n	80067b8 <__sfputs_r+0xa>
 80067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067d4 <_vfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	b09d      	sub	sp, #116	; 0x74
 80067dc:	4617      	mov	r7, r2
 80067de:	461d      	mov	r5, r3
 80067e0:	4606      	mov	r6, r0
 80067e2:	b118      	cbz	r0, 80067ec <_vfiprintf_r+0x18>
 80067e4:	6983      	ldr	r3, [r0, #24]
 80067e6:	b90b      	cbnz	r3, 80067ec <_vfiprintf_r+0x18>
 80067e8:	f7ff fe2c 	bl	8006444 <__sinit>
 80067ec:	4b7c      	ldr	r3, [pc, #496]	; (80069e0 <_vfiprintf_r+0x20c>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d158      	bne.n	80068a4 <_vfiprintf_r+0xd0>
 80067f2:	6874      	ldr	r4, [r6, #4]
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	0718      	lsls	r0, r3, #28
 80067f8:	d55e      	bpl.n	80068b8 <_vfiprintf_r+0xe4>
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d05b      	beq.n	80068b8 <_vfiprintf_r+0xe4>
 8006800:	2300      	movs	r3, #0
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	2320      	movs	r3, #32
 8006806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800680a:	2330      	movs	r3, #48	; 0x30
 800680c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006810:	9503      	str	r5, [sp, #12]
 8006812:	f04f 0b01 	mov.w	fp, #1
 8006816:	46b8      	mov	r8, r7
 8006818:	4645      	mov	r5, r8
 800681a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800681e:	b10b      	cbz	r3, 8006824 <_vfiprintf_r+0x50>
 8006820:	2b25      	cmp	r3, #37	; 0x25
 8006822:	d154      	bne.n	80068ce <_vfiprintf_r+0xfa>
 8006824:	ebb8 0a07 	subs.w	sl, r8, r7
 8006828:	d00b      	beq.n	8006842 <_vfiprintf_r+0x6e>
 800682a:	4653      	mov	r3, sl
 800682c:	463a      	mov	r2, r7
 800682e:	4621      	mov	r1, r4
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff ffbc 	bl	80067ae <__sfputs_r>
 8006836:	3001      	adds	r0, #1
 8006838:	f000 80c2 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 800683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683e:	4453      	add	r3, sl
 8006840:	9309      	str	r3, [sp, #36]	; 0x24
 8006842:	f898 3000 	ldrb.w	r3, [r8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80ba 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 800684c:	2300      	movs	r3, #0
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006856:	9304      	str	r3, [sp, #16]
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800685e:	931a      	str	r3, [sp, #104]	; 0x68
 8006860:	46a8      	mov	r8, r5
 8006862:	2205      	movs	r2, #5
 8006864:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006868:	485e      	ldr	r0, [pc, #376]	; (80069e4 <_vfiprintf_r+0x210>)
 800686a:	f7f9 fcb1 	bl	80001d0 <memchr>
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	bb78      	cbnz	r0, 80068d2 <_vfiprintf_r+0xfe>
 8006872:	06d9      	lsls	r1, r3, #27
 8006874:	bf44      	itt	mi
 8006876:	2220      	movmi	r2, #32
 8006878:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800687c:	071a      	lsls	r2, r3, #28
 800687e:	bf44      	itt	mi
 8006880:	222b      	movmi	r2, #43	; 0x2b
 8006882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006886:	782a      	ldrb	r2, [r5, #0]
 8006888:	2a2a      	cmp	r2, #42	; 0x2a
 800688a:	d02a      	beq.n	80068e2 <_vfiprintf_r+0x10e>
 800688c:	9a07      	ldr	r2, [sp, #28]
 800688e:	46a8      	mov	r8, r5
 8006890:	2000      	movs	r0, #0
 8006892:	250a      	movs	r5, #10
 8006894:	4641      	mov	r1, r8
 8006896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689a:	3b30      	subs	r3, #48	; 0x30
 800689c:	2b09      	cmp	r3, #9
 800689e:	d969      	bls.n	8006974 <_vfiprintf_r+0x1a0>
 80068a0:	b360      	cbz	r0, 80068fc <_vfiprintf_r+0x128>
 80068a2:	e024      	b.n	80068ee <_vfiprintf_r+0x11a>
 80068a4:	4b50      	ldr	r3, [pc, #320]	; (80069e8 <_vfiprintf_r+0x214>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d101      	bne.n	80068ae <_vfiprintf_r+0xda>
 80068aa:	68b4      	ldr	r4, [r6, #8]
 80068ac:	e7a2      	b.n	80067f4 <_vfiprintf_r+0x20>
 80068ae:	4b4f      	ldr	r3, [pc, #316]	; (80069ec <_vfiprintf_r+0x218>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	bf08      	it	eq
 80068b4:	68f4      	ldreq	r4, [r6, #12]
 80068b6:	e79d      	b.n	80067f4 <_vfiprintf_r+0x20>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff fc64 	bl	8006188 <__swsetup_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d09d      	beq.n	8006800 <_vfiprintf_r+0x2c>
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	b01d      	add	sp, #116	; 0x74
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	46a8      	mov	r8, r5
 80068d0:	e7a2      	b.n	8006818 <_vfiprintf_r+0x44>
 80068d2:	4a44      	ldr	r2, [pc, #272]	; (80069e4 <_vfiprintf_r+0x210>)
 80068d4:	1a80      	subs	r0, r0, r2
 80068d6:	fa0b f000 	lsl.w	r0, fp, r0
 80068da:	4318      	orrs	r0, r3
 80068dc:	9004      	str	r0, [sp, #16]
 80068de:	4645      	mov	r5, r8
 80068e0:	e7be      	b.n	8006860 <_vfiprintf_r+0x8c>
 80068e2:	9a03      	ldr	r2, [sp, #12]
 80068e4:	1d11      	adds	r1, r2, #4
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	9103      	str	r1, [sp, #12]
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	db01      	blt.n	80068f2 <_vfiprintf_r+0x11e>
 80068ee:	9207      	str	r2, [sp, #28]
 80068f0:	e004      	b.n	80068fc <_vfiprintf_r+0x128>
 80068f2:	4252      	negs	r2, r2
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	9207      	str	r2, [sp, #28]
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	f898 3000 	ldrb.w	r3, [r8]
 8006900:	2b2e      	cmp	r3, #46	; 0x2e
 8006902:	d10e      	bne.n	8006922 <_vfiprintf_r+0x14e>
 8006904:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006908:	2b2a      	cmp	r3, #42	; 0x2a
 800690a:	d138      	bne.n	800697e <_vfiprintf_r+0x1aa>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	1d1a      	adds	r2, r3, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	9203      	str	r2, [sp, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfb8      	it	lt
 8006918:	f04f 33ff 	movlt.w	r3, #4294967295
 800691c:	f108 0802 	add.w	r8, r8, #2
 8006920:	9305      	str	r3, [sp, #20]
 8006922:	4d33      	ldr	r5, [pc, #204]	; (80069f0 <_vfiprintf_r+0x21c>)
 8006924:	f898 1000 	ldrb.w	r1, [r8]
 8006928:	2203      	movs	r2, #3
 800692a:	4628      	mov	r0, r5
 800692c:	f7f9 fc50 	bl	80001d0 <memchr>
 8006930:	b140      	cbz	r0, 8006944 <_vfiprintf_r+0x170>
 8006932:	2340      	movs	r3, #64	; 0x40
 8006934:	1b40      	subs	r0, r0, r5
 8006936:	fa03 f000 	lsl.w	r0, r3, r0
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	4303      	orrs	r3, r0
 800693e:	f108 0801 	add.w	r8, r8, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	f898 1000 	ldrb.w	r1, [r8]
 8006948:	482a      	ldr	r0, [pc, #168]	; (80069f4 <_vfiprintf_r+0x220>)
 800694a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800694e:	2206      	movs	r2, #6
 8006950:	f108 0701 	add.w	r7, r8, #1
 8006954:	f7f9 fc3c 	bl	80001d0 <memchr>
 8006958:	2800      	cmp	r0, #0
 800695a:	d037      	beq.n	80069cc <_vfiprintf_r+0x1f8>
 800695c:	4b26      	ldr	r3, [pc, #152]	; (80069f8 <_vfiprintf_r+0x224>)
 800695e:	bb1b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x1d4>
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	3307      	adds	r3, #7
 8006964:	f023 0307 	bic.w	r3, r3, #7
 8006968:	3308      	adds	r3, #8
 800696a:	9303      	str	r3, [sp, #12]
 800696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696e:	444b      	add	r3, r9
 8006970:	9309      	str	r3, [sp, #36]	; 0x24
 8006972:	e750      	b.n	8006816 <_vfiprintf_r+0x42>
 8006974:	fb05 3202 	mla	r2, r5, r2, r3
 8006978:	2001      	movs	r0, #1
 800697a:	4688      	mov	r8, r1
 800697c:	e78a      	b.n	8006894 <_vfiprintf_r+0xc0>
 800697e:	2300      	movs	r3, #0
 8006980:	f108 0801 	add.w	r8, r8, #1
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	4619      	mov	r1, r3
 8006988:	250a      	movs	r5, #10
 800698a:	4640      	mov	r0, r8
 800698c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006990:	3a30      	subs	r2, #48	; 0x30
 8006992:	2a09      	cmp	r2, #9
 8006994:	d903      	bls.n	800699e <_vfiprintf_r+0x1ca>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0c3      	beq.n	8006922 <_vfiprintf_r+0x14e>
 800699a:	9105      	str	r1, [sp, #20]
 800699c:	e7c1      	b.n	8006922 <_vfiprintf_r+0x14e>
 800699e:	fb05 2101 	mla	r1, r5, r1, r2
 80069a2:	2301      	movs	r3, #1
 80069a4:	4680      	mov	r8, r0
 80069a6:	e7f0      	b.n	800698a <_vfiprintf_r+0x1b6>
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4622      	mov	r2, r4
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <_vfiprintf_r+0x228>)
 80069b0:	a904      	add	r1, sp, #16
 80069b2:	4630      	mov	r0, r6
 80069b4:	f3af 8000 	nop.w
 80069b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069bc:	4681      	mov	r9, r0
 80069be:	d1d5      	bne.n	800696c <_vfiprintf_r+0x198>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	065b      	lsls	r3, r3, #25
 80069c4:	f53f af7e 	bmi.w	80068c4 <_vfiprintf_r+0xf0>
 80069c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ca:	e77d      	b.n	80068c8 <_vfiprintf_r+0xf4>
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4622      	mov	r2, r4
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <_vfiprintf_r+0x228>)
 80069d4:	a904      	add	r1, sp, #16
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f888 	bl	8006aec <_printf_i>
 80069dc:	e7ec      	b.n	80069b8 <_vfiprintf_r+0x1e4>
 80069de:	bf00      	nop
 80069e0:	08006f2c 	.word	0x08006f2c
 80069e4:	08006f6c 	.word	0x08006f6c
 80069e8:	08006f4c 	.word	0x08006f4c
 80069ec:	08006f0c 	.word	0x08006f0c
 80069f0:	08006f72 	.word	0x08006f72
 80069f4:	08006f76 	.word	0x08006f76
 80069f8:	00000000 	.word	0x00000000
 80069fc:	080067af 	.word	0x080067af

08006a00 <_printf_common>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	4691      	mov	r9, r2
 8006a06:	461f      	mov	r7, r3
 8006a08:	688a      	ldr	r2, [r1, #8]
 8006a0a:	690b      	ldr	r3, [r1, #16]
 8006a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	bfb8      	it	lt
 8006a14:	4613      	movlt	r3, r2
 8006a16:	f8c9 3000 	str.w	r3, [r9]
 8006a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	b112      	cbz	r2, 8006a2a <_printf_common+0x2a>
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c9 3000 	str.w	r3, [r9]
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	0699      	lsls	r1, r3, #26
 8006a2e:	bf42      	ittt	mi
 8006a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a34:	3302      	addmi	r3, #2
 8006a36:	f8c9 3000 	strmi.w	r3, [r9]
 8006a3a:	6825      	ldr	r5, [r4, #0]
 8006a3c:	f015 0506 	ands.w	r5, r5, #6
 8006a40:	d107      	bne.n	8006a52 <_printf_common+0x52>
 8006a42:	f104 0a19 	add.w	sl, r4, #25
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	f8d9 2000 	ldr.w	r2, [r9]
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	42ab      	cmp	r3, r5
 8006a50:	dc28      	bgt.n	8006aa4 <_printf_common+0xa4>
 8006a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	3300      	adds	r3, #0
 8006a5a:	bf18      	it	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	0692      	lsls	r2, r2, #26
 8006a60:	d42d      	bmi.n	8006abe <_printf_common+0xbe>
 8006a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a66:	4639      	mov	r1, r7
 8006a68:	4630      	mov	r0, r6
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d020      	beq.n	8006ab2 <_printf_common+0xb2>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	68e5      	ldr	r5, [r4, #12]
 8006a74:	f8d9 2000 	ldr.w	r2, [r9]
 8006a78:	f003 0306 	and.w	r3, r3, #6
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	bf08      	it	eq
 8006a80:	1aad      	subeq	r5, r5, r2
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	f04f 0900 	mov.w	r9, #0
 8006a9a:	341a      	adds	r4, #26
 8006a9c:	454d      	cmp	r5, r9
 8006a9e:	d11a      	bne.n	8006ad6 <_printf_common+0xd6>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e008      	b.n	8006ab6 <_printf_common+0xb6>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4630      	mov	r0, r6
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d103      	bne.n	8006aba <_printf_common+0xba>
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	3501      	adds	r5, #1
 8006abc:	e7c3      	b.n	8006a46 <_printf_common+0x46>
 8006abe:	18e1      	adds	r1, r4, r3
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	2030      	movs	r0, #48	; 0x30
 8006ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac8:	4422      	add	r2, r4
 8006aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	e7c5      	b.n	8006a62 <_printf_common+0x62>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4639      	mov	r1, r7
 8006adc:	4630      	mov	r0, r6
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d0e6      	beq.n	8006ab2 <_printf_common+0xb2>
 8006ae4:	f109 0901 	add.w	r9, r9, #1
 8006ae8:	e7d8      	b.n	8006a9c <_printf_common+0x9c>
	...

08006aec <_printf_i>:
 8006aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006af4:	460c      	mov	r4, r1
 8006af6:	7e09      	ldrb	r1, [r1, #24]
 8006af8:	b085      	sub	sp, #20
 8006afa:	296e      	cmp	r1, #110	; 0x6e
 8006afc:	4617      	mov	r7, r2
 8006afe:	4606      	mov	r6, r0
 8006b00:	4698      	mov	r8, r3
 8006b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b04:	f000 80b3 	beq.w	8006c6e <_printf_i+0x182>
 8006b08:	d822      	bhi.n	8006b50 <_printf_i+0x64>
 8006b0a:	2963      	cmp	r1, #99	; 0x63
 8006b0c:	d036      	beq.n	8006b7c <_printf_i+0x90>
 8006b0e:	d80a      	bhi.n	8006b26 <_printf_i+0x3a>
 8006b10:	2900      	cmp	r1, #0
 8006b12:	f000 80b9 	beq.w	8006c88 <_printf_i+0x19c>
 8006b16:	2958      	cmp	r1, #88	; 0x58
 8006b18:	f000 8083 	beq.w	8006c22 <_printf_i+0x136>
 8006b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b24:	e032      	b.n	8006b8c <_printf_i+0xa0>
 8006b26:	2964      	cmp	r1, #100	; 0x64
 8006b28:	d001      	beq.n	8006b2e <_printf_i+0x42>
 8006b2a:	2969      	cmp	r1, #105	; 0x69
 8006b2c:	d1f6      	bne.n	8006b1c <_printf_i+0x30>
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	6813      	ldr	r3, [r2, #0]
 8006b32:	0605      	lsls	r5, r0, #24
 8006b34:	f103 0104 	add.w	r1, r3, #4
 8006b38:	d52a      	bpl.n	8006b90 <_printf_i+0xa4>
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da03      	bge.n	8006b4a <_printf_i+0x5e>
 8006b42:	222d      	movs	r2, #45	; 0x2d
 8006b44:	425b      	negs	r3, r3
 8006b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b4a:	486f      	ldr	r0, [pc, #444]	; (8006d08 <_printf_i+0x21c>)
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	e039      	b.n	8006bc4 <_printf_i+0xd8>
 8006b50:	2973      	cmp	r1, #115	; 0x73
 8006b52:	f000 809d 	beq.w	8006c90 <_printf_i+0x1a4>
 8006b56:	d808      	bhi.n	8006b6a <_printf_i+0x7e>
 8006b58:	296f      	cmp	r1, #111	; 0x6f
 8006b5a:	d020      	beq.n	8006b9e <_printf_i+0xb2>
 8006b5c:	2970      	cmp	r1, #112	; 0x70
 8006b5e:	d1dd      	bne.n	8006b1c <_printf_i+0x30>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	e003      	b.n	8006b72 <_printf_i+0x86>
 8006b6a:	2975      	cmp	r1, #117	; 0x75
 8006b6c:	d017      	beq.n	8006b9e <_printf_i+0xb2>
 8006b6e:	2978      	cmp	r1, #120	; 0x78
 8006b70:	d1d4      	bne.n	8006b1c <_printf_i+0x30>
 8006b72:	2378      	movs	r3, #120	; 0x78
 8006b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b78:	4864      	ldr	r0, [pc, #400]	; (8006d0c <_printf_i+0x220>)
 8006b7a:	e055      	b.n	8006c28 <_printf_i+0x13c>
 8006b7c:	6813      	ldr	r3, [r2, #0]
 8006b7e:	1d19      	adds	r1, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6011      	str	r1, [r2, #0]
 8006b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e08c      	b.n	8006caa <_printf_i+0x1be>
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b98:	bf18      	it	ne
 8006b9a:	b21b      	sxthne	r3, r3
 8006b9c:	e7cf      	b.n	8006b3e <_printf_i+0x52>
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	6825      	ldr	r5, [r4, #0]
 8006ba2:	1d18      	adds	r0, r3, #4
 8006ba4:	6010      	str	r0, [r2, #0]
 8006ba6:	0628      	lsls	r0, r5, #24
 8006ba8:	d501      	bpl.n	8006bae <_printf_i+0xc2>
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	e002      	b.n	8006bb4 <_printf_i+0xc8>
 8006bae:	0668      	lsls	r0, r5, #25
 8006bb0:	d5fb      	bpl.n	8006baa <_printf_i+0xbe>
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4854      	ldr	r0, [pc, #336]	; (8006d08 <_printf_i+0x21c>)
 8006bb6:	296f      	cmp	r1, #111	; 0x6f
 8006bb8:	bf14      	ite	ne
 8006bba:	220a      	movne	r2, #10
 8006bbc:	2208      	moveq	r2, #8
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc4:	6865      	ldr	r5, [r4, #4]
 8006bc6:	60a5      	str	r5, [r4, #8]
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	f2c0 8095 	blt.w	8006cf8 <_printf_i+0x20c>
 8006bce:	6821      	ldr	r1, [r4, #0]
 8006bd0:	f021 0104 	bic.w	r1, r1, #4
 8006bd4:	6021      	str	r1, [r4, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13d      	bne.n	8006c56 <_printf_i+0x16a>
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	f040 808e 	bne.w	8006cfc <_printf_i+0x210>
 8006be0:	4665      	mov	r5, ip
 8006be2:	2a08      	cmp	r2, #8
 8006be4:	d10b      	bne.n	8006bfe <_printf_i+0x112>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	07db      	lsls	r3, r3, #31
 8006bea:	d508      	bpl.n	8006bfe <_printf_i+0x112>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfde      	ittt	le
 8006bf4:	2330      	movle	r3, #48	; 0x30
 8006bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bfe:	ebac 0305 	sub.w	r3, ip, r5
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	f8cd 8000 	str.w	r8, [sp]
 8006c08:	463b      	mov	r3, r7
 8006c0a:	aa03      	add	r2, sp, #12
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff fef6 	bl	8006a00 <_printf_common>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d14d      	bne.n	8006cb4 <_printf_i+0x1c8>
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	b005      	add	sp, #20
 8006c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c22:	4839      	ldr	r0, [pc, #228]	; (8006d08 <_printf_i+0x21c>)
 8006c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	6821      	ldr	r1, [r4, #0]
 8006c2c:	1d1d      	adds	r5, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6015      	str	r5, [r2, #0]
 8006c32:	060a      	lsls	r2, r1, #24
 8006c34:	d50b      	bpl.n	8006c4e <_printf_i+0x162>
 8006c36:	07ca      	lsls	r2, r1, #31
 8006c38:	bf44      	itt	mi
 8006c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c3e:	6021      	strmi	r1, [r4, #0]
 8006c40:	b91b      	cbnz	r3, 8006c4a <_printf_i+0x15e>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	f022 0220 	bic.w	r2, r2, #32
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	e7b7      	b.n	8006bbe <_printf_i+0xd2>
 8006c4e:	064d      	lsls	r5, r1, #25
 8006c50:	bf48      	it	mi
 8006c52:	b29b      	uxthmi	r3, r3
 8006c54:	e7ef      	b.n	8006c36 <_printf_i+0x14a>
 8006c56:	4665      	mov	r5, ip
 8006c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c60:	5cc3      	ldrb	r3, [r0, r3]
 8006c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c66:	460b      	mov	r3, r1
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d1f5      	bne.n	8006c58 <_printf_i+0x16c>
 8006c6c:	e7b9      	b.n	8006be2 <_printf_i+0xf6>
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	6825      	ldr	r5, [r4, #0]
 8006c72:	6961      	ldr	r1, [r4, #20]
 8006c74:	1d18      	adds	r0, r3, #4
 8006c76:	6010      	str	r0, [r2, #0]
 8006c78:	0628      	lsls	r0, r5, #24
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	d501      	bpl.n	8006c82 <_printf_i+0x196>
 8006c7e:	6019      	str	r1, [r3, #0]
 8006c80:	e002      	b.n	8006c88 <_printf_i+0x19c>
 8006c82:	066a      	lsls	r2, r5, #25
 8006c84:	d5fb      	bpl.n	8006c7e <_printf_i+0x192>
 8006c86:	8019      	strh	r1, [r3, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	4665      	mov	r5, ip
 8006c8e:	e7b9      	b.n	8006c04 <_printf_i+0x118>
 8006c90:	6813      	ldr	r3, [r2, #0]
 8006c92:	1d19      	adds	r1, r3, #4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	681d      	ldr	r5, [r3, #0]
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7f9 fa97 	bl	80001d0 <memchr>
 8006ca2:	b108      	cbz	r0, 8006ca8 <_printf_i+0x1bc>
 8006ca4:	1b40      	subs	r0, r0, r5
 8006ca6:	6060      	str	r0, [r4, #4]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	2300      	movs	r3, #0
 8006cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb2:	e7a7      	b.n	8006c04 <_printf_i+0x118>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	47c0      	blx	r8
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d0aa      	beq.n	8006c18 <_printf_i+0x12c>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	079b      	lsls	r3, r3, #30
 8006cc6:	d413      	bmi.n	8006cf0 <_printf_i+0x204>
 8006cc8:	68e0      	ldr	r0, [r4, #12]
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	4298      	cmp	r0, r3
 8006cce:	bfb8      	it	lt
 8006cd0:	4618      	movlt	r0, r3
 8006cd2:	e7a3      	b.n	8006c1c <_printf_i+0x130>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	464a      	mov	r2, r9
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d09a      	beq.n	8006c18 <_printf_i+0x12c>
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	68e3      	ldr	r3, [r4, #12]
 8006ce6:	9a03      	ldr	r2, [sp, #12]
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	42ab      	cmp	r3, r5
 8006cec:	dcf2      	bgt.n	8006cd4 <_printf_i+0x1e8>
 8006cee:	e7eb      	b.n	8006cc8 <_printf_i+0x1dc>
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	f104 0919 	add.w	r9, r4, #25
 8006cf6:	e7f5      	b.n	8006ce4 <_printf_i+0x1f8>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ac      	bne.n	8006c56 <_printf_i+0x16a>
 8006cfc:	7803      	ldrb	r3, [r0, #0]
 8006cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d06:	e76c      	b.n	8006be2 <_printf_i+0xf6>
 8006d08:	08006f7d 	.word	0x08006f7d
 8006d0c:	08006f8e 	.word	0x08006f8e

08006d10 <_sbrk_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4c06      	ldr	r4, [pc, #24]	; (8006d2c <_sbrk_r+0x1c>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4605      	mov	r5, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	f7fe fff2 	bl	8005d04 <_sbrk>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_sbrk_r+0x1a>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_sbrk_r+0x1a>
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20000970 	.word	0x20000970

08006d30 <__sread>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	460c      	mov	r4, r1
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	f000 f896 	bl	8006e68 <_read_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	bfab      	itete	ge
 8006d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d42:	89a3      	ldrhlt	r3, [r4, #12]
 8006d44:	181b      	addge	r3, r3, r0
 8006d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d4a:	bfac      	ite	ge
 8006d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d4e:	81a3      	strhlt	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__swrite>:
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	461f      	mov	r7, r3
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	05db      	lsls	r3, r3, #23
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	4616      	mov	r6, r2
 8006d62:	d505      	bpl.n	8006d70 <__swrite+0x1e>
 8006d64:	2302      	movs	r3, #2
 8006d66:	2200      	movs	r2, #0
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	f000 f868 	bl	8006e40 <_lseek_r>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	463b      	mov	r3, r7
 8006d80:	4628      	mov	r0, r5
 8006d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	f000 b817 	b.w	8006db8 <_write_r>

08006d8a <__sseek>:
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d92:	f000 f855 	bl	8006e40 <_lseek_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	bf15      	itete	ne
 8006d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006da6:	81a3      	strheq	r3, [r4, #12]
 8006da8:	bf18      	it	ne
 8006daa:	81a3      	strhne	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__sclose>:
 8006dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db2:	f000 b813 	b.w	8006ddc <_close_r>
	...

08006db8 <_write_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4c07      	ldr	r4, [pc, #28]	; (8006dd8 <_write_r+0x20>)
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fe ff4b 	bl	8005c62 <_write>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_write_r+0x1e>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_write_r+0x1e>
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000970 	.word	0x20000970

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4c06      	ldr	r4, [pc, #24]	; (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4605      	mov	r5, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	f7fe ff57 	bl	8005c9a <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000970 	.word	0x20000970

08006dfc <_fstat_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4c07      	ldr	r4, [pc, #28]	; (8006e1c <_fstat_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4605      	mov	r5, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	f7fe ff52 	bl	8005cb2 <_fstat>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_fstat_r+0x1c>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_fstat_r+0x1c>
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000970 	.word	0x20000970

08006e20 <_isatty_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4c06      	ldr	r4, [pc, #24]	; (8006e3c <_isatty_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4605      	mov	r5, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	f7fe ff51 	bl	8005cd2 <_isatty>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_isatty_r+0x1a>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_isatty_r+0x1a>
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000970 	.word	0x20000970

08006e40 <_lseek_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4c07      	ldr	r4, [pc, #28]	; (8006e60 <_lseek_r+0x20>)
 8006e44:	4605      	mov	r5, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fe ff4a 	bl	8005ce8 <_lseek>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_lseek_r+0x1e>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_lseek_r+0x1e>
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000970 	.word	0x20000970

08006e64 <__malloc_lock>:
 8006e64:	4770      	bx	lr

08006e66 <__malloc_unlock>:
 8006e66:	4770      	bx	lr

08006e68 <_read_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4c07      	ldr	r4, [pc, #28]	; (8006e88 <_read_r+0x20>)
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	4608      	mov	r0, r1
 8006e70:	4611      	mov	r1, r2
 8006e72:	2200      	movs	r2, #0
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fe fed6 	bl	8005c28 <_read>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_read_r+0x1e>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_read_r+0x1e>
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	20000970 	.word	0x20000970

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
